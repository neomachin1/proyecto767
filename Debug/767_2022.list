
767_2022.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e70  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  08007070  08007070  00017070  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007114  08007114  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08007114  08007114  00017114  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800711c  0800711c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800711c  0800711c  0001711c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007120  08007120  00017120  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08007124  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000520  20000070  08007194  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000590  08007194  00020590  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013a92  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026a4  00000000  00000000  00033b30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001010  00000000  00000000  000361d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f18  00000000  00000000  000371e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000280e5  00000000  00000000  00038100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000137b2  00000000  00000000  000601e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fef5c  00000000  00000000  00073997  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001728f3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000472c  00000000  00000000  00172944  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000070 	.word	0x20000070
 800021c:	00000000 	.word	0x00000000
 8000220:	08007058 	.word	0x08007058

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000074 	.word	0x20000074
 800023c:	08007058 	.word	0x08007058

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e4:	b5b0      	push	{r4, r5, r7, lr}
 80005e6:	b088      	sub	sp, #32
 80005e8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ea:	f001 f8a6 	bl	800173a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ee:	f000 f8bf 	bl	8000770 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f2:	f000 fb93 	bl	8000d1c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80005f6:	f000 fb3b 	bl	8000c70 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 80005fa:	f000 fa0f 	bl	8000a1c <MX_TIM1_Init>
  MX_TIM3_Init();
 80005fe:	f000 fa67 	bl	8000ad0 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000602:	f000 fab5 	bl	8000b70 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 8000606:	f000 fb03 	bl	8000c10 <MX_USART2_UART_Init>
  MX_DMA_Init();
 800060a:	f000 fb61 	bl	8000cd0 <MX_DMA_Init>
  MX_ADC1_Init();
 800060e:	f000 f921 	bl	8000854 <MX_ADC1_Init>
  MX_ADC3_Init();
 8000612:	f000 f991 	bl	8000938 <MX_ADC3_Init>
  /* USER CODE BEGIN 2 */
  uint8_t mensaje1[] = "Error conversion ADC1 DMA\r\n";
 8000616:	4b46      	ldr	r3, [pc, #280]	; (8000730 <main+0x14c>)
 8000618:	1d3c      	adds	r4, r7, #4
 800061a:	461d      	mov	r5, r3
 800061c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800061e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000620:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000624:	e884 0007 	stmia.w	r4, {r0, r1, r2}

  //HAL_TIM_Base_Start_IT(&htim2);							//Contador de tiempo para ejecucion
  HAL_TIM_Base_Start_IT(&htim3);							//Temporizador
 8000628:	4842      	ldr	r0, [pc, #264]	; (8000734 <main+0x150>)
 800062a:	f003 feff 	bl	800442c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);							//Temporizador
 800062e:	4842      	ldr	r0, [pc, #264]	; (8000738 <main+0x154>)
 8000630:	f003 fefc 	bl	800442c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);			//Contador Encoder
 8000634:	213c      	movs	r1, #60	; 0x3c
 8000636:	4841      	ldr	r0, [pc, #260]	; (800073c <main+0x158>)
 8000638:	f004 f816 	bl	8004668 <HAL_TIM_Encoder_Start>
  HAL_UART_Receive_IT(&huart2, (uint8_t*)TGPS, 1);
 800063c:	2201      	movs	r2, #1
 800063e:	4940      	ldr	r1, [pc, #256]	; (8000740 <main+0x15c>)
 8000640:	4840      	ldr	r0, [pc, #256]	; (8000744 <main+0x160>)
 8000642:	f004 fd79 	bl	8005138 <HAL_UART_Receive_IT>

  _ACC1 = 0;
 8000646:	4b40      	ldr	r3, [pc, #256]	; (8000748 <main+0x164>)
 8000648:	2200      	movs	r2, #0
 800064a:	701a      	strb	r2, [r3, #0]
  _ACC2 = 0;
 800064c:	4b3f      	ldr	r3, [pc, #252]	; (800074c <main+0x168>)
 800064e:	2200      	movs	r2, #0
 8000650:	701a      	strb	r2, [r3, #0]
  _ENCODER = 0;
 8000652:	4b3f      	ldr	r3, [pc, #252]	; (8000750 <main+0x16c>)
 8000654:	2200      	movs	r2, #0
 8000656:	701a      	strb	r2, [r3, #0]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
 // CDC_Transmit_FS((char*)datos, sizeof(datos)-1);
 // CDC_Transmit_FS((char*)mensaje, sizeof(mensaje)-1);
	HAL_Delay(200);
 8000658:	20c8      	movs	r0, #200	; 0xc8
 800065a:	f001 f8cb 	bl	80017f4 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOB, LD1_Pin);
 800065e:	2101      	movs	r1, #1
 8000660:	483c      	ldr	r0, [pc, #240]	; (8000754 <main+0x170>)
 8000662:	f002 fd14 	bl	800308e <HAL_GPIO_TogglePin>
	HAL_ADC_Start_DMA(&hadc1, DMA_ADC, 3);
 8000666:	2203      	movs	r2, #3
 8000668:	493b      	ldr	r1, [pc, #236]	; (8000758 <main+0x174>)
 800066a:	483c      	ldr	r0, [pc, #240]	; (800075c <main+0x178>)
 800066c:	f001 fa3a 	bl	8001ae4 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc3, DMA_ADC+3, 3);
 8000670:	4b3b      	ldr	r3, [pc, #236]	; (8000760 <main+0x17c>)
 8000672:	2203      	movs	r2, #3
 8000674:	4619      	mov	r1, r3
 8000676:	483b      	ldr	r0, [pc, #236]	; (8000764 <main+0x180>)
 8000678:	f001 fa34 	bl	8001ae4 <HAL_ADC_Start_DMA>

  switch (state_int)
 800067c:	4b3a      	ldr	r3, [pc, #232]	; (8000768 <main+0x184>)
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	3b0a      	subs	r3, #10
 8000682:	2b1e      	cmp	r3, #30
 8000684:	d852      	bhi.n	800072c <main+0x148>
 8000686:	a201      	add	r2, pc, #4	; (adr r2, 800068c <main+0xa8>)
 8000688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800068c:	08000709 	.word	0x08000709
 8000690:	0800072d 	.word	0x0800072d
 8000694:	0800072d 	.word	0x0800072d
 8000698:	0800072d 	.word	0x0800072d
 800069c:	0800072d 	.word	0x0800072d
 80006a0:	0800072d 	.word	0x0800072d
 80006a4:	0800072d 	.word	0x0800072d
 80006a8:	0800072d 	.word	0x0800072d
 80006ac:	0800072d 	.word	0x0800072d
 80006b0:	0800072d 	.word	0x0800072d
 80006b4:	0800072d 	.word	0x0800072d
 80006b8:	0800072d 	.word	0x0800072d
 80006bc:	0800072d 	.word	0x0800072d
 80006c0:	0800072d 	.word	0x0800072d
 80006c4:	0800072d 	.word	0x0800072d
 80006c8:	0800072d 	.word	0x0800072d
 80006cc:	0800072d 	.word	0x0800072d
 80006d0:	0800072d 	.word	0x0800072d
 80006d4:	0800072d 	.word	0x0800072d
 80006d8:	0800072d 	.word	0x0800072d
 80006dc:	0800072d 	.word	0x0800072d
 80006e0:	0800072d 	.word	0x0800072d
 80006e4:	0800072d 	.word	0x0800072d
 80006e8:	0800072d 	.word	0x0800072d
 80006ec:	0800072d 	.word	0x0800072d
 80006f0:	0800072d 	.word	0x0800072d
 80006f4:	0800072d 	.word	0x0800072d
 80006f8:	0800072d 	.word	0x0800072d
 80006fc:	0800072d 	.word	0x0800072d
 8000700:	0800072d 	.word	0x0800072d
 8000704:	0800072d 	.word	0x0800072d
  {
  case 10:
	  if (flg ==1){
 8000708:	4b18      	ldr	r3, [pc, #96]	; (800076c <main+0x188>)
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	b2db      	uxtb	r3, r3
 800070e:	2b01      	cmp	r3, #1
 8000710:	d104      	bne.n	800071c <main+0x138>
		  //HAL_UART_Transmit_IT(&huart3, (uint8_t*)GPRMC, 75);
			asm("NOP");
 8000712:	bf00      	nop
			asm("NOP");
 8000714:	bf00      	nop
			asm("NOP");
 8000716:	bf00      	nop
			asm("NOP");
 8000718:	bf00      	nop
 800071a:	e003      	b.n	8000724 <main+0x140>
	  } else {
		  //HAL_UART_Transmit_IT(&huart3, (uint8_t*)GPGGA, 73);
			asm("NOP");
 800071c:	bf00      	nop
			asm("NOP");
 800071e:	bf00      	nop
			asm("NOP");
 8000720:	bf00      	nop
			asm("NOP");
 8000722:	bf00      	nop
	  }

	  state_int = 0;
 8000724:	4b10      	ldr	r3, [pc, #64]	; (8000768 <main+0x184>)
 8000726:	2200      	movs	r2, #0
 8000728:	701a      	strb	r2, [r3, #0]
	  break;
 800072a:	e000      	b.n	800072e <main+0x14a>
  case 30:
	  break;
  case 40:
	  break;
  default:
	  break;
 800072c:	bf00      	nop
	HAL_Delay(200);
 800072e:	e793      	b.n	8000658 <main+0x74>
 8000730:	08007070 	.word	0x08007070
 8000734:	20000228 	.word	0x20000228
 8000738:	20000274 	.word	0x20000274
 800073c:	200001dc 	.word	0x200001dc
 8000740:	20000564 	.word	0x20000564
 8000744:	200002c0 	.word	0x200002c0
 8000748:	20000571 	.word	0x20000571
 800074c:	20000572 	.word	0x20000572
 8000750:	20000573 	.word	0x20000573
 8000754:	40020400 	.word	0x40020400
 8000758:	20000558 	.word	0x20000558
 800075c:	2000008c 	.word	0x2000008c
 8000760:	2000055e 	.word	0x2000055e
 8000764:	200000d4 	.word	0x200000d4
 8000768:	20000566 	.word	0x20000566
 800076c:	20000570 	.word	0x20000570

08000770 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b094      	sub	sp, #80	; 0x50
 8000774:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000776:	f107 031c 	add.w	r3, r7, #28
 800077a:	2234      	movs	r2, #52	; 0x34
 800077c:	2100      	movs	r1, #0
 800077e:	4618      	mov	r0, r3
 8000780:	f005 fff4 	bl	800676c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000784:	f107 0308 	add.w	r3, r7, #8
 8000788:	2200      	movs	r2, #0
 800078a:	601a      	str	r2, [r3, #0]
 800078c:	605a      	str	r2, [r3, #4]
 800078e:	609a      	str	r2, [r3, #8]
 8000790:	60da      	str	r2, [r3, #12]
 8000792:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000794:	f002 fc96 	bl	80030c4 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000798:	4b2c      	ldr	r3, [pc, #176]	; (800084c <SystemClock_Config+0xdc>)
 800079a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800079c:	4a2b      	ldr	r2, [pc, #172]	; (800084c <SystemClock_Config+0xdc>)
 800079e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007a2:	6413      	str	r3, [r2, #64]	; 0x40
 80007a4:	4b29      	ldr	r3, [pc, #164]	; (800084c <SystemClock_Config+0xdc>)
 80007a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007ac:	607b      	str	r3, [r7, #4]
 80007ae:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80007b0:	4b27      	ldr	r3, [pc, #156]	; (8000850 <SystemClock_Config+0xe0>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80007b8:	4a25      	ldr	r2, [pc, #148]	; (8000850 <SystemClock_Config+0xe0>)
 80007ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007be:	6013      	str	r3, [r2, #0]
 80007c0:	4b23      	ldr	r3, [pc, #140]	; (8000850 <SystemClock_Config+0xe0>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007c8:	603b      	str	r3, [r7, #0]
 80007ca:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007cc:	2301      	movs	r3, #1
 80007ce:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80007d0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80007d4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007d6:	2302      	movs	r3, #2
 80007d8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007da:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007de:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80007e0:	2304      	movs	r3, #4
 80007e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 80007e4:	2360      	movs	r3, #96	; 0x60
 80007e6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007e8:	2302      	movs	r3, #2
 80007ea:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007ec:	2304      	movs	r3, #4
 80007ee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007f0:	2302      	movs	r3, #2
 80007f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007f4:	f107 031c 	add.w	r3, r7, #28
 80007f8:	4618      	mov	r0, r3
 80007fa:	f002 fcc3 	bl	8003184 <HAL_RCC_OscConfig>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000804:	f000 fc53 	bl	80010ae <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000808:	f002 fc6c 	bl	80030e4 <HAL_PWREx_EnableOverDrive>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000812:	f000 fc4c 	bl	80010ae <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000816:	230f      	movs	r3, #15
 8000818:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800081a:	2302      	movs	r3, #2
 800081c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800081e:	2300      	movs	r3, #0
 8000820:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000822:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000826:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000828:	2300      	movs	r3, #0
 800082a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800082c:	f107 0308 	add.w	r3, r7, #8
 8000830:	2103      	movs	r1, #3
 8000832:	4618      	mov	r0, r3
 8000834:	f002 ff54 	bl	80036e0 <HAL_RCC_ClockConfig>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800083e:	f000 fc36 	bl	80010ae <Error_Handler>
  }
}
 8000842:	bf00      	nop
 8000844:	3750      	adds	r7, #80	; 0x50
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	40023800 	.word	0x40023800
 8000850:	40007000 	.word	0x40007000

08000854 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b084      	sub	sp, #16
 8000858:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800085a:	463b      	mov	r3, r7
 800085c:	2200      	movs	r2, #0
 800085e:	601a      	str	r2, [r3, #0]
 8000860:	605a      	str	r2, [r3, #4]
 8000862:	609a      	str	r2, [r3, #8]
 8000864:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000866:	4b31      	ldr	r3, [pc, #196]	; (800092c <MX_ADC1_Init+0xd8>)
 8000868:	4a31      	ldr	r2, [pc, #196]	; (8000930 <MX_ADC1_Init+0xdc>)
 800086a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800086c:	4b2f      	ldr	r3, [pc, #188]	; (800092c <MX_ADC1_Init+0xd8>)
 800086e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000872:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000874:	4b2d      	ldr	r3, [pc, #180]	; (800092c <MX_ADC1_Init+0xd8>)
 8000876:	2200      	movs	r2, #0
 8000878:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800087a:	4b2c      	ldr	r3, [pc, #176]	; (800092c <MX_ADC1_Init+0xd8>)
 800087c:	2201      	movs	r2, #1
 800087e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000880:	4b2a      	ldr	r3, [pc, #168]	; (800092c <MX_ADC1_Init+0xd8>)
 8000882:	2200      	movs	r2, #0
 8000884:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 8000886:	4b29      	ldr	r3, [pc, #164]	; (800092c <MX_ADC1_Init+0xd8>)
 8000888:	2201      	movs	r2, #1
 800088a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.NbrOfDiscConversion = 3;
 800088e:	4b27      	ldr	r3, [pc, #156]	; (800092c <MX_ADC1_Init+0xd8>)
 8000890:	2203      	movs	r2, #3
 8000892:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000894:	4b25      	ldr	r3, [pc, #148]	; (800092c <MX_ADC1_Init+0xd8>)
 8000896:	2200      	movs	r2, #0
 8000898:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800089a:	4b24      	ldr	r3, [pc, #144]	; (800092c <MX_ADC1_Init+0xd8>)
 800089c:	4a25      	ldr	r2, [pc, #148]	; (8000934 <MX_ADC1_Init+0xe0>)
 800089e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008a0:	4b22      	ldr	r3, [pc, #136]	; (800092c <MX_ADC1_Init+0xd8>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 80008a6:	4b21      	ldr	r3, [pc, #132]	; (800092c <MX_ADC1_Init+0xd8>)
 80008a8:	2203      	movs	r2, #3
 80008aa:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80008ac:	4b1f      	ldr	r3, [pc, #124]	; (800092c <MX_ADC1_Init+0xd8>)
 80008ae:	2201      	movs	r2, #1
 80008b0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80008b4:	4b1d      	ldr	r3, [pc, #116]	; (800092c <MX_ADC1_Init+0xd8>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008ba:	481c      	ldr	r0, [pc, #112]	; (800092c <MX_ADC1_Init+0xd8>)
 80008bc:	f000 ffbe 	bl	800183c <HAL_ADC_Init>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <MX_ADC1_Init+0x76>
  {
    Error_Handler();
 80008c6:	f000 fbf2 	bl	80010ae <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80008ca:	2303      	movs	r3, #3
 80008cc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008ce:	2301      	movs	r3, #1
 80008d0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80008d2:	2300      	movs	r3, #0
 80008d4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008d6:	463b      	mov	r3, r7
 80008d8:	4619      	mov	r1, r3
 80008da:	4814      	ldr	r0, [pc, #80]	; (800092c <MX_ADC1_Init+0xd8>)
 80008dc:	f001 fa1a 	bl	8001d14 <HAL_ADC_ConfigChannel>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 80008e6:	f000 fbe2 	bl	80010ae <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80008ea:	230a      	movs	r3, #10
 80008ec:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80008ee:	2302      	movs	r3, #2
 80008f0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008f2:	463b      	mov	r3, r7
 80008f4:	4619      	mov	r1, r3
 80008f6:	480d      	ldr	r0, [pc, #52]	; (800092c <MX_ADC1_Init+0xd8>)
 80008f8:	f001 fa0c 	bl	8001d14 <HAL_ADC_ConfigChannel>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000902:	f000 fbd4 	bl	80010ae <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000906:	230d      	movs	r3, #13
 8000908:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800090a:	2303      	movs	r3, #3
 800090c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800090e:	463b      	mov	r3, r7
 8000910:	4619      	mov	r1, r3
 8000912:	4806      	ldr	r0, [pc, #24]	; (800092c <MX_ADC1_Init+0xd8>)
 8000914:	f001 f9fe 	bl	8001d14 <HAL_ADC_ConfigChannel>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <MX_ADC1_Init+0xce>
  {
    Error_Handler();
 800091e:	f000 fbc6 	bl	80010ae <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000922:	bf00      	nop
 8000924:	3710      	adds	r7, #16
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	2000008c 	.word	0x2000008c
 8000930:	40012000 	.word	0x40012000
 8000934:	0f000001 	.word	0x0f000001

08000938 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b084      	sub	sp, #16
 800093c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800093e:	463b      	mov	r3, r7
 8000940:	2200      	movs	r2, #0
 8000942:	601a      	str	r2, [r3, #0]
 8000944:	605a      	str	r2, [r3, #4]
 8000946:	609a      	str	r2, [r3, #8]
 8000948:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 800094a:	4b31      	ldr	r3, [pc, #196]	; (8000a10 <MX_ADC3_Init+0xd8>)
 800094c:	4a31      	ldr	r2, [pc, #196]	; (8000a14 <MX_ADC3_Init+0xdc>)
 800094e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000950:	4b2f      	ldr	r3, [pc, #188]	; (8000a10 <MX_ADC3_Init+0xd8>)
 8000952:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000956:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000958:	4b2d      	ldr	r3, [pc, #180]	; (8000a10 <MX_ADC3_Init+0xd8>)
 800095a:	2200      	movs	r2, #0
 800095c:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800095e:	4b2c      	ldr	r3, [pc, #176]	; (8000a10 <MX_ADC3_Init+0xd8>)
 8000960:	2201      	movs	r2, #1
 8000962:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000964:	4b2a      	ldr	r3, [pc, #168]	; (8000a10 <MX_ADC3_Init+0xd8>)
 8000966:	2200      	movs	r2, #0
 8000968:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = ENABLE;
 800096a:	4b29      	ldr	r3, [pc, #164]	; (8000a10 <MX_ADC3_Init+0xd8>)
 800096c:	2201      	movs	r2, #1
 800096e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.NbrOfDiscConversion = 3;
 8000972:	4b27      	ldr	r3, [pc, #156]	; (8000a10 <MX_ADC3_Init+0xd8>)
 8000974:	2203      	movs	r2, #3
 8000976:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000978:	4b25      	ldr	r3, [pc, #148]	; (8000a10 <MX_ADC3_Init+0xd8>)
 800097a:	2200      	movs	r2, #0
 800097c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800097e:	4b24      	ldr	r3, [pc, #144]	; (8000a10 <MX_ADC3_Init+0xd8>)
 8000980:	4a25      	ldr	r2, [pc, #148]	; (8000a18 <MX_ADC3_Init+0xe0>)
 8000982:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000984:	4b22      	ldr	r3, [pc, #136]	; (8000a10 <MX_ADC3_Init+0xd8>)
 8000986:	2200      	movs	r2, #0
 8000988:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 3;
 800098a:	4b21      	ldr	r3, [pc, #132]	; (8000a10 <MX_ADC3_Init+0xd8>)
 800098c:	2203      	movs	r2, #3
 800098e:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8000990:	4b1f      	ldr	r3, [pc, #124]	; (8000a10 <MX_ADC3_Init+0xd8>)
 8000992:	2201      	movs	r2, #1
 8000994:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000998:	4b1d      	ldr	r3, [pc, #116]	; (8000a10 <MX_ADC3_Init+0xd8>)
 800099a:	2200      	movs	r2, #0
 800099c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800099e:	481c      	ldr	r0, [pc, #112]	; (8000a10 <MX_ADC3_Init+0xd8>)
 80009a0:	f000 ff4c 	bl	800183c <HAL_ADC_Init>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <MX_ADC3_Init+0x76>
  {
    Error_Handler();
 80009aa:	f000 fb80 	bl	80010ae <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80009ae:	2306      	movs	r3, #6
 80009b0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009b2:	2301      	movs	r3, #1
 80009b4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80009b6:	2300      	movs	r3, #0
 80009b8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80009ba:	463b      	mov	r3, r7
 80009bc:	4619      	mov	r1, r3
 80009be:	4814      	ldr	r0, [pc, #80]	; (8000a10 <MX_ADC3_Init+0xd8>)
 80009c0:	f001 f9a8 	bl	8001d14 <HAL_ADC_ConfigChannel>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <MX_ADC3_Init+0x96>
  {
    Error_Handler();
 80009ca:	f000 fb70 	bl	80010ae <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80009ce:	2305      	movs	r3, #5
 80009d0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80009d2:	2302      	movs	r3, #2
 80009d4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80009d6:	463b      	mov	r3, r7
 80009d8:	4619      	mov	r1, r3
 80009da:	480d      	ldr	r0, [pc, #52]	; (8000a10 <MX_ADC3_Init+0xd8>)
 80009dc:	f001 f99a 	bl	8001d14 <HAL_ADC_ConfigChannel>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 80009e6:	f000 fb62 	bl	80010ae <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80009ea:	2307      	movs	r3, #7
 80009ec:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80009ee:	2303      	movs	r3, #3
 80009f0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80009f2:	463b      	mov	r3, r7
 80009f4:	4619      	mov	r1, r3
 80009f6:	4806      	ldr	r0, [pc, #24]	; (8000a10 <MX_ADC3_Init+0xd8>)
 80009f8:	f001 f98c 	bl	8001d14 <HAL_ADC_ConfigChannel>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <MX_ADC3_Init+0xce>
  {
    Error_Handler();
 8000a02:	f000 fb54 	bl	80010ae <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000a06:	bf00      	nop
 8000a08:	3710      	adds	r7, #16
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	200000d4 	.word	0x200000d4
 8000a14:	40012200 	.word	0x40012200
 8000a18:	0f000001 	.word	0x0f000001

08000a1c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b08c      	sub	sp, #48	; 0x30
 8000a20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000a22:	f107 030c 	add.w	r3, r7, #12
 8000a26:	2224      	movs	r2, #36	; 0x24
 8000a28:	2100      	movs	r1, #0
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f005 fe9e 	bl	800676c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a30:	463b      	mov	r3, r7
 8000a32:	2200      	movs	r2, #0
 8000a34:	601a      	str	r2, [r3, #0]
 8000a36:	605a      	str	r2, [r3, #4]
 8000a38:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a3a:	4b23      	ldr	r3, [pc, #140]	; (8000ac8 <MX_TIM1_Init+0xac>)
 8000a3c:	4a23      	ldr	r2, [pc, #140]	; (8000acc <MX_TIM1_Init+0xb0>)
 8000a3e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 3;
 8000a40:	4b21      	ldr	r3, [pc, #132]	; (8000ac8 <MX_TIM1_Init+0xac>)
 8000a42:	2203      	movs	r2, #3
 8000a44:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a46:	4b20      	ldr	r3, [pc, #128]	; (8000ac8 <MX_TIM1_Init+0xac>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 12500;
 8000a4c:	4b1e      	ldr	r3, [pc, #120]	; (8000ac8 <MX_TIM1_Init+0xac>)
 8000a4e:	f243 02d4 	movw	r2, #12500	; 0x30d4
 8000a52:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a54:	4b1c      	ldr	r3, [pc, #112]	; (8000ac8 <MX_TIM1_Init+0xac>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a5a:	4b1b      	ldr	r3, [pc, #108]	; (8000ac8 <MX_TIM1_Init+0xac>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a60:	4b19      	ldr	r3, [pc, #100]	; (8000ac8 <MX_TIM1_Init+0xac>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000a66:	2303      	movs	r3, #3
 8000a68:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000a6e:	2301      	movs	r3, #1
 8000a70:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000a72:	2300      	movs	r3, #0
 8000a74:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000a76:	2300      	movs	r3, #0
 8000a78:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000a7e:	2301      	movs	r3, #1
 8000a80:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000a82:	2300      	movs	r3, #0
 8000a84:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000a86:	2300      	movs	r3, #0
 8000a88:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8000a8a:	f107 030c 	add.w	r3, r7, #12
 8000a8e:	4619      	mov	r1, r3
 8000a90:	480d      	ldr	r0, [pc, #52]	; (8000ac8 <MX_TIM1_Init+0xac>)
 8000a92:	f003 fd43 	bl	800451c <HAL_TIM_Encoder_Init>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8000a9c:	f000 fb07 	bl	80010ae <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000aac:	463b      	mov	r3, r7
 8000aae:	4619      	mov	r1, r3
 8000ab0:	4805      	ldr	r0, [pc, #20]	; (8000ac8 <MX_TIM1_Init+0xac>)
 8000ab2:	f004 f9d9 	bl	8004e68 <HAL_TIMEx_MasterConfigSynchronization>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000abc:	f000 faf7 	bl	80010ae <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000ac0:	bf00      	nop
 8000ac2:	3730      	adds	r7, #48	; 0x30
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	200001dc 	.word	0x200001dc
 8000acc:	40010000 	.word	0x40010000

08000ad0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b088      	sub	sp, #32
 8000ad4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ad6:	f107 0310 	add.w	r3, r7, #16
 8000ada:	2200      	movs	r2, #0
 8000adc:	601a      	str	r2, [r3, #0]
 8000ade:	605a      	str	r2, [r3, #4]
 8000ae0:	609a      	str	r2, [r3, #8]
 8000ae2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ae4:	1d3b      	adds	r3, r7, #4
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	601a      	str	r2, [r3, #0]
 8000aea:	605a      	str	r2, [r3, #4]
 8000aec:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000aee:	4b1e      	ldr	r3, [pc, #120]	; (8000b68 <MX_TIM3_Init+0x98>)
 8000af0:	4a1e      	ldr	r2, [pc, #120]	; (8000b6c <MX_TIM3_Init+0x9c>)
 8000af2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9600-1;
 8000af4:	4b1c      	ldr	r3, [pc, #112]	; (8000b68 <MX_TIM3_Init+0x98>)
 8000af6:	f242 527f 	movw	r2, #9599	; 0x257f
 8000afa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000afc:	4b1a      	ldr	r3, [pc, #104]	; (8000b68 <MX_TIM3_Init+0x98>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 500;
 8000b02:	4b19      	ldr	r3, [pc, #100]	; (8000b68 <MX_TIM3_Init+0x98>)
 8000b04:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000b08:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b0a:	4b17      	ldr	r3, [pc, #92]	; (8000b68 <MX_TIM3_Init+0x98>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b10:	4b15      	ldr	r3, [pc, #84]	; (8000b68 <MX_TIM3_Init+0x98>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000b16:	4814      	ldr	r0, [pc, #80]	; (8000b68 <MX_TIM3_Init+0x98>)
 8000b18:	f003 fc30 	bl	800437c <HAL_TIM_Base_Init>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8000b22:	f000 fac4 	bl	80010ae <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b2a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000b2c:	f107 0310 	add.w	r3, r7, #16
 8000b30:	4619      	mov	r1, r3
 8000b32:	480d      	ldr	r0, [pc, #52]	; (8000b68 <MX_TIM3_Init+0x98>)
 8000b34:	f003 ff46 	bl	80049c4 <HAL_TIM_ConfigClockSource>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8000b3e:	f000 fab6 	bl	80010ae <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b42:	2300      	movs	r3, #0
 8000b44:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b46:	2300      	movs	r3, #0
 8000b48:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b4a:	1d3b      	adds	r3, r7, #4
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	4806      	ldr	r0, [pc, #24]	; (8000b68 <MX_TIM3_Init+0x98>)
 8000b50:	f004 f98a 	bl	8004e68 <HAL_TIMEx_MasterConfigSynchronization>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d001      	beq.n	8000b5e <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8000b5a:	f000 faa8 	bl	80010ae <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000b5e:	bf00      	nop
 8000b60:	3720      	adds	r7, #32
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	20000228 	.word	0x20000228
 8000b6c:	40000400 	.word	0x40000400

08000b70 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b088      	sub	sp, #32
 8000b74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b76:	f107 0310 	add.w	r3, r7, #16
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	601a      	str	r2, [r3, #0]
 8000b7e:	605a      	str	r2, [r3, #4]
 8000b80:	609a      	str	r2, [r3, #8]
 8000b82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b84:	1d3b      	adds	r3, r7, #4
 8000b86:	2200      	movs	r2, #0
 8000b88:	601a      	str	r2, [r3, #0]
 8000b8a:	605a      	str	r2, [r3, #4]
 8000b8c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000b8e:	4b1e      	ldr	r3, [pc, #120]	; (8000c08 <MX_TIM4_Init+0x98>)
 8000b90:	4a1e      	ldr	r2, [pc, #120]	; (8000c0c <MX_TIM4_Init+0x9c>)
 8000b92:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 960-1;
 8000b94:	4b1c      	ldr	r3, [pc, #112]	; (8000c08 <MX_TIM4_Init+0x98>)
 8000b96:	f240 32bf 	movw	r2, #959	; 0x3bf
 8000b9a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b9c:	4b1a      	ldr	r3, [pc, #104]	; (8000c08 <MX_TIM4_Init+0x98>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 8000ba2:	4b19      	ldr	r3, [pc, #100]	; (8000c08 <MX_TIM4_Init+0x98>)
 8000ba4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000ba8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000baa:	4b17      	ldr	r3, [pc, #92]	; (8000c08 <MX_TIM4_Init+0x98>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bb0:	4b15      	ldr	r3, [pc, #84]	; (8000c08 <MX_TIM4_Init+0x98>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000bb6:	4814      	ldr	r0, [pc, #80]	; (8000c08 <MX_TIM4_Init+0x98>)
 8000bb8:	f003 fbe0 	bl	800437c <HAL_TIM_Base_Init>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d001      	beq.n	8000bc6 <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 8000bc2:	f000 fa74 	bl	80010ae <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bc6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bca:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000bcc:	f107 0310 	add.w	r3, r7, #16
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	480d      	ldr	r0, [pc, #52]	; (8000c08 <MX_TIM4_Init+0x98>)
 8000bd4:	f003 fef6 	bl	80049c4 <HAL_TIM_ConfigClockSource>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 8000bde:	f000 fa66 	bl	80010ae <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000be2:	2300      	movs	r3, #0
 8000be4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000be6:	2300      	movs	r3, #0
 8000be8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000bea:	1d3b      	adds	r3, r7, #4
 8000bec:	4619      	mov	r1, r3
 8000bee:	4806      	ldr	r0, [pc, #24]	; (8000c08 <MX_TIM4_Init+0x98>)
 8000bf0:	f004 f93a 	bl	8004e68 <HAL_TIMEx_MasterConfigSynchronization>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d001      	beq.n	8000bfe <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 8000bfa:	f000 fa58 	bl	80010ae <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */
  //configurado a 10 ms, temporizador para Encoder
  /* USER CODE END TIM4_Init 2 */

}
 8000bfe:	bf00      	nop
 8000c00:	3720      	adds	r7, #32
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	20000274 	.word	0x20000274
 8000c0c:	40000800 	.word	0x40000800

08000c10 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c14:	4b14      	ldr	r3, [pc, #80]	; (8000c68 <MX_USART2_UART_Init+0x58>)
 8000c16:	4a15      	ldr	r2, [pc, #84]	; (8000c6c <MX_USART2_UART_Init+0x5c>)
 8000c18:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 8000c1a:	4b13      	ldr	r3, [pc, #76]	; (8000c68 <MX_USART2_UART_Init+0x58>)
 8000c1c:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8000c20:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c22:	4b11      	ldr	r3, [pc, #68]	; (8000c68 <MX_USART2_UART_Init+0x58>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c28:	4b0f      	ldr	r3, [pc, #60]	; (8000c68 <MX_USART2_UART_Init+0x58>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c2e:	4b0e      	ldr	r3, [pc, #56]	; (8000c68 <MX_USART2_UART_Init+0x58>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c34:	4b0c      	ldr	r3, [pc, #48]	; (8000c68 <MX_USART2_UART_Init+0x58>)
 8000c36:	220c      	movs	r2, #12
 8000c38:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c3a:	4b0b      	ldr	r3, [pc, #44]	; (8000c68 <MX_USART2_UART_Init+0x58>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c40:	4b09      	ldr	r3, [pc, #36]	; (8000c68 <MX_USART2_UART_Init+0x58>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c46:	4b08      	ldr	r3, [pc, #32]	; (8000c68 <MX_USART2_UART_Init+0x58>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c4c:	4b06      	ldr	r3, [pc, #24]	; (8000c68 <MX_USART2_UART_Init+0x58>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c52:	4805      	ldr	r0, [pc, #20]	; (8000c68 <MX_USART2_UART_Init+0x58>)
 8000c54:	f004 f9b4 	bl	8004fc0 <HAL_UART_Init>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d001      	beq.n	8000c62 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000c5e:	f000 fa26 	bl	80010ae <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c62:	bf00      	nop
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	200002c0 	.word	0x200002c0
 8000c6c:	40004400 	.word	0x40004400

08000c70 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c74:	4b14      	ldr	r3, [pc, #80]	; (8000cc8 <MX_USART3_UART_Init+0x58>)
 8000c76:	4a15      	ldr	r2, [pc, #84]	; (8000ccc <MX_USART3_UART_Init+0x5c>)
 8000c78:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 230400;
 8000c7a:	4b13      	ldr	r3, [pc, #76]	; (8000cc8 <MX_USART3_UART_Init+0x58>)
 8000c7c:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8000c80:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c82:	4b11      	ldr	r3, [pc, #68]	; (8000cc8 <MX_USART3_UART_Init+0x58>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c88:	4b0f      	ldr	r3, [pc, #60]	; (8000cc8 <MX_USART3_UART_Init+0x58>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c8e:	4b0e      	ldr	r3, [pc, #56]	; (8000cc8 <MX_USART3_UART_Init+0x58>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c94:	4b0c      	ldr	r3, [pc, #48]	; (8000cc8 <MX_USART3_UART_Init+0x58>)
 8000c96:	220c      	movs	r2, #12
 8000c98:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c9a:	4b0b      	ldr	r3, [pc, #44]	; (8000cc8 <MX_USART3_UART_Init+0x58>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ca0:	4b09      	ldr	r3, [pc, #36]	; (8000cc8 <MX_USART3_UART_Init+0x58>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ca6:	4b08      	ldr	r3, [pc, #32]	; (8000cc8 <MX_USART3_UART_Init+0x58>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cac:	4b06      	ldr	r3, [pc, #24]	; (8000cc8 <MX_USART3_UART_Init+0x58>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000cb2:	4805      	ldr	r0, [pc, #20]	; (8000cc8 <MX_USART3_UART_Init+0x58>)
 8000cb4:	f004 f984 	bl	8004fc0 <HAL_UART_Init>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000cbe:	f000 f9f6 	bl	80010ae <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000cc2:	bf00      	nop
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	20000344 	.word	0x20000344
 8000ccc:	40004800 	.word	0x40004800

08000cd0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000cd6:	4b10      	ldr	r3, [pc, #64]	; (8000d18 <MX_DMA_Init+0x48>)
 8000cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cda:	4a0f      	ldr	r2, [pc, #60]	; (8000d18 <MX_DMA_Init+0x48>)
 8000cdc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000ce0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ce2:	4b0d      	ldr	r3, [pc, #52]	; (8000d18 <MX_DMA_Init+0x48>)
 8000ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000cea:	607b      	str	r3, [r7, #4]
 8000cec:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000cee:	2200      	movs	r2, #0
 8000cf0:	2100      	movs	r1, #0
 8000cf2:	2038      	movs	r0, #56	; 0x38
 8000cf4:	f001 fbc5 	bl	8002482 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000cf8:	2038      	movs	r0, #56	; 0x38
 8000cfa:	f001 fbde 	bl	80024ba <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 8000cfe:	2200      	movs	r2, #0
 8000d00:	2100      	movs	r1, #0
 8000d02:	203c      	movs	r0, #60	; 0x3c
 8000d04:	f001 fbbd 	bl	8002482 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8000d08:	203c      	movs	r0, #60	; 0x3c
 8000d0a:	f001 fbd6 	bl	80024ba <HAL_NVIC_EnableIRQ>

}
 8000d0e:	bf00      	nop
 8000d10:	3708      	adds	r7, #8
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	40023800 	.word	0x40023800

08000d1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b08c      	sub	sp, #48	; 0x30
 8000d20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d22:	f107 031c 	add.w	r3, r7, #28
 8000d26:	2200      	movs	r2, #0
 8000d28:	601a      	str	r2, [r3, #0]
 8000d2a:	605a      	str	r2, [r3, #4]
 8000d2c:	609a      	str	r2, [r3, #8]
 8000d2e:	60da      	str	r2, [r3, #12]
 8000d30:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d32:	4b3d      	ldr	r3, [pc, #244]	; (8000e28 <MX_GPIO_Init+0x10c>)
 8000d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d36:	4a3c      	ldr	r2, [pc, #240]	; (8000e28 <MX_GPIO_Init+0x10c>)
 8000d38:	f043 0304 	orr.w	r3, r3, #4
 8000d3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d3e:	4b3a      	ldr	r3, [pc, #232]	; (8000e28 <MX_GPIO_Init+0x10c>)
 8000d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d42:	f003 0304 	and.w	r3, r3, #4
 8000d46:	61bb      	str	r3, [r7, #24]
 8000d48:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d4a:	4b37      	ldr	r3, [pc, #220]	; (8000e28 <MX_GPIO_Init+0x10c>)
 8000d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4e:	4a36      	ldr	r2, [pc, #216]	; (8000e28 <MX_GPIO_Init+0x10c>)
 8000d50:	f043 0320 	orr.w	r3, r3, #32
 8000d54:	6313      	str	r3, [r2, #48]	; 0x30
 8000d56:	4b34      	ldr	r3, [pc, #208]	; (8000e28 <MX_GPIO_Init+0x10c>)
 8000d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5a:	f003 0320 	and.w	r3, r3, #32
 8000d5e:	617b      	str	r3, [r7, #20]
 8000d60:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d62:	4b31      	ldr	r3, [pc, #196]	; (8000e28 <MX_GPIO_Init+0x10c>)
 8000d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d66:	4a30      	ldr	r2, [pc, #192]	; (8000e28 <MX_GPIO_Init+0x10c>)
 8000d68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d6e:	4b2e      	ldr	r3, [pc, #184]	; (8000e28 <MX_GPIO_Init+0x10c>)
 8000d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d76:	613b      	str	r3, [r7, #16]
 8000d78:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d7a:	4b2b      	ldr	r3, [pc, #172]	; (8000e28 <MX_GPIO_Init+0x10c>)
 8000d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7e:	4a2a      	ldr	r2, [pc, #168]	; (8000e28 <MX_GPIO_Init+0x10c>)
 8000d80:	f043 0301 	orr.w	r3, r3, #1
 8000d84:	6313      	str	r3, [r2, #48]	; 0x30
 8000d86:	4b28      	ldr	r3, [pc, #160]	; (8000e28 <MX_GPIO_Init+0x10c>)
 8000d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8a:	f003 0301 	and.w	r3, r3, #1
 8000d8e:	60fb      	str	r3, [r7, #12]
 8000d90:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d92:	4b25      	ldr	r3, [pc, #148]	; (8000e28 <MX_GPIO_Init+0x10c>)
 8000d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d96:	4a24      	ldr	r2, [pc, #144]	; (8000e28 <MX_GPIO_Init+0x10c>)
 8000d98:	f043 0302 	orr.w	r3, r3, #2
 8000d9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d9e:	4b22      	ldr	r3, [pc, #136]	; (8000e28 <MX_GPIO_Init+0x10c>)
 8000da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da2:	f003 0302 	and.w	r3, r3, #2
 8000da6:	60bb      	str	r3, [r7, #8]
 8000da8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000daa:	4b1f      	ldr	r3, [pc, #124]	; (8000e28 <MX_GPIO_Init+0x10c>)
 8000dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dae:	4a1e      	ldr	r2, [pc, #120]	; (8000e28 <MX_GPIO_Init+0x10c>)
 8000db0:	f043 0310 	orr.w	r3, r3, #16
 8000db4:	6313      	str	r3, [r2, #48]	; 0x30
 8000db6:	4b1c      	ldr	r3, [pc, #112]	; (8000e28 <MX_GPIO_Init+0x10c>)
 8000db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dba:	f003 0310 	and.w	r3, r3, #16
 8000dbe:	607b      	str	r3, [r7, #4]
 8000dc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dc2:	4b19      	ldr	r3, [pc, #100]	; (8000e28 <MX_GPIO_Init+0x10c>)
 8000dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc6:	4a18      	ldr	r2, [pc, #96]	; (8000e28 <MX_GPIO_Init+0x10c>)
 8000dc8:	f043 0308 	orr.w	r3, r3, #8
 8000dcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dce:	4b16      	ldr	r3, [pc, #88]	; (8000e28 <MX_GPIO_Init+0x10c>)
 8000dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd2:	f003 0308 	and.w	r3, r3, #8
 8000dd6:	603b      	str	r3, [r7, #0]
 8000dd8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000dda:	2200      	movs	r2, #0
 8000ddc:	f244 0181 	movw	r1, #16513	; 0x4081
 8000de0:	4812      	ldr	r0, [pc, #72]	; (8000e2c <MX_GPIO_Init+0x110>)
 8000de2:	f002 f93b 	bl	800305c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000de6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000dea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000dec:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000df0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df2:	2300      	movs	r3, #0
 8000df4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000df6:	f107 031c 	add.w	r3, r7, #28
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	480c      	ldr	r0, [pc, #48]	; (8000e30 <MX_GPIO_Init+0x114>)
 8000dfe:	f001 ff81 	bl	8002d04 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000e02:	f244 0381 	movw	r3, #16513	; 0x4081
 8000e06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e08:	2301      	movs	r3, #1
 8000e0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e10:	2300      	movs	r3, #0
 8000e12:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e14:	f107 031c 	add.w	r3, r7, #28
 8000e18:	4619      	mov	r1, r3
 8000e1a:	4804      	ldr	r0, [pc, #16]	; (8000e2c <MX_GPIO_Init+0x110>)
 8000e1c:	f001 ff72 	bl	8002d04 <HAL_GPIO_Init>

}
 8000e20:	bf00      	nop
 8000e22:	3730      	adds	r7, #48	; 0x30
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	40023800 	.word	0x40023800
 8000e2c:	40020400 	.word	0x40020400
 8000e30:	40020800 	.word	0x40020800

08000e34 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b08c      	sub	sp, #48	; 0x30
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
	static uint16_t res;
	char valor[40];
	if (htim->Instance == TIM3)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4a19      	ldr	r2, [pc, #100]	; (8000ea8 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d103      	bne.n	8000e4e <HAL_TIM_PeriodElapsedCallback+0x1a>
		{
		asm("NOP");
 8000e46:	bf00      	nop
		asm("NOP");
 8000e48:	bf00      	nop
		asm("NOP");
 8000e4a:	bf00      	nop
		asm("NOP");
 8000e4c:	bf00      	nop
	    }

	if (htim->Instance == TIM4)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	4a16      	ldr	r2, [pc, #88]	; (8000eac <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000e54:	4293      	cmp	r3, r2
 8000e56:	d122      	bne.n	8000e9e <HAL_TIM_PeriodElapsedCallback+0x6a>
		{
		//HAL_GPIO_TogglePin(GPIOB, LD3_Pin);
		*(ENCODER_) = TIM1->CNT;					//Colocar *(enc_++) para leer e incrementar puntero
 8000e58:	4b15      	ldr	r3, [pc, #84]	; (8000eb0 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000e5a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e5c:	4b15      	ldr	r3, [pc, #84]	; (8000eb4 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	b292      	uxth	r2, r2
 8000e62:	801a      	strh	r2, [r3, #0]

		res = sprintf(valor, "%hu\t%hu  \r\n", *ENCODER_, ENCODER_);
 8000e64:	4b13      	ldr	r3, [pc, #76]	; (8000eb4 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	881b      	ldrh	r3, [r3, #0]
 8000e6a:	b29b      	uxth	r3, r3
 8000e6c:	461a      	mov	r2, r3
 8000e6e:	4b11      	ldr	r3, [pc, #68]	; (8000eb4 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	f107 0008 	add.w	r0, r7, #8
 8000e76:	4910      	ldr	r1, [pc, #64]	; (8000eb8 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000e78:	f005 fc80 	bl	800677c <siprintf>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	b29a      	uxth	r2, r3
 8000e80:	4b0e      	ldr	r3, [pc, #56]	; (8000ebc <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000e82:	801a      	strh	r2, [r3, #0]
		ENCODER_++;
 8000e84:	4b0b      	ldr	r3, [pc, #44]	; (8000eb4 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	3302      	adds	r3, #2
 8000e8a:	4a0a      	ldr	r2, [pc, #40]	; (8000eb4 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000e8c:	6013      	str	r3, [r2, #0]
		//HAL_UART_Transmit_IT(&huart3, (uint8_t*)valor, res);
		if (ENCODER_ == &ENCODER[40]){
 8000e8e:	4b09      	ldr	r3, [pc, #36]	; (8000eb4 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	4a0b      	ldr	r2, [pc, #44]	; (8000ec0 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000e94:	4293      	cmp	r3, r2
 8000e96:	d102      	bne.n	8000e9e <HAL_TIM_PeriodElapsedCallback+0x6a>
			ENCODER_ = &ENCODER[0];
 8000e98:	4b06      	ldr	r3, [pc, #24]	; (8000eb4 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000e9a:	4a0a      	ldr	r2, [pc, #40]	; (8000ec4 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000e9c:	601a      	str	r2, [r3, #0]
		}
		}
}
 8000e9e:	bf00      	nop
 8000ea0:	3730      	adds	r7, #48	; 0x30
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	40000400 	.word	0x40000400
 8000eac:	40000800 	.word	0x40000800
 8000eb0:	40010000 	.word	0x40010000
 8000eb4:	2000056c 	.word	0x2000056c
 8000eb8:	0800708c 	.word	0x0800708c
 8000ebc:	20000574 	.word	0x20000574
 8000ec0:	20000558 	.word	0x20000558
 8000ec4:	20000508 	.word	0x20000508

08000ec8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
 /* Prevent unused argument(s) compilation warning */
	if (huart->Instance == USART2)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4a1f      	ldr	r2, [pc, #124]	; (8000f54 <HAL_UART_RxCpltCallback+0x8c>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d137      	bne.n	8000f4a <HAL_UART_RxCpltCallback+0x82>
	{
		if (TGPS[0] == '$'){
 8000eda:	4b1f      	ldr	r3, [pc, #124]	; (8000f58 <HAL_UART_RxCpltCallback+0x90>)
 8000edc:	781b      	ldrb	r3, [r3, #0]
 8000ede:	2b24      	cmp	r3, #36	; 0x24
 8000ee0:	d119      	bne.n	8000f16 <HAL_UART_RxCpltCallback+0x4e>
			flg = !flg;
 8000ee2:	4b1e      	ldr	r3, [pc, #120]	; (8000f5c <HAL_UART_RxCpltCallback+0x94>)
 8000ee4:	781b      	ldrb	r3, [r3, #0]
 8000ee6:	b2db      	uxtb	r3, r3
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	bf0c      	ite	eq
 8000eec:	2301      	moveq	r3, #1
 8000eee:	2300      	movne	r3, #0
 8000ef0:	b2db      	uxtb	r3, r3
 8000ef2:	461a      	mov	r2, r3
 8000ef4:	4b19      	ldr	r3, [pc, #100]	; (8000f5c <HAL_UART_RxCpltCallback+0x94>)
 8000ef6:	701a      	strb	r2, [r3, #0]
			cnt1=0;
 8000ef8:	4b19      	ldr	r3, [pc, #100]	; (8000f60 <HAL_UART_RxCpltCallback+0x98>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	701a      	strb	r2, [r3, #0]
			if (flg == 1){
 8000efe:	4b17      	ldr	r3, [pc, #92]	; (8000f5c <HAL_UART_RxCpltCallback+0x94>)
 8000f00:	781b      	ldrb	r3, [r3, #0]
 8000f02:	b2db      	uxtb	r3, r3
 8000f04:	2b01      	cmp	r3, #1
 8000f06:	d103      	bne.n	8000f10 <HAL_UART_RxCpltCallback+0x48>
				GPS_ = &GPRMC[0];}
 8000f08:	4b16      	ldr	r3, [pc, #88]	; (8000f64 <HAL_UART_RxCpltCallback+0x9c>)
 8000f0a:	4a17      	ldr	r2, [pc, #92]	; (8000f68 <HAL_UART_RxCpltCallback+0xa0>)
 8000f0c:	601a      	str	r2, [r3, #0]
 8000f0e:	e002      	b.n	8000f16 <HAL_UART_RxCpltCallback+0x4e>
			else {
				GPS_ = &GPGGA[0];}
 8000f10:	4b14      	ldr	r3, [pc, #80]	; (8000f64 <HAL_UART_RxCpltCallback+0x9c>)
 8000f12:	4a16      	ldr	r2, [pc, #88]	; (8000f6c <HAL_UART_RxCpltCallback+0xa4>)
 8000f14:	601a      	str	r2, [r3, #0]
		}

		*(GPS_++) = TGPS[0];
 8000f16:	4b13      	ldr	r3, [pc, #76]	; (8000f64 <HAL_UART_RxCpltCallback+0x9c>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	1c5a      	adds	r2, r3, #1
 8000f1c:	4911      	ldr	r1, [pc, #68]	; (8000f64 <HAL_UART_RxCpltCallback+0x9c>)
 8000f1e:	600a      	str	r2, [r1, #0]
 8000f20:	4a0d      	ldr	r2, [pc, #52]	; (8000f58 <HAL_UART_RxCpltCallback+0x90>)
 8000f22:	7812      	ldrb	r2, [r2, #0]
 8000f24:	701a      	strb	r2, [r3, #0]
		cnt1++;
 8000f26:	4b0e      	ldr	r3, [pc, #56]	; (8000f60 <HAL_UART_RxCpltCallback+0x98>)
 8000f28:	781b      	ldrb	r3, [r3, #0]
 8000f2a:	3301      	adds	r3, #1
 8000f2c:	b2da      	uxtb	r2, r3
 8000f2e:	4b0c      	ldr	r3, [pc, #48]	; (8000f60 <HAL_UART_RxCpltCallback+0x98>)
 8000f30:	701a      	strb	r2, [r3, #0]

		if (TGPS[0] == '\n'){
 8000f32:	4b09      	ldr	r3, [pc, #36]	; (8000f58 <HAL_UART_RxCpltCallback+0x90>)
 8000f34:	781b      	ldrb	r3, [r3, #0]
 8000f36:	2b0a      	cmp	r3, #10
 8000f38:	d102      	bne.n	8000f40 <HAL_UART_RxCpltCallback+0x78>
			state_int = 10;
 8000f3a:	4b0d      	ldr	r3, [pc, #52]	; (8000f70 <HAL_UART_RxCpltCallback+0xa8>)
 8000f3c:	220a      	movs	r2, #10
 8000f3e:	701a      	strb	r2, [r3, #0]
			}

		HAL_UART_Receive_IT(&huart2, (uint8_t*)TGPS, 1);
 8000f40:	2201      	movs	r2, #1
 8000f42:	4905      	ldr	r1, [pc, #20]	; (8000f58 <HAL_UART_RxCpltCallback+0x90>)
 8000f44:	480b      	ldr	r0, [pc, #44]	; (8000f74 <HAL_UART_RxCpltCallback+0xac>)
 8000f46:	f004 f8f7 	bl	8005138 <HAL_UART_Receive_IT>
	}

}
 8000f4a:	bf00      	nop
 8000f4c:	3708      	adds	r7, #8
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	40004400 	.word	0x40004400
 8000f58:	20000564 	.word	0x20000564
 8000f5c:	20000570 	.word	0x20000570
 8000f60:	20000567 	.word	0x20000567
 8000f64:	20000568 	.word	0x20000568
 8000f68:	200003c8 	.word	0x200003c8
 8000f6c:	20000468 	.word	0x20000468
 8000f70:	20000566 	.word	0x20000566
 8000f74:	200002c0 	.word	0x200002c0

08000f78 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000f78:	b5b0      	push	{r4, r5, r7, lr}
 8000f7a:	b09a      	sub	sp, #104	; 0x68
 8000f7c:	af04      	add	r7, sp, #16
 8000f7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
volatile uint8_t num;
char parte[60];
uint16_t datas[2];
uint32_t potencia[2];
  if (hadc->Instance == ADC1)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4a35      	ldr	r2, [pc, #212]	; (800105c <HAL_ADC_ConvCpltCallback+0xe4>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d11e      	bne.n	8000fc8 <HAL_ADC_ConvCpltCallback+0x50>
  {
	  potencia[0] = (DMA_ADC[0]*DMA_ADC[0] + DMA_ADC[1]*DMA_ADC[1] + DMA_ADC[2]*DMA_ADC[2]);
 8000f8a:	4b35      	ldr	r3, [pc, #212]	; (8001060 <HAL_ADC_ConvCpltCallback+0xe8>)
 8000f8c:	881b      	ldrh	r3, [r3, #0]
 8000f8e:	461a      	mov	r2, r3
 8000f90:	4b33      	ldr	r3, [pc, #204]	; (8001060 <HAL_ADC_ConvCpltCallback+0xe8>)
 8000f92:	881b      	ldrh	r3, [r3, #0]
 8000f94:	fb03 f202 	mul.w	r2, r3, r2
 8000f98:	4b31      	ldr	r3, [pc, #196]	; (8001060 <HAL_ADC_ConvCpltCallback+0xe8>)
 8000f9a:	885b      	ldrh	r3, [r3, #2]
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	4b30      	ldr	r3, [pc, #192]	; (8001060 <HAL_ADC_ConvCpltCallback+0xe8>)
 8000fa0:	885b      	ldrh	r3, [r3, #2]
 8000fa2:	fb01 f303 	mul.w	r3, r1, r3
 8000fa6:	441a      	add	r2, r3
 8000fa8:	4b2d      	ldr	r3, [pc, #180]	; (8001060 <HAL_ADC_ConvCpltCallback+0xe8>)
 8000faa:	889b      	ldrh	r3, [r3, #4]
 8000fac:	4619      	mov	r1, r3
 8000fae:	4b2c      	ldr	r3, [pc, #176]	; (8001060 <HAL_ADC_ConvCpltCallback+0xe8>)
 8000fb0:	889b      	ldrh	r3, [r3, #4]
 8000fb2:	fb01 f303 	mul.w	r3, r1, r3
 8000fb6:	4413      	add	r3, r2
 8000fb8:	60fb      	str	r3, [r7, #12]
	  datas[0] = raiz(potencia[0]);
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f000 f857 	bl	8001070 <raiz>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	82bb      	strh	r3, [r7, #20]


  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8000fc6:	e044      	b.n	8001052 <HAL_ADC_ConvCpltCallback+0xda>
  } else if (hadc->Instance == ADC3)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a25      	ldr	r2, [pc, #148]	; (8001064 <HAL_ADC_ConvCpltCallback+0xec>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d13f      	bne.n	8001052 <HAL_ADC_ConvCpltCallback+0xda>
	  potencia[1] = (DMA_ADC[3]*DMA_ADC[3] + DMA_ADC[4]*DMA_ADC[4] + DMA_ADC[5]*DMA_ADC[5]);
 8000fd2:	4b23      	ldr	r3, [pc, #140]	; (8001060 <HAL_ADC_ConvCpltCallback+0xe8>)
 8000fd4:	88db      	ldrh	r3, [r3, #6]
 8000fd6:	461a      	mov	r2, r3
 8000fd8:	4b21      	ldr	r3, [pc, #132]	; (8001060 <HAL_ADC_ConvCpltCallback+0xe8>)
 8000fda:	88db      	ldrh	r3, [r3, #6]
 8000fdc:	fb03 f202 	mul.w	r2, r3, r2
 8000fe0:	4b1f      	ldr	r3, [pc, #124]	; (8001060 <HAL_ADC_ConvCpltCallback+0xe8>)
 8000fe2:	891b      	ldrh	r3, [r3, #8]
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	4b1e      	ldr	r3, [pc, #120]	; (8001060 <HAL_ADC_ConvCpltCallback+0xe8>)
 8000fe8:	891b      	ldrh	r3, [r3, #8]
 8000fea:	fb01 f303 	mul.w	r3, r1, r3
 8000fee:	441a      	add	r2, r3
 8000ff0:	4b1b      	ldr	r3, [pc, #108]	; (8001060 <HAL_ADC_ConvCpltCallback+0xe8>)
 8000ff2:	895b      	ldrh	r3, [r3, #10]
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	4b1a      	ldr	r3, [pc, #104]	; (8001060 <HAL_ADC_ConvCpltCallback+0xe8>)
 8000ff8:	895b      	ldrh	r3, [r3, #10]
 8000ffa:	fb01 f303 	mul.w	r3, r1, r3
 8000ffe:	4413      	add	r3, r2
 8001000:	613b      	str	r3, [r7, #16]
	  datas[1] = raiz(potencia[1]);
 8001002:	693b      	ldr	r3, [r7, #16]
 8001004:	4618      	mov	r0, r3
 8001006:	f000 f833 	bl	8001070 <raiz>
 800100a:	4603      	mov	r3, r0
 800100c:	82fb      	strh	r3, [r7, #22]
	  num = sprintf(parte, "A0:%hu A1:%hu A2:%hu r1=%u r3:%u p:%u\r\n", DMA_ADC[0], DMA_ADC[1], DMA_ADC[2], datas[0], datas[1]);
 800100e:	4b14      	ldr	r3, [pc, #80]	; (8001060 <HAL_ADC_ConvCpltCallback+0xe8>)
 8001010:	881b      	ldrh	r3, [r3, #0]
 8001012:	461c      	mov	r4, r3
 8001014:	4b12      	ldr	r3, [pc, #72]	; (8001060 <HAL_ADC_ConvCpltCallback+0xe8>)
 8001016:	885b      	ldrh	r3, [r3, #2]
 8001018:	461d      	mov	r5, r3
 800101a:	4b11      	ldr	r3, [pc, #68]	; (8001060 <HAL_ADC_ConvCpltCallback+0xe8>)
 800101c:	889b      	ldrh	r3, [r3, #4]
 800101e:	8aba      	ldrh	r2, [r7, #20]
 8001020:	8af9      	ldrh	r1, [r7, #22]
 8001022:	f107 0018 	add.w	r0, r7, #24
 8001026:	9102      	str	r1, [sp, #8]
 8001028:	9201      	str	r2, [sp, #4]
 800102a:	9300      	str	r3, [sp, #0]
 800102c:	462b      	mov	r3, r5
 800102e:	4622      	mov	r2, r4
 8001030:	490d      	ldr	r1, [pc, #52]	; (8001068 <HAL_ADC_ConvCpltCallback+0xf0>)
 8001032:	f005 fba3 	bl	800677c <siprintf>
 8001036:	4603      	mov	r3, r0
 8001038:	b2db      	uxtb	r3, r3
 800103a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	  HAL_UART_Transmit_IT(&huart3, (uint8_t*)parte, num);
 800103e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001042:	b2db      	uxtb	r3, r3
 8001044:	b29a      	uxth	r2, r3
 8001046:	f107 0318 	add.w	r3, r7, #24
 800104a:	4619      	mov	r1, r3
 800104c:	4807      	ldr	r0, [pc, #28]	; (800106c <HAL_ADC_ConvCpltCallback+0xf4>)
 800104e:	f004 f805 	bl	800505c <HAL_UART_Transmit_IT>
}
 8001052:	bf00      	nop
 8001054:	3758      	adds	r7, #88	; 0x58
 8001056:	46bd      	mov	sp, r7
 8001058:	bdb0      	pop	{r4, r5, r7, pc}
 800105a:	bf00      	nop
 800105c:	40012000 	.word	0x40012000
 8001060:	20000558 	.word	0x20000558
 8001064:	40012200 	.word	0x40012200
 8001068:	08007098 	.word	0x08007098
 800106c:	20000344 	.word	0x20000344

08001070 <raiz>:


uint16_t raiz(uint32_t vector)
{
 8001070:	b480      	push	{r7}
 8001072:	b085      	sub	sp, #20
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
	uint32_t r, t;
	r = vector;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	60fb      	str	r3, [r7, #12]
	t = 0;
 800107c:	2300      	movs	r3, #0
 800107e:	60bb      	str	r3, [r7, #8]
	while (t != r)
 8001080:	e009      	b.n	8001096 <raiz+0x26>
	{
		t = r;
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	60bb      	str	r3, [r7, #8]
		r = (vector/r + r)/2;
 8001086:	687a      	ldr	r2, [r7, #4]
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	fbb2 f2f3 	udiv	r2, r2, r3
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	4413      	add	r3, r2
 8001092:	085b      	lsrs	r3, r3, #1
 8001094:	60fb      	str	r3, [r7, #12]
	while (t != r)
 8001096:	68ba      	ldr	r2, [r7, #8]
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	429a      	cmp	r2, r3
 800109c:	d1f1      	bne.n	8001082 <raiz+0x12>
	}
	return r;
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	b29b      	uxth	r3, r3
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	3714      	adds	r7, #20
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr

080010ae <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010ae:	b480      	push	{r7}
 80010b0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010b2:	b672      	cpsid	i
}
 80010b4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010b6:	e7fe      	b.n	80010b6 <Error_Handler+0x8>

080010b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b083      	sub	sp, #12
 80010bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80010be:	4b0f      	ldr	r3, [pc, #60]	; (80010fc <HAL_MspInit+0x44>)
 80010c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c2:	4a0e      	ldr	r2, [pc, #56]	; (80010fc <HAL_MspInit+0x44>)
 80010c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010c8:	6413      	str	r3, [r2, #64]	; 0x40
 80010ca:	4b0c      	ldr	r3, [pc, #48]	; (80010fc <HAL_MspInit+0x44>)
 80010cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010d2:	607b      	str	r3, [r7, #4]
 80010d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010d6:	4b09      	ldr	r3, [pc, #36]	; (80010fc <HAL_MspInit+0x44>)
 80010d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010da:	4a08      	ldr	r2, [pc, #32]	; (80010fc <HAL_MspInit+0x44>)
 80010dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010e0:	6453      	str	r3, [r2, #68]	; 0x44
 80010e2:	4b06      	ldr	r3, [pc, #24]	; (80010fc <HAL_MspInit+0x44>)
 80010e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010ea:	603b      	str	r3, [r7, #0]
 80010ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010ee:	bf00      	nop
 80010f0:	370c      	adds	r7, #12
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop
 80010fc:	40023800 	.word	0x40023800

08001100 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b08c      	sub	sp, #48	; 0x30
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001108:	f107 031c 	add.w	r3, r7, #28
 800110c:	2200      	movs	r2, #0
 800110e:	601a      	str	r2, [r3, #0]
 8001110:	605a      	str	r2, [r3, #4]
 8001112:	609a      	str	r2, [r3, #8]
 8001114:	60da      	str	r2, [r3, #12]
 8001116:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a6e      	ldr	r2, [pc, #440]	; (80012d8 <HAL_ADC_MspInit+0x1d8>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d174      	bne.n	800120c <HAL_ADC_MspInit+0x10c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001122:	4b6e      	ldr	r3, [pc, #440]	; (80012dc <HAL_ADC_MspInit+0x1dc>)
 8001124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001126:	4a6d      	ldr	r2, [pc, #436]	; (80012dc <HAL_ADC_MspInit+0x1dc>)
 8001128:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800112c:	6453      	str	r3, [r2, #68]	; 0x44
 800112e:	4b6b      	ldr	r3, [pc, #428]	; (80012dc <HAL_ADC_MspInit+0x1dc>)
 8001130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001132:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001136:	61bb      	str	r3, [r7, #24]
 8001138:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800113a:	4b68      	ldr	r3, [pc, #416]	; (80012dc <HAL_ADC_MspInit+0x1dc>)
 800113c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113e:	4a67      	ldr	r2, [pc, #412]	; (80012dc <HAL_ADC_MspInit+0x1dc>)
 8001140:	f043 0304 	orr.w	r3, r3, #4
 8001144:	6313      	str	r3, [r2, #48]	; 0x30
 8001146:	4b65      	ldr	r3, [pc, #404]	; (80012dc <HAL_ADC_MspInit+0x1dc>)
 8001148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114a:	f003 0304 	and.w	r3, r3, #4
 800114e:	617b      	str	r3, [r7, #20]
 8001150:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001152:	4b62      	ldr	r3, [pc, #392]	; (80012dc <HAL_ADC_MspInit+0x1dc>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001156:	4a61      	ldr	r2, [pc, #388]	; (80012dc <HAL_ADC_MspInit+0x1dc>)
 8001158:	f043 0301 	orr.w	r3, r3, #1
 800115c:	6313      	str	r3, [r2, #48]	; 0x30
 800115e:	4b5f      	ldr	r3, [pc, #380]	; (80012dc <HAL_ADC_MspInit+0x1dc>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001162:	f003 0301 	and.w	r3, r3, #1
 8001166:	613b      	str	r3, [r7, #16]
 8001168:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC3     ------> ADC1_IN13
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 800116a:	2309      	movs	r3, #9
 800116c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800116e:	2303      	movs	r3, #3
 8001170:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001172:	2300      	movs	r3, #0
 8001174:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001176:	f107 031c 	add.w	r3, r7, #28
 800117a:	4619      	mov	r1, r3
 800117c:	4858      	ldr	r0, [pc, #352]	; (80012e0 <HAL_ADC_MspInit+0x1e0>)
 800117e:	f001 fdc1 	bl	8002d04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001182:	2308      	movs	r3, #8
 8001184:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001186:	2303      	movs	r3, #3
 8001188:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118a:	2300      	movs	r3, #0
 800118c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800118e:	f107 031c 	add.w	r3, r7, #28
 8001192:	4619      	mov	r1, r3
 8001194:	4853      	ldr	r0, [pc, #332]	; (80012e4 <HAL_ADC_MspInit+0x1e4>)
 8001196:	f001 fdb5 	bl	8002d04 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 800119a:	4b53      	ldr	r3, [pc, #332]	; (80012e8 <HAL_ADC_MspInit+0x1e8>)
 800119c:	4a53      	ldr	r2, [pc, #332]	; (80012ec <HAL_ADC_MspInit+0x1ec>)
 800119e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80011a0:	4b51      	ldr	r3, [pc, #324]	; (80012e8 <HAL_ADC_MspInit+0x1e8>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011a6:	4b50      	ldr	r3, [pc, #320]	; (80012e8 <HAL_ADC_MspInit+0x1e8>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80011ac:	4b4e      	ldr	r3, [pc, #312]	; (80012e8 <HAL_ADC_MspInit+0x1e8>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80011b2:	4b4d      	ldr	r3, [pc, #308]	; (80012e8 <HAL_ADC_MspInit+0x1e8>)
 80011b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011b8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80011ba:	4b4b      	ldr	r3, [pc, #300]	; (80012e8 <HAL_ADC_MspInit+0x1e8>)
 80011bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80011c0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80011c2:	4b49      	ldr	r3, [pc, #292]	; (80012e8 <HAL_ADC_MspInit+0x1e8>)
 80011c4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80011c8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80011ca:	4b47      	ldr	r3, [pc, #284]	; (80012e8 <HAL_ADC_MspInit+0x1e8>)
 80011cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011d0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80011d2:	4b45      	ldr	r3, [pc, #276]	; (80012e8 <HAL_ADC_MspInit+0x1e8>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80011d8:	4b43      	ldr	r3, [pc, #268]	; (80012e8 <HAL_ADC_MspInit+0x1e8>)
 80011da:	2200      	movs	r2, #0
 80011dc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80011de:	4842      	ldr	r0, [pc, #264]	; (80012e8 <HAL_ADC_MspInit+0x1e8>)
 80011e0:	f001 f986 	bl	80024f0 <HAL_DMA_Init>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <HAL_ADC_MspInit+0xee>
    {
      Error_Handler();
 80011ea:	f7ff ff60 	bl	80010ae <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	4a3d      	ldr	r2, [pc, #244]	; (80012e8 <HAL_ADC_MspInit+0x1e8>)
 80011f2:	639a      	str	r2, [r3, #56]	; 0x38
 80011f4:	4a3c      	ldr	r2, [pc, #240]	; (80012e8 <HAL_ADC_MspInit+0x1e8>)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80011fa:	2200      	movs	r2, #0
 80011fc:	2100      	movs	r1, #0
 80011fe:	2012      	movs	r0, #18
 8001200:	f001 f93f 	bl	8002482 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001204:	2012      	movs	r0, #18
 8001206:	f001 f958 	bl	80024ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800120a:	e061      	b.n	80012d0 <HAL_ADC_MspInit+0x1d0>
  else if(hadc->Instance==ADC3)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a37      	ldr	r2, [pc, #220]	; (80012f0 <HAL_ADC_MspInit+0x1f0>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d15c      	bne.n	80012d0 <HAL_ADC_MspInit+0x1d0>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001216:	4b31      	ldr	r3, [pc, #196]	; (80012dc <HAL_ADC_MspInit+0x1dc>)
 8001218:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800121a:	4a30      	ldr	r2, [pc, #192]	; (80012dc <HAL_ADC_MspInit+0x1dc>)
 800121c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001220:	6453      	str	r3, [r2, #68]	; 0x44
 8001222:	4b2e      	ldr	r3, [pc, #184]	; (80012dc <HAL_ADC_MspInit+0x1dc>)
 8001224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001226:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800122a:	60fb      	str	r3, [r7, #12]
 800122c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800122e:	4b2b      	ldr	r3, [pc, #172]	; (80012dc <HAL_ADC_MspInit+0x1dc>)
 8001230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001232:	4a2a      	ldr	r2, [pc, #168]	; (80012dc <HAL_ADC_MspInit+0x1dc>)
 8001234:	f043 0320 	orr.w	r3, r3, #32
 8001238:	6313      	str	r3, [r2, #48]	; 0x30
 800123a:	4b28      	ldr	r3, [pc, #160]	; (80012dc <HAL_ADC_MspInit+0x1dc>)
 800123c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123e:	f003 0320 	and.w	r3, r3, #32
 8001242:	60bb      	str	r3, [r7, #8]
 8001244:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001246:	f44f 7360 	mov.w	r3, #896	; 0x380
 800124a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800124c:	2303      	movs	r3, #3
 800124e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001250:	2300      	movs	r3, #0
 8001252:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001254:	f107 031c 	add.w	r3, r7, #28
 8001258:	4619      	mov	r1, r3
 800125a:	4826      	ldr	r0, [pc, #152]	; (80012f4 <HAL_ADC_MspInit+0x1f4>)
 800125c:	f001 fd52 	bl	8002d04 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Stream0;
 8001260:	4b25      	ldr	r3, [pc, #148]	; (80012f8 <HAL_ADC_MspInit+0x1f8>)
 8001262:	4a26      	ldr	r2, [pc, #152]	; (80012fc <HAL_ADC_MspInit+0x1fc>)
 8001264:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 8001266:	4b24      	ldr	r3, [pc, #144]	; (80012f8 <HAL_ADC_MspInit+0x1f8>)
 8001268:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800126c:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800126e:	4b22      	ldr	r3, [pc, #136]	; (80012f8 <HAL_ADC_MspInit+0x1f8>)
 8001270:	2200      	movs	r2, #0
 8001272:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001274:	4b20      	ldr	r3, [pc, #128]	; (80012f8 <HAL_ADC_MspInit+0x1f8>)
 8001276:	2200      	movs	r2, #0
 8001278:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 800127a:	4b1f      	ldr	r3, [pc, #124]	; (80012f8 <HAL_ADC_MspInit+0x1f8>)
 800127c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001280:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001282:	4b1d      	ldr	r3, [pc, #116]	; (80012f8 <HAL_ADC_MspInit+0x1f8>)
 8001284:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001288:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800128a:	4b1b      	ldr	r3, [pc, #108]	; (80012f8 <HAL_ADC_MspInit+0x1f8>)
 800128c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001290:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_NORMAL;
 8001292:	4b19      	ldr	r3, [pc, #100]	; (80012f8 <HAL_ADC_MspInit+0x1f8>)
 8001294:	2200      	movs	r2, #0
 8001296:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8001298:	4b17      	ldr	r3, [pc, #92]	; (80012f8 <HAL_ADC_MspInit+0x1f8>)
 800129a:	2200      	movs	r2, #0
 800129c:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800129e:	4b16      	ldr	r3, [pc, #88]	; (80012f8 <HAL_ADC_MspInit+0x1f8>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 80012a4:	4814      	ldr	r0, [pc, #80]	; (80012f8 <HAL_ADC_MspInit+0x1f8>)
 80012a6:	f001 f923 	bl	80024f0 <HAL_DMA_Init>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <HAL_ADC_MspInit+0x1b4>
      Error_Handler();
 80012b0:	f7ff fefd 	bl	80010ae <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	4a10      	ldr	r2, [pc, #64]	; (80012f8 <HAL_ADC_MspInit+0x1f8>)
 80012b8:	639a      	str	r2, [r3, #56]	; 0x38
 80012ba:	4a0f      	ldr	r2, [pc, #60]	; (80012f8 <HAL_ADC_MspInit+0x1f8>)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80012c0:	2200      	movs	r2, #0
 80012c2:	2100      	movs	r1, #0
 80012c4:	2012      	movs	r0, #18
 80012c6:	f001 f8dc 	bl	8002482 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80012ca:	2012      	movs	r0, #18
 80012cc:	f001 f8f5 	bl	80024ba <HAL_NVIC_EnableIRQ>
}
 80012d0:	bf00      	nop
 80012d2:	3730      	adds	r7, #48	; 0x30
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	40012000 	.word	0x40012000
 80012dc:	40023800 	.word	0x40023800
 80012e0:	40020800 	.word	0x40020800
 80012e4:	40020000 	.word	0x40020000
 80012e8:	2000011c 	.word	0x2000011c
 80012ec:	40026470 	.word	0x40026470
 80012f0:	40012200 	.word	0x40012200
 80012f4:	40021400 	.word	0x40021400
 80012f8:	2000017c 	.word	0x2000017c
 80012fc:	40026410 	.word	0x40026410

08001300 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b08a      	sub	sp, #40	; 0x28
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001308:	f107 0314 	add.w	r3, r7, #20
 800130c:	2200      	movs	r2, #0
 800130e:	601a      	str	r2, [r3, #0]
 8001310:	605a      	str	r2, [r3, #4]
 8001312:	609a      	str	r2, [r3, #8]
 8001314:	60da      	str	r2, [r3, #12]
 8001316:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a17      	ldr	r2, [pc, #92]	; (800137c <HAL_TIM_Encoder_MspInit+0x7c>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d128      	bne.n	8001374 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001322:	4b17      	ldr	r3, [pc, #92]	; (8001380 <HAL_TIM_Encoder_MspInit+0x80>)
 8001324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001326:	4a16      	ldr	r2, [pc, #88]	; (8001380 <HAL_TIM_Encoder_MspInit+0x80>)
 8001328:	f043 0301 	orr.w	r3, r3, #1
 800132c:	6453      	str	r3, [r2, #68]	; 0x44
 800132e:	4b14      	ldr	r3, [pc, #80]	; (8001380 <HAL_TIM_Encoder_MspInit+0x80>)
 8001330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001332:	f003 0301 	and.w	r3, r3, #1
 8001336:	613b      	str	r3, [r7, #16]
 8001338:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800133a:	4b11      	ldr	r3, [pc, #68]	; (8001380 <HAL_TIM_Encoder_MspInit+0x80>)
 800133c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133e:	4a10      	ldr	r2, [pc, #64]	; (8001380 <HAL_TIM_Encoder_MspInit+0x80>)
 8001340:	f043 0310 	orr.w	r3, r3, #16
 8001344:	6313      	str	r3, [r2, #48]	; 0x30
 8001346:	4b0e      	ldr	r3, [pc, #56]	; (8001380 <HAL_TIM_Encoder_MspInit+0x80>)
 8001348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134a:	f003 0310 	and.w	r3, r3, #16
 800134e:	60fb      	str	r3, [r7, #12]
 8001350:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8001352:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8001356:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001358:	2302      	movs	r3, #2
 800135a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135c:	2300      	movs	r3, #0
 800135e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001360:	2300      	movs	r3, #0
 8001362:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001364:	2301      	movs	r3, #1
 8001366:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001368:	f107 0314 	add.w	r3, r7, #20
 800136c:	4619      	mov	r1, r3
 800136e:	4805      	ldr	r0, [pc, #20]	; (8001384 <HAL_TIM_Encoder_MspInit+0x84>)
 8001370:	f001 fcc8 	bl	8002d04 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001374:	bf00      	nop
 8001376:	3728      	adds	r7, #40	; 0x28
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}
 800137c:	40010000 	.word	0x40010000
 8001380:	40023800 	.word	0x40023800
 8001384:	40021000 	.word	0x40021000

08001388 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b084      	sub	sp, #16
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a1a      	ldr	r2, [pc, #104]	; (8001400 <HAL_TIM_Base_MspInit+0x78>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d114      	bne.n	80013c4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800139a:	4b1a      	ldr	r3, [pc, #104]	; (8001404 <HAL_TIM_Base_MspInit+0x7c>)
 800139c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139e:	4a19      	ldr	r2, [pc, #100]	; (8001404 <HAL_TIM_Base_MspInit+0x7c>)
 80013a0:	f043 0302 	orr.w	r3, r3, #2
 80013a4:	6413      	str	r3, [r2, #64]	; 0x40
 80013a6:	4b17      	ldr	r3, [pc, #92]	; (8001404 <HAL_TIM_Base_MspInit+0x7c>)
 80013a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013aa:	f003 0302 	and.w	r3, r3, #2
 80013ae:	60fb      	str	r3, [r7, #12]
 80013b0:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80013b2:	2200      	movs	r2, #0
 80013b4:	2100      	movs	r1, #0
 80013b6:	201d      	movs	r0, #29
 80013b8:	f001 f863 	bl	8002482 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80013bc:	201d      	movs	r0, #29
 80013be:	f001 f87c 	bl	80024ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80013c2:	e018      	b.n	80013f6 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM4)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a0f      	ldr	r2, [pc, #60]	; (8001408 <HAL_TIM_Base_MspInit+0x80>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d113      	bne.n	80013f6 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80013ce:	4b0d      	ldr	r3, [pc, #52]	; (8001404 <HAL_TIM_Base_MspInit+0x7c>)
 80013d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d2:	4a0c      	ldr	r2, [pc, #48]	; (8001404 <HAL_TIM_Base_MspInit+0x7c>)
 80013d4:	f043 0304 	orr.w	r3, r3, #4
 80013d8:	6413      	str	r3, [r2, #64]	; 0x40
 80013da:	4b0a      	ldr	r3, [pc, #40]	; (8001404 <HAL_TIM_Base_MspInit+0x7c>)
 80013dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013de:	f003 0304 	and.w	r3, r3, #4
 80013e2:	60bb      	str	r3, [r7, #8]
 80013e4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80013e6:	2200      	movs	r2, #0
 80013e8:	2100      	movs	r1, #0
 80013ea:	201e      	movs	r0, #30
 80013ec:	f001 f849 	bl	8002482 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80013f0:	201e      	movs	r0, #30
 80013f2:	f001 f862 	bl	80024ba <HAL_NVIC_EnableIRQ>
}
 80013f6:	bf00      	nop
 80013f8:	3710      	adds	r7, #16
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	40000400 	.word	0x40000400
 8001404:	40023800 	.word	0x40023800
 8001408:	40000800 	.word	0x40000800

0800140c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b0b0      	sub	sp, #192	; 0xc0
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001414:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001418:	2200      	movs	r2, #0
 800141a:	601a      	str	r2, [r3, #0]
 800141c:	605a      	str	r2, [r3, #4]
 800141e:	609a      	str	r2, [r3, #8]
 8001420:	60da      	str	r2, [r3, #12]
 8001422:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001424:	f107 031c 	add.w	r3, r7, #28
 8001428:	2290      	movs	r2, #144	; 0x90
 800142a:	2100      	movs	r1, #0
 800142c:	4618      	mov	r0, r3
 800142e:	f005 f99d 	bl	800676c <memset>
  if(huart->Instance==USART2)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4a4a      	ldr	r2, [pc, #296]	; (8001560 <HAL_UART_MspInit+0x154>)
 8001438:	4293      	cmp	r3, r2
 800143a:	d143      	bne.n	80014c4 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800143c:	2380      	movs	r3, #128	; 0x80
 800143e:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001440:	2300      	movs	r3, #0
 8001442:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001444:	f107 031c 	add.w	r3, r7, #28
 8001448:	4618      	mov	r0, r3
 800144a:	f002 fb6f 	bl	8003b2c <HAL_RCCEx_PeriphCLKConfig>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d001      	beq.n	8001458 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001454:	f7ff fe2b 	bl	80010ae <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001458:	4b42      	ldr	r3, [pc, #264]	; (8001564 <HAL_UART_MspInit+0x158>)
 800145a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145c:	4a41      	ldr	r2, [pc, #260]	; (8001564 <HAL_UART_MspInit+0x158>)
 800145e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001462:	6413      	str	r3, [r2, #64]	; 0x40
 8001464:	4b3f      	ldr	r3, [pc, #252]	; (8001564 <HAL_UART_MspInit+0x158>)
 8001466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001468:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800146c:	61bb      	str	r3, [r7, #24]
 800146e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001470:	4b3c      	ldr	r3, [pc, #240]	; (8001564 <HAL_UART_MspInit+0x158>)
 8001472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001474:	4a3b      	ldr	r2, [pc, #236]	; (8001564 <HAL_UART_MspInit+0x158>)
 8001476:	f043 0308 	orr.w	r3, r3, #8
 800147a:	6313      	str	r3, [r2, #48]	; 0x30
 800147c:	4b39      	ldr	r3, [pc, #228]	; (8001564 <HAL_UART_MspInit+0x158>)
 800147e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001480:	f003 0308 	and.w	r3, r3, #8
 8001484:	617b      	str	r3, [r7, #20]
 8001486:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001488:	2360      	movs	r3, #96	; 0x60
 800148a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800148e:	2302      	movs	r3, #2
 8001490:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001494:	2300      	movs	r3, #0
 8001496:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800149a:	2303      	movs	r3, #3
 800149c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80014a0:	2307      	movs	r3, #7
 80014a2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014a6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80014aa:	4619      	mov	r1, r3
 80014ac:	482e      	ldr	r0, [pc, #184]	; (8001568 <HAL_UART_MspInit+0x15c>)
 80014ae:	f001 fc29 	bl	8002d04 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80014b2:	2200      	movs	r2, #0
 80014b4:	2100      	movs	r1, #0
 80014b6:	2026      	movs	r0, #38	; 0x26
 80014b8:	f000 ffe3 	bl	8002482 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80014bc:	2026      	movs	r0, #38	; 0x26
 80014be:	f000 fffc 	bl	80024ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80014c2:	e049      	b.n	8001558 <HAL_UART_MspInit+0x14c>
  else if(huart->Instance==USART3)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a28      	ldr	r2, [pc, #160]	; (800156c <HAL_UART_MspInit+0x160>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d144      	bne.n	8001558 <HAL_UART_MspInit+0x14c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80014ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014d2:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80014d4:	2300      	movs	r3, #0
 80014d6:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014d8:	f107 031c 	add.w	r3, r7, #28
 80014dc:	4618      	mov	r0, r3
 80014de:	f002 fb25 	bl	8003b2c <HAL_RCCEx_PeriphCLKConfig>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d001      	beq.n	80014ec <HAL_UART_MspInit+0xe0>
      Error_Handler();
 80014e8:	f7ff fde1 	bl	80010ae <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80014ec:	4b1d      	ldr	r3, [pc, #116]	; (8001564 <HAL_UART_MspInit+0x158>)
 80014ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f0:	4a1c      	ldr	r2, [pc, #112]	; (8001564 <HAL_UART_MspInit+0x158>)
 80014f2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014f6:	6413      	str	r3, [r2, #64]	; 0x40
 80014f8:	4b1a      	ldr	r3, [pc, #104]	; (8001564 <HAL_UART_MspInit+0x158>)
 80014fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001500:	613b      	str	r3, [r7, #16]
 8001502:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001504:	4b17      	ldr	r3, [pc, #92]	; (8001564 <HAL_UART_MspInit+0x158>)
 8001506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001508:	4a16      	ldr	r2, [pc, #88]	; (8001564 <HAL_UART_MspInit+0x158>)
 800150a:	f043 0308 	orr.w	r3, r3, #8
 800150e:	6313      	str	r3, [r2, #48]	; 0x30
 8001510:	4b14      	ldr	r3, [pc, #80]	; (8001564 <HAL_UART_MspInit+0x158>)
 8001512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001514:	f003 0308 	and.w	r3, r3, #8
 8001518:	60fb      	str	r3, [r7, #12]
 800151a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800151c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001520:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001524:	2302      	movs	r3, #2
 8001526:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152a:	2300      	movs	r3, #0
 800152c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001530:	2303      	movs	r3, #3
 8001532:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001536:	2307      	movs	r3, #7
 8001538:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800153c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001540:	4619      	mov	r1, r3
 8001542:	4809      	ldr	r0, [pc, #36]	; (8001568 <HAL_UART_MspInit+0x15c>)
 8001544:	f001 fbde 	bl	8002d04 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001548:	2200      	movs	r2, #0
 800154a:	2100      	movs	r1, #0
 800154c:	2027      	movs	r0, #39	; 0x27
 800154e:	f000 ff98 	bl	8002482 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001552:	2027      	movs	r0, #39	; 0x27
 8001554:	f000 ffb1 	bl	80024ba <HAL_NVIC_EnableIRQ>
}
 8001558:	bf00      	nop
 800155a:	37c0      	adds	r7, #192	; 0xc0
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}
 8001560:	40004400 	.word	0x40004400
 8001564:	40023800 	.word	0x40023800
 8001568:	40020c00 	.word	0x40020c00
 800156c:	40004800 	.word	0x40004800

08001570 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001574:	e7fe      	b.n	8001574 <NMI_Handler+0x4>

08001576 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001576:	b480      	push	{r7}
 8001578:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800157a:	e7fe      	b.n	800157a <HardFault_Handler+0x4>

0800157c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001580:	e7fe      	b.n	8001580 <MemManage_Handler+0x4>

08001582 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001582:	b480      	push	{r7}
 8001584:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001586:	e7fe      	b.n	8001586 <BusFault_Handler+0x4>

08001588 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800158c:	e7fe      	b.n	800158c <UsageFault_Handler+0x4>

0800158e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800158e:	b480      	push	{r7}
 8001590:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001592:	bf00      	nop
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr

0800159c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015a0:	bf00      	nop
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr

080015aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015aa:	b480      	push	{r7}
 80015ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015ae:	bf00      	nop
 80015b0:	46bd      	mov	sp, r7
 80015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b6:	4770      	bx	lr

080015b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015bc:	f000 f8fa 	bl	80017b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015c0:	bf00      	nop
 80015c2:	bd80      	pop	{r7, pc}

080015c4 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80015c8:	4803      	ldr	r0, [pc, #12]	; (80015d8 <ADC_IRQHandler+0x14>)
 80015ca:	f000 f97b 	bl	80018c4 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc3);
 80015ce:	4803      	ldr	r0, [pc, #12]	; (80015dc <ADC_IRQHandler+0x18>)
 80015d0:	f000 f978 	bl	80018c4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80015d4:	bf00      	nop
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	2000008c 	.word	0x2000008c
 80015dc:	200000d4 	.word	0x200000d4

080015e0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80015e4:	4802      	ldr	r0, [pc, #8]	; (80015f0 <TIM3_IRQHandler+0x10>)
 80015e6:	f003 f8cd 	bl	8004784 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
  //HAL_GPIO_TogglePin(GPIOB, LD1_Pin);
  /* USER CODE END TIM3_IRQn 1 */
}
 80015ea:	bf00      	nop
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	20000228 	.word	0x20000228

080015f4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80015f8:	4802      	ldr	r0, [pc, #8]	; (8001604 <TIM4_IRQHandler+0x10>)
 80015fa:	f003 f8c3 	bl	8004784 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */
  //HAL_GPIO_TogglePin(GPIOB, LD2_Pin);
  /* USER CODE END TIM4_IRQn 1 */
}
 80015fe:	bf00      	nop
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	20000274 	.word	0x20000274

08001608 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800160c:	4802      	ldr	r0, [pc, #8]	; (8001618 <USART2_IRQHandler+0x10>)
 800160e:	f003 fde1 	bl	80051d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001612:	bf00      	nop
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	200002c0 	.word	0x200002c0

0800161c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001620:	4802      	ldr	r0, [pc, #8]	; (800162c <USART3_IRQHandler+0x10>)
 8001622:	f003 fdd7 	bl	80051d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001626:	bf00      	nop
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	20000344 	.word	0x20000344

08001630 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8001634:	4802      	ldr	r0, [pc, #8]	; (8001640 <DMA2_Stream0_IRQHandler+0x10>)
 8001636:	f001 f8fb 	bl	8002830 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800163a:	bf00      	nop
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	2000017c 	.word	0x2000017c

08001644 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001648:	4802      	ldr	r0, [pc, #8]	; (8001654 <DMA2_Stream4_IRQHandler+0x10>)
 800164a:	f001 f8f1 	bl	8002830 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 800164e:	bf00      	nop
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	2000011c 	.word	0x2000011c

08001658 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b086      	sub	sp, #24
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001660:	4a14      	ldr	r2, [pc, #80]	; (80016b4 <_sbrk+0x5c>)
 8001662:	4b15      	ldr	r3, [pc, #84]	; (80016b8 <_sbrk+0x60>)
 8001664:	1ad3      	subs	r3, r2, r3
 8001666:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800166c:	4b13      	ldr	r3, [pc, #76]	; (80016bc <_sbrk+0x64>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d102      	bne.n	800167a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001674:	4b11      	ldr	r3, [pc, #68]	; (80016bc <_sbrk+0x64>)
 8001676:	4a12      	ldr	r2, [pc, #72]	; (80016c0 <_sbrk+0x68>)
 8001678:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800167a:	4b10      	ldr	r3, [pc, #64]	; (80016bc <_sbrk+0x64>)
 800167c:	681a      	ldr	r2, [r3, #0]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	4413      	add	r3, r2
 8001682:	693a      	ldr	r2, [r7, #16]
 8001684:	429a      	cmp	r2, r3
 8001686:	d207      	bcs.n	8001698 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001688:	f005 f846 	bl	8006718 <__errno>
 800168c:	4603      	mov	r3, r0
 800168e:	220c      	movs	r2, #12
 8001690:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001692:	f04f 33ff 	mov.w	r3, #4294967295
 8001696:	e009      	b.n	80016ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001698:	4b08      	ldr	r3, [pc, #32]	; (80016bc <_sbrk+0x64>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800169e:	4b07      	ldr	r3, [pc, #28]	; (80016bc <_sbrk+0x64>)
 80016a0:	681a      	ldr	r2, [r3, #0]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	4413      	add	r3, r2
 80016a6:	4a05      	ldr	r2, [pc, #20]	; (80016bc <_sbrk+0x64>)
 80016a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016aa:	68fb      	ldr	r3, [r7, #12]
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	3718      	adds	r7, #24
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	20080000 	.word	0x20080000
 80016b8:	00000400 	.word	0x00000400
 80016bc:	20000578 	.word	0x20000578
 80016c0:	20000590 	.word	0x20000590

080016c4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016c8:	4b06      	ldr	r3, [pc, #24]	; (80016e4 <SystemInit+0x20>)
 80016ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016ce:	4a05      	ldr	r2, [pc, #20]	; (80016e4 <SystemInit+0x20>)
 80016d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016d8:	bf00      	nop
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr
 80016e2:	bf00      	nop
 80016e4:	e000ed00 	.word	0xe000ed00

080016e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80016e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001720 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016ec:	480d      	ldr	r0, [pc, #52]	; (8001724 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80016ee:	490e      	ldr	r1, [pc, #56]	; (8001728 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80016f0:	4a0e      	ldr	r2, [pc, #56]	; (800172c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80016f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016f4:	e002      	b.n	80016fc <LoopCopyDataInit>

080016f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016fa:	3304      	adds	r3, #4

080016fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001700:	d3f9      	bcc.n	80016f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001702:	4a0b      	ldr	r2, [pc, #44]	; (8001730 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001704:	4c0b      	ldr	r4, [pc, #44]	; (8001734 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001706:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001708:	e001      	b.n	800170e <LoopFillZerobss>

0800170a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800170a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800170c:	3204      	adds	r2, #4

0800170e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800170e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001710:	d3fb      	bcc.n	800170a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001712:	f7ff ffd7 	bl	80016c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001716:	f005 f805 	bl	8006724 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800171a:	f7fe ff63 	bl	80005e4 <main>
  bx  lr    
 800171e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001720:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001724:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001728:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800172c:	08007124 	.word	0x08007124
  ldr r2, =_sbss
 8001730:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001734:	20000590 	.word	0x20000590

08001738 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001738:	e7fe      	b.n	8001738 <CAN1_RX0_IRQHandler>

0800173a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800173a:	b580      	push	{r7, lr}
 800173c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800173e:	2003      	movs	r0, #3
 8001740:	f000 fe94 	bl	800246c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001744:	2000      	movs	r0, #0
 8001746:	f000 f805 	bl	8001754 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800174a:	f7ff fcb5 	bl	80010b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800174e:	2300      	movs	r3, #0
}
 8001750:	4618      	mov	r0, r3
 8001752:	bd80      	pop	{r7, pc}

08001754 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b082      	sub	sp, #8
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800175c:	4b12      	ldr	r3, [pc, #72]	; (80017a8 <HAL_InitTick+0x54>)
 800175e:	681a      	ldr	r2, [r3, #0]
 8001760:	4b12      	ldr	r3, [pc, #72]	; (80017ac <HAL_InitTick+0x58>)
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	4619      	mov	r1, r3
 8001766:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800176a:	fbb3 f3f1 	udiv	r3, r3, r1
 800176e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001772:	4618      	mov	r0, r3
 8001774:	f000 feaf 	bl	80024d6 <HAL_SYSTICK_Config>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d001      	beq.n	8001782 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800177e:	2301      	movs	r3, #1
 8001780:	e00e      	b.n	80017a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2b0f      	cmp	r3, #15
 8001786:	d80a      	bhi.n	800179e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001788:	2200      	movs	r2, #0
 800178a:	6879      	ldr	r1, [r7, #4]
 800178c:	f04f 30ff 	mov.w	r0, #4294967295
 8001790:	f000 fe77 	bl	8002482 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001794:	4a06      	ldr	r2, [pc, #24]	; (80017b0 <HAL_InitTick+0x5c>)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800179a:	2300      	movs	r3, #0
 800179c:	e000      	b.n	80017a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800179e:	2301      	movs	r3, #1
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	3708      	adds	r7, #8
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	20000000 	.word	0x20000000
 80017ac:	20000008 	.word	0x20000008
 80017b0:	20000004 	.word	0x20000004

080017b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017b8:	4b06      	ldr	r3, [pc, #24]	; (80017d4 <HAL_IncTick+0x20>)
 80017ba:	781b      	ldrb	r3, [r3, #0]
 80017bc:	461a      	mov	r2, r3
 80017be:	4b06      	ldr	r3, [pc, #24]	; (80017d8 <HAL_IncTick+0x24>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4413      	add	r3, r2
 80017c4:	4a04      	ldr	r2, [pc, #16]	; (80017d8 <HAL_IncTick+0x24>)
 80017c6:	6013      	str	r3, [r2, #0]
}
 80017c8:	bf00      	nop
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr
 80017d2:	bf00      	nop
 80017d4:	20000008 	.word	0x20000008
 80017d8:	2000057c 	.word	0x2000057c

080017dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
  return uwTick;
 80017e0:	4b03      	ldr	r3, [pc, #12]	; (80017f0 <HAL_GetTick+0x14>)
 80017e2:	681b      	ldr	r3, [r3, #0]
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr
 80017ee:	bf00      	nop
 80017f0:	2000057c 	.word	0x2000057c

080017f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b084      	sub	sp, #16
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017fc:	f7ff ffee 	bl	80017dc <HAL_GetTick>
 8001800:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	f1b3 3fff 	cmp.w	r3, #4294967295
 800180c:	d005      	beq.n	800181a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800180e:	4b0a      	ldr	r3, [pc, #40]	; (8001838 <HAL_Delay+0x44>)
 8001810:	781b      	ldrb	r3, [r3, #0]
 8001812:	461a      	mov	r2, r3
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	4413      	add	r3, r2
 8001818:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800181a:	bf00      	nop
 800181c:	f7ff ffde 	bl	80017dc <HAL_GetTick>
 8001820:	4602      	mov	r2, r0
 8001822:	68bb      	ldr	r3, [r7, #8]
 8001824:	1ad3      	subs	r3, r2, r3
 8001826:	68fa      	ldr	r2, [r7, #12]
 8001828:	429a      	cmp	r2, r3
 800182a:	d8f7      	bhi.n	800181c <HAL_Delay+0x28>
  {
  }
}
 800182c:	bf00      	nop
 800182e:	bf00      	nop
 8001830:	3710      	adds	r7, #16
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	20000008 	.word	0x20000008

0800183c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b084      	sub	sp, #16
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001844:	2300      	movs	r3, #0
 8001846:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d101      	bne.n	8001852 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	e031      	b.n	80018b6 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001856:	2b00      	cmp	r3, #0
 8001858:	d109      	bne.n	800186e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800185a:	6878      	ldr	r0, [r7, #4]
 800185c:	f7ff fc50 	bl	8001100 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2200      	movs	r2, #0
 8001864:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2200      	movs	r2, #0
 800186a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001872:	f003 0310 	and.w	r3, r3, #16
 8001876:	2b00      	cmp	r3, #0
 8001878:	d116      	bne.n	80018a8 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800187e:	4b10      	ldr	r3, [pc, #64]	; (80018c0 <HAL_ADC_Init+0x84>)
 8001880:	4013      	ands	r3, r2
 8001882:	f043 0202 	orr.w	r2, r3, #2
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800188a:	6878      	ldr	r0, [r7, #4]
 800188c:	f000 fb98 	bl	8001fc0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2200      	movs	r2, #0
 8001894:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189a:	f023 0303 	bic.w	r3, r3, #3
 800189e:	f043 0201 	orr.w	r2, r3, #1
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	641a      	str	r2, [r3, #64]	; 0x40
 80018a6:	e001      	b.n	80018ac <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80018a8:	2301      	movs	r3, #1
 80018aa:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2200      	movs	r2, #0
 80018b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80018b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	3710      	adds	r7, #16
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	ffffeefd 	.word	0xffffeefd

080018c4 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b086      	sub	sp, #24
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 80018cc:	2300      	movs	r3, #0
 80018ce:	617b      	str	r3, [r7, #20]
 80018d0:	2300      	movs	r3, #0
 80018d2:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	f003 0302 	and.w	r3, r3, #2
 80018ea:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	f003 0320 	and.w	r3, r3, #32
 80018f2:	613b      	str	r3, [r7, #16]

  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d049      	beq.n	800198e <HAL_ADC_IRQHandler+0xca>
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d046      	beq.n	800198e <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001904:	f003 0310 	and.w	r3, r3, #16
 8001908:	2b00      	cmp	r3, #0
 800190a:	d105      	bne.n	8001918 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001910:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	689b      	ldr	r3, [r3, #8]
 800191e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001922:	2b00      	cmp	r3, #0
 8001924:	d12b      	bne.n	800197e <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800192a:	2b00      	cmp	r3, #0
 800192c:	d127      	bne.n	800197e <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001934:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001938:	2b00      	cmp	r3, #0
 800193a:	d006      	beq.n	800194a <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	689b      	ldr	r3, [r3, #8]
 8001942:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001946:	2b00      	cmp	r3, #0
 8001948:	d119      	bne.n	800197e <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	685a      	ldr	r2, [r3, #4]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f022 0220 	bic.w	r2, r2, #32
 8001958:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800195e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800196a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800196e:	2b00      	cmp	r3, #0
 8001970:	d105      	bne.n	800197e <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001976:	f043 0201 	orr.w	r2, r3, #1
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800197e:	6878      	ldr	r0, [r7, #4]
 8001980:	f7ff fafa 	bl	8000f78 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f06f 0212 	mvn.w	r2, #18
 800198c:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	f003 0304 	and.w	r3, r3, #4
 8001994:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001996:	68bb      	ldr	r3, [r7, #8]
 8001998:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800199c:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 800199e:	697b      	ldr	r3, [r7, #20]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d057      	beq.n	8001a54 <HAL_ADC_IRQHandler+0x190>
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d054      	beq.n	8001a54 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ae:	f003 0310 	and.w	r3, r3, #16
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d105      	bne.n	80019c2 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ba:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	689b      	ldr	r3, [r3, #8]
 80019c8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d139      	bne.n	8001a44 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019d6:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d006      	beq.n	80019ec <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	689b      	ldr	r3, [r3, #8]
 80019e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d12b      	bne.n	8001a44 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d124      	bne.n	8001a44 <HAL_ADC_IRQHandler+0x180>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d11d      	bne.n	8001a44 <HAL_ADC_IRQHandler+0x180>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d119      	bne.n	8001a44 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	685a      	ldr	r2, [r3, #4]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001a1e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a24:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d105      	bne.n	8001a44 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3c:	f043 0201 	orr.w	r2, r3, #1
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001a44:	6878      	ldr	r0, [r7, #4]
 8001a46:	f000 fc37 	bl	80022b8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f06f 020c 	mvn.w	r2, #12
 8001a52:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	f003 0301 	and.w	r3, r3, #1
 8001a5a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a62:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d017      	beq.n	8001a9a <HAL_ADC_IRQHandler+0x1d6>
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d014      	beq.n	8001a9a <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 0301 	and.w	r3, r3, #1
 8001a7a:	2b01      	cmp	r3, #1
 8001a7c:	d10d      	bne.n	8001a9a <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a82:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001a8a:	6878      	ldr	r0, [r7, #4]
 8001a8c:	f000 f92e 	bl	8001cec <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f06f 0201 	mvn.w	r2, #1
 8001a98:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	f003 0320 	and.w	r3, r3, #32
 8001aa0:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001aa2:	68bb      	ldr	r3, [r7, #8]
 8001aa4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001aa8:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d015      	beq.n	8001adc <HAL_ADC_IRQHandler+0x218>
 8001ab0:	693b      	ldr	r3, [r7, #16]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d012      	beq.n	8001adc <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aba:	f043 0202 	orr.w	r2, r3, #2
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f06f 0220 	mvn.w	r2, #32
 8001aca:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001acc:	6878      	ldr	r0, [r7, #4]
 8001ace:	f000 f917 	bl	8001d00 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f06f 0220 	mvn.w	r2, #32
 8001ada:	601a      	str	r2, [r3, #0]
  }
}
 8001adc:	bf00      	nop
 8001ade:	3718      	adds	r7, #24
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}

08001ae4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b086      	sub	sp, #24
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	60f8      	str	r0, [r7, #12]
 8001aec:	60b9      	str	r1, [r7, #8]
 8001aee:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 8001af0:	2300      	movs	r3, #0
 8001af2:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001afa:	2b01      	cmp	r3, #1
 8001afc:	d101      	bne.n	8001b02 <HAL_ADC_Start_DMA+0x1e>
 8001afe:	2302      	movs	r3, #2
 8001b00:	e0d4      	b.n	8001cac <HAL_ADC_Start_DMA+0x1c8>
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	2201      	movs	r2, #1
 8001b06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	f003 0301 	and.w	r3, r3, #1
 8001b14:	2b01      	cmp	r3, #1
 8001b16:	d018      	beq.n	8001b4a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	689a      	ldr	r2, [r3, #8]
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f042 0201 	orr.w	r2, r2, #1
 8001b26:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001b28:	4b62      	ldr	r3, [pc, #392]	; (8001cb4 <HAL_ADC_Start_DMA+0x1d0>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a62      	ldr	r2, [pc, #392]	; (8001cb8 <HAL_ADC_Start_DMA+0x1d4>)
 8001b2e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b32:	0c9a      	lsrs	r2, r3, #18
 8001b34:	4613      	mov	r3, r2
 8001b36:	005b      	lsls	r3, r3, #1
 8001b38:	4413      	add	r3, r2
 8001b3a:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8001b3c:	e002      	b.n	8001b44 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	3b01      	subs	r3, #1
 8001b42:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d1f9      	bne.n	8001b3e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	f003 0301 	and.w	r3, r3, #1
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	f040 809c 	bne.w	8001c92 <HAL_ADC_Start_DMA+0x1ae>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b5e:	4b57      	ldr	r3, [pc, #348]	; (8001cbc <HAL_ADC_Start_DMA+0x1d8>)
 8001b60:	4013      	ands	r3, r2
 8001b62:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d007      	beq.n	8001b88 <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b7c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001b80:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b8c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b94:	d106      	bne.n	8001ba4 <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b9a:	f023 0206 	bic.w	r2, r3, #6
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	645a      	str	r2, [r3, #68]	; 0x44
 8001ba2:	e002      	b.n	8001baa <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	2200      	movs	r2, #0
 8001bae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bb6:	4a42      	ldr	r2, [pc, #264]	; (8001cc0 <HAL_ADC_Start_DMA+0x1dc>)
 8001bb8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bbe:	4a41      	ldr	r2, [pc, #260]	; (8001cc4 <HAL_ADC_Start_DMA+0x1e0>)
 8001bc0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bc6:	4a40      	ldr	r2, [pc, #256]	; (8001cc8 <HAL_ADC_Start_DMA+0x1e4>)
 8001bc8:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001bd2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	685a      	ldr	r2, [r3, #4]
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001be2:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	689a      	ldr	r2, [r3, #8]
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001bf2:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	334c      	adds	r3, #76	; 0x4c
 8001bfe:	4619      	mov	r1, r3
 8001c00:	68ba      	ldr	r2, [r7, #8]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	f000 fd22 	bl	800264c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8001c08:	4b30      	ldr	r3, [pc, #192]	; (8001ccc <HAL_ADC_Start_DMA+0x1e8>)
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	f003 031f 	and.w	r3, r3, #31
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d10f      	bne.n	8001c34 <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d143      	bne.n	8001caa <HAL_ADC_Start_DMA+0x1c6>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	689a      	ldr	r2, [r3, #8]
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001c30:	609a      	str	r2, [r3, #8]
 8001c32:	e03a      	b.n	8001caa <HAL_ADC_Start_DMA+0x1c6>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a25      	ldr	r2, [pc, #148]	; (8001cd0 <HAL_ADC_Start_DMA+0x1ec>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d10e      	bne.n	8001c5c <HAL_ADC_Start_DMA+0x178>
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d107      	bne.n	8001c5c <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	689a      	ldr	r2, [r3, #8]
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001c5a:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8001c5c:	4b1b      	ldr	r3, [pc, #108]	; (8001ccc <HAL_ADC_Start_DMA+0x1e8>)
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	f003 0310 	and.w	r3, r3, #16
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d120      	bne.n	8001caa <HAL_ADC_Start_DMA+0x1c6>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a19      	ldr	r2, [pc, #100]	; (8001cd4 <HAL_ADC_Start_DMA+0x1f0>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d11b      	bne.n	8001caa <HAL_ADC_Start_DMA+0x1c6>
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d114      	bne.n	8001caa <HAL_ADC_Start_DMA+0x1c6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	689a      	ldr	r2, [r3, #8]
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001c8e:	609a      	str	r2, [r3, #8]
 8001c90:	e00b      	b.n	8001caa <HAL_ADC_Start_DMA+0x1c6>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c96:	f043 0210 	orr.w	r2, r3, #16
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ca2:	f043 0201 	orr.w	r2, r3, #1
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001caa:	2300      	movs	r3, #0
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	3718      	adds	r7, #24
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	20000000 	.word	0x20000000
 8001cb8:	431bde83 	.word	0x431bde83
 8001cbc:	fffff8fe 	.word	0xfffff8fe
 8001cc0:	080021b5 	.word	0x080021b5
 8001cc4:	0800226f 	.word	0x0800226f
 8001cc8:	0800228b 	.word	0x0800228b
 8001ccc:	40012300 	.word	0x40012300
 8001cd0:	40012000 	.word	0x40012000
 8001cd4:	40012200 	.word	0x40012200

08001cd8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b083      	sub	sp, #12
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001ce0:	bf00      	nop
 8001ce2:	370c      	adds	r7, #12
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr

08001cec <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b083      	sub	sp, #12
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001cf4:	bf00      	nop
 8001cf6:	370c      	adds	r7, #12
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr

08001d00 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b083      	sub	sp, #12
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001d08:	bf00      	nop
 8001d0a:	370c      	adds	r7, #12
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr

08001d14 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b085      	sub	sp, #20
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
 8001d1c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d28:	2b01      	cmp	r3, #1
 8001d2a:	d101      	bne.n	8001d30 <HAL_ADC_ConfigChannel+0x1c>
 8001d2c:	2302      	movs	r3, #2
 8001d2e:	e136      	b.n	8001f9e <HAL_ADC_ConfigChannel+0x28a>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2201      	movs	r2, #1
 8001d34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	2b09      	cmp	r3, #9
 8001d3e:	d93a      	bls.n	8001db6 <HAL_ADC_ConfigChannel+0xa2>
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001d48:	d035      	beq.n	8001db6 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	68d9      	ldr	r1, [r3, #12]
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	b29b      	uxth	r3, r3
 8001d56:	461a      	mov	r2, r3
 8001d58:	4613      	mov	r3, r2
 8001d5a:	005b      	lsls	r3, r3, #1
 8001d5c:	4413      	add	r3, r2
 8001d5e:	3b1e      	subs	r3, #30
 8001d60:	2207      	movs	r2, #7
 8001d62:	fa02 f303 	lsl.w	r3, r2, r3
 8001d66:	43da      	mvns	r2, r3
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	400a      	ands	r2, r1
 8001d6e:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a8d      	ldr	r2, [pc, #564]	; (8001fac <HAL_ADC_ConfigChannel+0x298>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d10a      	bne.n	8001d90 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	68d9      	ldr	r1, [r3, #12]
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	061a      	lsls	r2, r3, #24
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	430a      	orrs	r2, r1
 8001d8c:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d8e:	e035      	b.n	8001dfc <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	68d9      	ldr	r1, [r3, #12]
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	689a      	ldr	r2, [r3, #8]
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	b29b      	uxth	r3, r3
 8001da0:	4618      	mov	r0, r3
 8001da2:	4603      	mov	r3, r0
 8001da4:	005b      	lsls	r3, r3, #1
 8001da6:	4403      	add	r3, r0
 8001da8:	3b1e      	subs	r3, #30
 8001daa:	409a      	lsls	r2, r3
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	430a      	orrs	r2, r1
 8001db2:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001db4:	e022      	b.n	8001dfc <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	6919      	ldr	r1, [r3, #16]
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	b29b      	uxth	r3, r3
 8001dc2:	461a      	mov	r2, r3
 8001dc4:	4613      	mov	r3, r2
 8001dc6:	005b      	lsls	r3, r3, #1
 8001dc8:	4413      	add	r3, r2
 8001dca:	2207      	movs	r2, #7
 8001dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd0:	43da      	mvns	r2, r3
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	400a      	ands	r2, r1
 8001dd8:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	6919      	ldr	r1, [r3, #16]
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	689a      	ldr	r2, [r3, #8]
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	b29b      	uxth	r3, r3
 8001dea:	4618      	mov	r0, r3
 8001dec:	4603      	mov	r3, r0
 8001dee:	005b      	lsls	r3, r3, #1
 8001df0:	4403      	add	r3, r0
 8001df2:	409a      	lsls	r2, r3
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	430a      	orrs	r2, r1
 8001dfa:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	2b06      	cmp	r3, #6
 8001e02:	d824      	bhi.n	8001e4e <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	685a      	ldr	r2, [r3, #4]
 8001e0e:	4613      	mov	r3, r2
 8001e10:	009b      	lsls	r3, r3, #2
 8001e12:	4413      	add	r3, r2
 8001e14:	3b05      	subs	r3, #5
 8001e16:	221f      	movs	r2, #31
 8001e18:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1c:	43da      	mvns	r2, r3
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	400a      	ands	r2, r1
 8001e24:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	b29b      	uxth	r3, r3
 8001e32:	4618      	mov	r0, r3
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	685a      	ldr	r2, [r3, #4]
 8001e38:	4613      	mov	r3, r2
 8001e3a:	009b      	lsls	r3, r3, #2
 8001e3c:	4413      	add	r3, r2
 8001e3e:	3b05      	subs	r3, #5
 8001e40:	fa00 f203 	lsl.w	r2, r0, r3
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	430a      	orrs	r2, r1
 8001e4a:	635a      	str	r2, [r3, #52]	; 0x34
 8001e4c:	e04c      	b.n	8001ee8 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	2b0c      	cmp	r3, #12
 8001e54:	d824      	bhi.n	8001ea0 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	685a      	ldr	r2, [r3, #4]
 8001e60:	4613      	mov	r3, r2
 8001e62:	009b      	lsls	r3, r3, #2
 8001e64:	4413      	add	r3, r2
 8001e66:	3b23      	subs	r3, #35	; 0x23
 8001e68:	221f      	movs	r2, #31
 8001e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6e:	43da      	mvns	r2, r3
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	400a      	ands	r2, r1
 8001e76:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	b29b      	uxth	r3, r3
 8001e84:	4618      	mov	r0, r3
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	685a      	ldr	r2, [r3, #4]
 8001e8a:	4613      	mov	r3, r2
 8001e8c:	009b      	lsls	r3, r3, #2
 8001e8e:	4413      	add	r3, r2
 8001e90:	3b23      	subs	r3, #35	; 0x23
 8001e92:	fa00 f203 	lsl.w	r2, r0, r3
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	430a      	orrs	r2, r1
 8001e9c:	631a      	str	r2, [r3, #48]	; 0x30
 8001e9e:	e023      	b.n	8001ee8 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	685a      	ldr	r2, [r3, #4]
 8001eaa:	4613      	mov	r3, r2
 8001eac:	009b      	lsls	r3, r3, #2
 8001eae:	4413      	add	r3, r2
 8001eb0:	3b41      	subs	r3, #65	; 0x41
 8001eb2:	221f      	movs	r2, #31
 8001eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb8:	43da      	mvns	r2, r3
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	400a      	ands	r2, r1
 8001ec0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	b29b      	uxth	r3, r3
 8001ece:	4618      	mov	r0, r3
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	685a      	ldr	r2, [r3, #4]
 8001ed4:	4613      	mov	r3, r2
 8001ed6:	009b      	lsls	r3, r3, #2
 8001ed8:	4413      	add	r3, r2
 8001eda:	3b41      	subs	r3, #65	; 0x41
 8001edc:	fa00 f203 	lsl.w	r2, r0, r3
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	430a      	orrs	r2, r1
 8001ee6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a30      	ldr	r2, [pc, #192]	; (8001fb0 <HAL_ADC_ConfigChannel+0x29c>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d10a      	bne.n	8001f08 <HAL_ADC_ConfigChannel+0x1f4>
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001efa:	d105      	bne.n	8001f08 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001efc:	4b2d      	ldr	r3, [pc, #180]	; (8001fb4 <HAL_ADC_ConfigChannel+0x2a0>)
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	4a2c      	ldr	r2, [pc, #176]	; (8001fb4 <HAL_ADC_ConfigChannel+0x2a0>)
 8001f02:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001f06:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a28      	ldr	r2, [pc, #160]	; (8001fb0 <HAL_ADC_ConfigChannel+0x29c>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d10f      	bne.n	8001f32 <HAL_ADC_ConfigChannel+0x21e>
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	2b12      	cmp	r3, #18
 8001f18:	d10b      	bne.n	8001f32 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8001f1a:	4b26      	ldr	r3, [pc, #152]	; (8001fb4 <HAL_ADC_ConfigChannel+0x2a0>)
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	4a25      	ldr	r2, [pc, #148]	; (8001fb4 <HAL_ADC_ConfigChannel+0x2a0>)
 8001f20:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001f24:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8001f26:	4b23      	ldr	r3, [pc, #140]	; (8001fb4 <HAL_ADC_ConfigChannel+0x2a0>)
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	4a22      	ldr	r2, [pc, #136]	; (8001fb4 <HAL_ADC_ConfigChannel+0x2a0>)
 8001f2c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001f30:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a1e      	ldr	r2, [pc, #120]	; (8001fb0 <HAL_ADC_ConfigChannel+0x29c>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d12b      	bne.n	8001f94 <HAL_ADC_ConfigChannel+0x280>
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a1a      	ldr	r2, [pc, #104]	; (8001fac <HAL_ADC_ConfigChannel+0x298>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d003      	beq.n	8001f4e <HAL_ADC_ConfigChannel+0x23a>
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	2b11      	cmp	r3, #17
 8001f4c:	d122      	bne.n	8001f94 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8001f4e:	4b19      	ldr	r3, [pc, #100]	; (8001fb4 <HAL_ADC_ConfigChannel+0x2a0>)
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	4a18      	ldr	r2, [pc, #96]	; (8001fb4 <HAL_ADC_ConfigChannel+0x2a0>)
 8001f54:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001f58:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001f5a:	4b16      	ldr	r3, [pc, #88]	; (8001fb4 <HAL_ADC_ConfigChannel+0x2a0>)
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	4a15      	ldr	r2, [pc, #84]	; (8001fb4 <HAL_ADC_ConfigChannel+0x2a0>)
 8001f60:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001f64:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a10      	ldr	r2, [pc, #64]	; (8001fac <HAL_ADC_ConfigChannel+0x298>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d111      	bne.n	8001f94 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001f70:	4b11      	ldr	r3, [pc, #68]	; (8001fb8 <HAL_ADC_ConfigChannel+0x2a4>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a11      	ldr	r2, [pc, #68]	; (8001fbc <HAL_ADC_ConfigChannel+0x2a8>)
 8001f76:	fba2 2303 	umull	r2, r3, r2, r3
 8001f7a:	0c9a      	lsrs	r2, r3, #18
 8001f7c:	4613      	mov	r3, r2
 8001f7e:	009b      	lsls	r3, r3, #2
 8001f80:	4413      	add	r3, r2
 8001f82:	005b      	lsls	r3, r3, #1
 8001f84:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001f86:	e002      	b.n	8001f8e <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	3b01      	subs	r3, #1
 8001f8c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d1f9      	bne.n	8001f88 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2200      	movs	r2, #0
 8001f98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001f9c:	2300      	movs	r3, #0
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	3714      	adds	r7, #20
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr
 8001faa:	bf00      	nop
 8001fac:	10000012 	.word	0x10000012
 8001fb0:	40012000 	.word	0x40012000
 8001fb4:	40012300 	.word	0x40012300
 8001fb8:	20000000 	.word	0x20000000
 8001fbc:	431bde83 	.word	0x431bde83

08001fc0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b083      	sub	sp, #12
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001fc8:	4b78      	ldr	r3, [pc, #480]	; (80021ac <ADC_Init+0x1ec>)
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	4a77      	ldr	r2, [pc, #476]	; (80021ac <ADC_Init+0x1ec>)
 8001fce:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001fd2:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001fd4:	4b75      	ldr	r3, [pc, #468]	; (80021ac <ADC_Init+0x1ec>)
 8001fd6:	685a      	ldr	r2, [r3, #4]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	4973      	ldr	r1, [pc, #460]	; (80021ac <ADC_Init+0x1ec>)
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	685a      	ldr	r2, [r3, #4]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001ff0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	6859      	ldr	r1, [r3, #4]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	691b      	ldr	r3, [r3, #16]
 8001ffc:	021a      	lsls	r2, r3, #8
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	430a      	orrs	r2, r1
 8002004:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	685a      	ldr	r2, [r3, #4]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002014:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	6859      	ldr	r1, [r3, #4]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	689a      	ldr	r2, [r3, #8]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	430a      	orrs	r2, r1
 8002026:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	689a      	ldr	r2, [r3, #8]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002036:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	6899      	ldr	r1, [r3, #8]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	68da      	ldr	r2, [r3, #12]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	430a      	orrs	r2, r1
 8002048:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800204e:	4a58      	ldr	r2, [pc, #352]	; (80021b0 <ADC_Init+0x1f0>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d022      	beq.n	800209a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	689a      	ldr	r2, [r3, #8]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002062:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	6899      	ldr	r1, [r3, #8]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	430a      	orrs	r2, r1
 8002074:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	689a      	ldr	r2, [r3, #8]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002084:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	6899      	ldr	r1, [r3, #8]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	430a      	orrs	r2, r1
 8002096:	609a      	str	r2, [r3, #8]
 8002098:	e00f      	b.n	80020ba <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	689a      	ldr	r2, [r3, #8]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80020a8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	689a      	ldr	r2, [r3, #8]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80020b8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	689a      	ldr	r2, [r3, #8]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f022 0202 	bic.w	r2, r2, #2
 80020c8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	6899      	ldr	r1, [r3, #8]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	699b      	ldr	r3, [r3, #24]
 80020d4:	005a      	lsls	r2, r3, #1
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	430a      	orrs	r2, r1
 80020dc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d01b      	beq.n	8002120 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	685a      	ldr	r2, [r3, #4]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80020f6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	685a      	ldr	r2, [r3, #4]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002106:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	6859      	ldr	r1, [r3, #4]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002112:	3b01      	subs	r3, #1
 8002114:	035a      	lsls	r2, r3, #13
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	430a      	orrs	r2, r1
 800211c:	605a      	str	r2, [r3, #4]
 800211e:	e007      	b.n	8002130 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	685a      	ldr	r2, [r3, #4]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800212e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800213e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	69db      	ldr	r3, [r3, #28]
 800214a:	3b01      	subs	r3, #1
 800214c:	051a      	lsls	r2, r3, #20
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	430a      	orrs	r2, r1
 8002154:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	689a      	ldr	r2, [r3, #8]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002164:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	6899      	ldr	r1, [r3, #8]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002172:	025a      	lsls	r2, r3, #9
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	430a      	orrs	r2, r1
 800217a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	689a      	ldr	r2, [r3, #8]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800218a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	6899      	ldr	r1, [r3, #8]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	695b      	ldr	r3, [r3, #20]
 8002196:	029a      	lsls	r2, r3, #10
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	430a      	orrs	r2, r1
 800219e:	609a      	str	r2, [r3, #8]
}
 80021a0:	bf00      	nop
 80021a2:	370c      	adds	r7, #12
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr
 80021ac:	40012300 	.word	0x40012300
 80021b0:	0f000001 	.word	0x0f000001

080021b4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b084      	sub	sp, #16
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021c0:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d13c      	bne.n	8002248 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	689b      	ldr	r3, [r3, #8]
 80021e0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d12b      	bne.n	8002240 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d127      	bne.n	8002240 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021f6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d006      	beq.n	800220c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002208:	2b00      	cmp	r3, #0
 800220a:	d119      	bne.n	8002240 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	685a      	ldr	r2, [r3, #4]
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f022 0220 	bic.w	r2, r2, #32
 800221a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002220:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002230:	2b00      	cmp	r3, #0
 8002232:	d105      	bne.n	8002240 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002238:	f043 0201 	orr.w	r2, r3, #1
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002240:	68f8      	ldr	r0, [r7, #12]
 8002242:	f7fe fe99 	bl	8000f78 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002246:	e00e      	b.n	8002266 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800224c:	f003 0310 	and.w	r3, r3, #16
 8002250:	2b00      	cmp	r3, #0
 8002252:	d003      	beq.n	800225c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002254:	68f8      	ldr	r0, [r7, #12]
 8002256:	f7ff fd53 	bl	8001d00 <HAL_ADC_ErrorCallback>
}
 800225a:	e004      	b.n	8002266 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002260:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002262:	6878      	ldr	r0, [r7, #4]
 8002264:	4798      	blx	r3
}
 8002266:	bf00      	nop
 8002268:	3710      	adds	r7, #16
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}

0800226e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800226e:	b580      	push	{r7, lr}
 8002270:	b084      	sub	sp, #16
 8002272:	af00      	add	r7, sp, #0
 8002274:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800227a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800227c:	68f8      	ldr	r0, [r7, #12]
 800227e:	f7ff fd2b 	bl	8001cd8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002282:	bf00      	nop
 8002284:	3710      	adds	r7, #16
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}

0800228a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800228a:	b580      	push	{r7, lr}
 800228c:	b084      	sub	sp, #16
 800228e:	af00      	add	r7, sp, #0
 8002290:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002296:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	2240      	movs	r2, #64	; 0x40
 800229c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022a2:	f043 0204 	orr.w	r2, r3, #4
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80022aa:	68f8      	ldr	r0, [r7, #12]
 80022ac:	f7ff fd28 	bl	8001d00 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80022b0:	bf00      	nop
 80022b2:	3710      	adds	r7, #16
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}

080022b8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b083      	sub	sp, #12
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80022c0:	bf00      	nop
 80022c2:	370c      	adds	r7, #12
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr

080022cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b085      	sub	sp, #20
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	f003 0307 	and.w	r3, r3, #7
 80022da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022dc:	4b0b      	ldr	r3, [pc, #44]	; (800230c <__NVIC_SetPriorityGrouping+0x40>)
 80022de:	68db      	ldr	r3, [r3, #12]
 80022e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022e2:	68ba      	ldr	r2, [r7, #8]
 80022e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022e8:	4013      	ands	r3, r2
 80022ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80022f4:	4b06      	ldr	r3, [pc, #24]	; (8002310 <__NVIC_SetPriorityGrouping+0x44>)
 80022f6:	4313      	orrs	r3, r2
 80022f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022fa:	4a04      	ldr	r2, [pc, #16]	; (800230c <__NVIC_SetPriorityGrouping+0x40>)
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	60d3      	str	r3, [r2, #12]
}
 8002300:	bf00      	nop
 8002302:	3714      	adds	r7, #20
 8002304:	46bd      	mov	sp, r7
 8002306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230a:	4770      	bx	lr
 800230c:	e000ed00 	.word	0xe000ed00
 8002310:	05fa0000 	.word	0x05fa0000

08002314 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002314:	b480      	push	{r7}
 8002316:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002318:	4b04      	ldr	r3, [pc, #16]	; (800232c <__NVIC_GetPriorityGrouping+0x18>)
 800231a:	68db      	ldr	r3, [r3, #12]
 800231c:	0a1b      	lsrs	r3, r3, #8
 800231e:	f003 0307 	and.w	r3, r3, #7
}
 8002322:	4618      	mov	r0, r3
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr
 800232c:	e000ed00 	.word	0xe000ed00

08002330 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002330:	b480      	push	{r7}
 8002332:	b083      	sub	sp, #12
 8002334:	af00      	add	r7, sp, #0
 8002336:	4603      	mov	r3, r0
 8002338:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800233a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800233e:	2b00      	cmp	r3, #0
 8002340:	db0b      	blt.n	800235a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002342:	79fb      	ldrb	r3, [r7, #7]
 8002344:	f003 021f 	and.w	r2, r3, #31
 8002348:	4907      	ldr	r1, [pc, #28]	; (8002368 <__NVIC_EnableIRQ+0x38>)
 800234a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800234e:	095b      	lsrs	r3, r3, #5
 8002350:	2001      	movs	r0, #1
 8002352:	fa00 f202 	lsl.w	r2, r0, r2
 8002356:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800235a:	bf00      	nop
 800235c:	370c      	adds	r7, #12
 800235e:	46bd      	mov	sp, r7
 8002360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002364:	4770      	bx	lr
 8002366:	bf00      	nop
 8002368:	e000e100 	.word	0xe000e100

0800236c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800236c:	b480      	push	{r7}
 800236e:	b083      	sub	sp, #12
 8002370:	af00      	add	r7, sp, #0
 8002372:	4603      	mov	r3, r0
 8002374:	6039      	str	r1, [r7, #0]
 8002376:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002378:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800237c:	2b00      	cmp	r3, #0
 800237e:	db0a      	blt.n	8002396 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	b2da      	uxtb	r2, r3
 8002384:	490c      	ldr	r1, [pc, #48]	; (80023b8 <__NVIC_SetPriority+0x4c>)
 8002386:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800238a:	0112      	lsls	r2, r2, #4
 800238c:	b2d2      	uxtb	r2, r2
 800238e:	440b      	add	r3, r1
 8002390:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002394:	e00a      	b.n	80023ac <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	b2da      	uxtb	r2, r3
 800239a:	4908      	ldr	r1, [pc, #32]	; (80023bc <__NVIC_SetPriority+0x50>)
 800239c:	79fb      	ldrb	r3, [r7, #7]
 800239e:	f003 030f 	and.w	r3, r3, #15
 80023a2:	3b04      	subs	r3, #4
 80023a4:	0112      	lsls	r2, r2, #4
 80023a6:	b2d2      	uxtb	r2, r2
 80023a8:	440b      	add	r3, r1
 80023aa:	761a      	strb	r2, [r3, #24]
}
 80023ac:	bf00      	nop
 80023ae:	370c      	adds	r7, #12
 80023b0:	46bd      	mov	sp, r7
 80023b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b6:	4770      	bx	lr
 80023b8:	e000e100 	.word	0xe000e100
 80023bc:	e000ed00 	.word	0xe000ed00

080023c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b089      	sub	sp, #36	; 0x24
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	60f8      	str	r0, [r7, #12]
 80023c8:	60b9      	str	r1, [r7, #8]
 80023ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	f003 0307 	and.w	r3, r3, #7
 80023d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023d4:	69fb      	ldr	r3, [r7, #28]
 80023d6:	f1c3 0307 	rsb	r3, r3, #7
 80023da:	2b04      	cmp	r3, #4
 80023dc:	bf28      	it	cs
 80023de:	2304      	movcs	r3, #4
 80023e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023e2:	69fb      	ldr	r3, [r7, #28]
 80023e4:	3304      	adds	r3, #4
 80023e6:	2b06      	cmp	r3, #6
 80023e8:	d902      	bls.n	80023f0 <NVIC_EncodePriority+0x30>
 80023ea:	69fb      	ldr	r3, [r7, #28]
 80023ec:	3b03      	subs	r3, #3
 80023ee:	e000      	b.n	80023f2 <NVIC_EncodePriority+0x32>
 80023f0:	2300      	movs	r3, #0
 80023f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023f4:	f04f 32ff 	mov.w	r2, #4294967295
 80023f8:	69bb      	ldr	r3, [r7, #24]
 80023fa:	fa02 f303 	lsl.w	r3, r2, r3
 80023fe:	43da      	mvns	r2, r3
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	401a      	ands	r2, r3
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002408:	f04f 31ff 	mov.w	r1, #4294967295
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	fa01 f303 	lsl.w	r3, r1, r3
 8002412:	43d9      	mvns	r1, r3
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002418:	4313      	orrs	r3, r2
         );
}
 800241a:	4618      	mov	r0, r3
 800241c:	3724      	adds	r7, #36	; 0x24
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr
	...

08002428 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b082      	sub	sp, #8
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	3b01      	subs	r3, #1
 8002434:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002438:	d301      	bcc.n	800243e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800243a:	2301      	movs	r3, #1
 800243c:	e00f      	b.n	800245e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800243e:	4a0a      	ldr	r2, [pc, #40]	; (8002468 <SysTick_Config+0x40>)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	3b01      	subs	r3, #1
 8002444:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002446:	210f      	movs	r1, #15
 8002448:	f04f 30ff 	mov.w	r0, #4294967295
 800244c:	f7ff ff8e 	bl	800236c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002450:	4b05      	ldr	r3, [pc, #20]	; (8002468 <SysTick_Config+0x40>)
 8002452:	2200      	movs	r2, #0
 8002454:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002456:	4b04      	ldr	r3, [pc, #16]	; (8002468 <SysTick_Config+0x40>)
 8002458:	2207      	movs	r2, #7
 800245a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800245c:	2300      	movs	r3, #0
}
 800245e:	4618      	mov	r0, r3
 8002460:	3708      	adds	r7, #8
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	e000e010 	.word	0xe000e010

0800246c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b082      	sub	sp, #8
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002474:	6878      	ldr	r0, [r7, #4]
 8002476:	f7ff ff29 	bl	80022cc <__NVIC_SetPriorityGrouping>
}
 800247a:	bf00      	nop
 800247c:	3708      	adds	r7, #8
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}

08002482 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002482:	b580      	push	{r7, lr}
 8002484:	b086      	sub	sp, #24
 8002486:	af00      	add	r7, sp, #0
 8002488:	4603      	mov	r3, r0
 800248a:	60b9      	str	r1, [r7, #8]
 800248c:	607a      	str	r2, [r7, #4]
 800248e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002490:	2300      	movs	r3, #0
 8002492:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002494:	f7ff ff3e 	bl	8002314 <__NVIC_GetPriorityGrouping>
 8002498:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800249a:	687a      	ldr	r2, [r7, #4]
 800249c:	68b9      	ldr	r1, [r7, #8]
 800249e:	6978      	ldr	r0, [r7, #20]
 80024a0:	f7ff ff8e 	bl	80023c0 <NVIC_EncodePriority>
 80024a4:	4602      	mov	r2, r0
 80024a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024aa:	4611      	mov	r1, r2
 80024ac:	4618      	mov	r0, r3
 80024ae:	f7ff ff5d 	bl	800236c <__NVIC_SetPriority>
}
 80024b2:	bf00      	nop
 80024b4:	3718      	adds	r7, #24
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}

080024ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024ba:	b580      	push	{r7, lr}
 80024bc:	b082      	sub	sp, #8
 80024be:	af00      	add	r7, sp, #0
 80024c0:	4603      	mov	r3, r0
 80024c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024c8:	4618      	mov	r0, r3
 80024ca:	f7ff ff31 	bl	8002330 <__NVIC_EnableIRQ>
}
 80024ce:	bf00      	nop
 80024d0:	3708      	adds	r7, #8
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}

080024d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024d6:	b580      	push	{r7, lr}
 80024d8:	b082      	sub	sp, #8
 80024da:	af00      	add	r7, sp, #0
 80024dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	f7ff ffa2 	bl	8002428 <SysTick_Config>
 80024e4:	4603      	mov	r3, r0
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	3708      	adds	r7, #8
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
	...

080024f0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b086      	sub	sp, #24
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80024f8:	2300      	movs	r3, #0
 80024fa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80024fc:	f7ff f96e 	bl	80017dc <HAL_GetTick>
 8002500:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d101      	bne.n	800250c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002508:	2301      	movs	r3, #1
 800250a:	e099      	b.n	8002640 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2202      	movs	r2, #2
 8002510:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2200      	movs	r2, #0
 8002518:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f022 0201 	bic.w	r2, r2, #1
 800252a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800252c:	e00f      	b.n	800254e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800252e:	f7ff f955 	bl	80017dc <HAL_GetTick>
 8002532:	4602      	mov	r2, r0
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	1ad3      	subs	r3, r2, r3
 8002538:	2b05      	cmp	r3, #5
 800253a:	d908      	bls.n	800254e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2220      	movs	r2, #32
 8002540:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2203      	movs	r2, #3
 8002546:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800254a:	2303      	movs	r3, #3
 800254c:	e078      	b.n	8002640 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f003 0301 	and.w	r3, r3, #1
 8002558:	2b00      	cmp	r3, #0
 800255a:	d1e8      	bne.n	800252e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002564:	697a      	ldr	r2, [r7, #20]
 8002566:	4b38      	ldr	r3, [pc, #224]	; (8002648 <HAL_DMA_Init+0x158>)
 8002568:	4013      	ands	r3, r2
 800256a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	685a      	ldr	r2, [r3, #4]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800257a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	691b      	ldr	r3, [r3, #16]
 8002580:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002586:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	699b      	ldr	r3, [r3, #24]
 800258c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002592:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6a1b      	ldr	r3, [r3, #32]
 8002598:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800259a:	697a      	ldr	r2, [r7, #20]
 800259c:	4313      	orrs	r3, r2
 800259e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a4:	2b04      	cmp	r3, #4
 80025a6:	d107      	bne.n	80025b8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b0:	4313      	orrs	r3, r2
 80025b2:	697a      	ldr	r2, [r7, #20]
 80025b4:	4313      	orrs	r3, r2
 80025b6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	697a      	ldr	r2, [r7, #20]
 80025be:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	695b      	ldr	r3, [r3, #20]
 80025c6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	f023 0307 	bic.w	r3, r3, #7
 80025ce:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d4:	697a      	ldr	r2, [r7, #20]
 80025d6:	4313      	orrs	r3, r2
 80025d8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025de:	2b04      	cmp	r3, #4
 80025e0:	d117      	bne.n	8002612 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025e6:	697a      	ldr	r2, [r7, #20]
 80025e8:	4313      	orrs	r3, r2
 80025ea:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d00e      	beq.n	8002612 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80025f4:	6878      	ldr	r0, [r7, #4]
 80025f6:	f000 fb09 	bl	8002c0c <DMA_CheckFifoParam>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d008      	beq.n	8002612 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2240      	movs	r2, #64	; 0x40
 8002604:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2201      	movs	r2, #1
 800260a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800260e:	2301      	movs	r3, #1
 8002610:	e016      	b.n	8002640 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	697a      	ldr	r2, [r7, #20]
 8002618:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800261a:	6878      	ldr	r0, [r7, #4]
 800261c:	f000 fac0 	bl	8002ba0 <DMA_CalcBaseAndBitshift>
 8002620:	4603      	mov	r3, r0
 8002622:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002628:	223f      	movs	r2, #63	; 0x3f
 800262a:	409a      	lsls	r2, r3
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2200      	movs	r2, #0
 8002634:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2201      	movs	r2, #1
 800263a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800263e:	2300      	movs	r3, #0
}
 8002640:	4618      	mov	r0, r3
 8002642:	3718      	adds	r7, #24
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}
 8002648:	e010803f 	.word	0xe010803f

0800264c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b086      	sub	sp, #24
 8002650:	af00      	add	r7, sp, #0
 8002652:	60f8      	str	r0, [r7, #12]
 8002654:	60b9      	str	r1, [r7, #8]
 8002656:	607a      	str	r2, [r7, #4]
 8002658:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800265a:	2300      	movs	r3, #0
 800265c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002662:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800266a:	2b01      	cmp	r3, #1
 800266c:	d101      	bne.n	8002672 <HAL_DMA_Start_IT+0x26>
 800266e:	2302      	movs	r3, #2
 8002670:	e048      	b.n	8002704 <HAL_DMA_Start_IT+0xb8>
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	2201      	movs	r2, #1
 8002676:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002680:	b2db      	uxtb	r3, r3
 8002682:	2b01      	cmp	r3, #1
 8002684:	d137      	bne.n	80026f6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	2202      	movs	r2, #2
 800268a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	2200      	movs	r2, #0
 8002692:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	687a      	ldr	r2, [r7, #4]
 8002698:	68b9      	ldr	r1, [r7, #8]
 800269a:	68f8      	ldr	r0, [r7, #12]
 800269c:	f000 fa52 	bl	8002b44 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026a4:	223f      	movs	r2, #63	; 0x3f
 80026a6:	409a      	lsls	r2, r3
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f042 0216 	orr.w	r2, r2, #22
 80026ba:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	695a      	ldr	r2, [r3, #20]
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80026ca:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d007      	beq.n	80026e4 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f042 0208 	orr.w	r2, r2, #8
 80026e2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f042 0201 	orr.w	r2, r2, #1
 80026f2:	601a      	str	r2, [r3, #0]
 80026f4:	e005      	b.n	8002702 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	2200      	movs	r2, #0
 80026fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80026fe:	2302      	movs	r3, #2
 8002700:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002702:	7dfb      	ldrb	r3, [r7, #23]
}
 8002704:	4618      	mov	r0, r3
 8002706:	3718      	adds	r7, #24
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}

0800270c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b084      	sub	sp, #16
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002718:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800271a:	f7ff f85f 	bl	80017dc <HAL_GetTick>
 800271e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002726:	b2db      	uxtb	r3, r3
 8002728:	2b02      	cmp	r3, #2
 800272a:	d008      	beq.n	800273e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2280      	movs	r2, #128	; 0x80
 8002730:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2200      	movs	r2, #0
 8002736:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	e052      	b.n	80027e4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	681a      	ldr	r2, [r3, #0]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f022 0216 	bic.w	r2, r2, #22
 800274c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	695a      	ldr	r2, [r3, #20]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800275c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002762:	2b00      	cmp	r3, #0
 8002764:	d103      	bne.n	800276e <HAL_DMA_Abort+0x62>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800276a:	2b00      	cmp	r3, #0
 800276c:	d007      	beq.n	800277e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f022 0208 	bic.w	r2, r2, #8
 800277c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	681a      	ldr	r2, [r3, #0]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f022 0201 	bic.w	r2, r2, #1
 800278c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800278e:	e013      	b.n	80027b8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002790:	f7ff f824 	bl	80017dc <HAL_GetTick>
 8002794:	4602      	mov	r2, r0
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	1ad3      	subs	r3, r2, r3
 800279a:	2b05      	cmp	r3, #5
 800279c:	d90c      	bls.n	80027b8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2220      	movs	r2, #32
 80027a2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2203      	movs	r2, #3
 80027a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2200      	movs	r2, #0
 80027b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80027b4:	2303      	movs	r3, #3
 80027b6:	e015      	b.n	80027e4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f003 0301 	and.w	r3, r3, #1
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d1e4      	bne.n	8002790 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027ca:	223f      	movs	r2, #63	; 0x3f
 80027cc:	409a      	lsls	r2, r3
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2201      	movs	r2, #1
 80027d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2200      	movs	r2, #0
 80027de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 80027e2:	2300      	movs	r3, #0
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	3710      	adds	r7, #16
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}

080027ec <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b083      	sub	sp, #12
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80027fa:	b2db      	uxtb	r3, r3
 80027fc:	2b02      	cmp	r3, #2
 80027fe:	d004      	beq.n	800280a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2280      	movs	r2, #128	; 0x80
 8002804:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	e00c      	b.n	8002824 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2205      	movs	r2, #5
 800280e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f022 0201 	bic.w	r2, r2, #1
 8002820:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002822:	2300      	movs	r3, #0
}
 8002824:	4618      	mov	r0, r3
 8002826:	370c      	adds	r7, #12
 8002828:	46bd      	mov	sp, r7
 800282a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282e:	4770      	bx	lr

08002830 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b086      	sub	sp, #24
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002838:	2300      	movs	r3, #0
 800283a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 800283c:	4b8e      	ldr	r3, [pc, #568]	; (8002a78 <HAL_DMA_IRQHandler+0x248>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a8e      	ldr	r2, [pc, #568]	; (8002a7c <HAL_DMA_IRQHandler+0x24c>)
 8002842:	fba2 2303 	umull	r2, r3, r2, r3
 8002846:	0a9b      	lsrs	r3, r3, #10
 8002848:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800284e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800285a:	2208      	movs	r2, #8
 800285c:	409a      	lsls	r2, r3
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	4013      	ands	r3, r2
 8002862:	2b00      	cmp	r3, #0
 8002864:	d01a      	beq.n	800289c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f003 0304 	and.w	r3, r3, #4
 8002870:	2b00      	cmp	r3, #0
 8002872:	d013      	beq.n	800289c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f022 0204 	bic.w	r2, r2, #4
 8002882:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002888:	2208      	movs	r2, #8
 800288a:	409a      	lsls	r2, r3
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002894:	f043 0201 	orr.w	r2, r3, #1
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028a0:	2201      	movs	r2, #1
 80028a2:	409a      	lsls	r2, r3
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	4013      	ands	r3, r2
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d012      	beq.n	80028d2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	695b      	ldr	r3, [r3, #20]
 80028b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d00b      	beq.n	80028d2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028be:	2201      	movs	r2, #1
 80028c0:	409a      	lsls	r2, r3
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028ca:	f043 0202 	orr.w	r2, r3, #2
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028d6:	2204      	movs	r2, #4
 80028d8:	409a      	lsls	r2, r3
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	4013      	ands	r3, r2
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d012      	beq.n	8002908 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f003 0302 	and.w	r3, r3, #2
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d00b      	beq.n	8002908 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028f4:	2204      	movs	r2, #4
 80028f6:	409a      	lsls	r2, r3
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002900:	f043 0204 	orr.w	r2, r3, #4
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800290c:	2210      	movs	r2, #16
 800290e:	409a      	lsls	r2, r3
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	4013      	ands	r3, r2
 8002914:	2b00      	cmp	r3, #0
 8002916:	d043      	beq.n	80029a0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 0308 	and.w	r3, r3, #8
 8002922:	2b00      	cmp	r3, #0
 8002924:	d03c      	beq.n	80029a0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800292a:	2210      	movs	r2, #16
 800292c:	409a      	lsls	r2, r3
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800293c:	2b00      	cmp	r3, #0
 800293e:	d018      	beq.n	8002972 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800294a:	2b00      	cmp	r3, #0
 800294c:	d108      	bne.n	8002960 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002952:	2b00      	cmp	r3, #0
 8002954:	d024      	beq.n	80029a0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295a:	6878      	ldr	r0, [r7, #4]
 800295c:	4798      	blx	r3
 800295e:	e01f      	b.n	80029a0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002964:	2b00      	cmp	r3, #0
 8002966:	d01b      	beq.n	80029a0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800296c:	6878      	ldr	r0, [r7, #4]
 800296e:	4798      	blx	r3
 8002970:	e016      	b.n	80029a0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800297c:	2b00      	cmp	r3, #0
 800297e:	d107      	bne.n	8002990 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f022 0208 	bic.w	r2, r2, #8
 800298e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002994:	2b00      	cmp	r3, #0
 8002996:	d003      	beq.n	80029a0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299c:	6878      	ldr	r0, [r7, #4]
 800299e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029a4:	2220      	movs	r2, #32
 80029a6:	409a      	lsls	r2, r3
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	4013      	ands	r3, r2
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	f000 808f 	beq.w	8002ad0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f003 0310 	and.w	r3, r3, #16
 80029bc:	2b00      	cmp	r3, #0
 80029be:	f000 8087 	beq.w	8002ad0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029c6:	2220      	movs	r2, #32
 80029c8:	409a      	lsls	r2, r3
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80029d4:	b2db      	uxtb	r3, r3
 80029d6:	2b05      	cmp	r3, #5
 80029d8:	d136      	bne.n	8002a48 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	681a      	ldr	r2, [r3, #0]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f022 0216 	bic.w	r2, r2, #22
 80029e8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	695a      	ldr	r2, [r3, #20]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80029f8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d103      	bne.n	8002a0a <HAL_DMA_IRQHandler+0x1da>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d007      	beq.n	8002a1a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f022 0208 	bic.w	r2, r2, #8
 8002a18:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a1e:	223f      	movs	r2, #63	; 0x3f
 8002a20:	409a      	lsls	r2, r3
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2201      	movs	r2, #1
 8002a2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2200      	movs	r2, #0
 8002a32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d07e      	beq.n	8002b3c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a42:	6878      	ldr	r0, [r7, #4]
 8002a44:	4798      	blx	r3
        }
        return;
 8002a46:	e079      	b.n	8002b3c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d01d      	beq.n	8002a92 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d10d      	bne.n	8002a80 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d031      	beq.n	8002ad0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a70:	6878      	ldr	r0, [r7, #4]
 8002a72:	4798      	blx	r3
 8002a74:	e02c      	b.n	8002ad0 <HAL_DMA_IRQHandler+0x2a0>
 8002a76:	bf00      	nop
 8002a78:	20000000 	.word	0x20000000
 8002a7c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d023      	beq.n	8002ad0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a8c:	6878      	ldr	r0, [r7, #4]
 8002a8e:	4798      	blx	r3
 8002a90:	e01e      	b.n	8002ad0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d10f      	bne.n	8002ac0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f022 0210 	bic.w	r2, r2, #16
 8002aae:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2200      	movs	r2, #0
 8002abc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d003      	beq.n	8002ad0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002acc:	6878      	ldr	r0, [r7, #4]
 8002ace:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d032      	beq.n	8002b3e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002adc:	f003 0301 	and.w	r3, r3, #1
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d022      	beq.n	8002b2a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2205      	movs	r2, #5
 8002ae8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f022 0201 	bic.w	r2, r2, #1
 8002afa:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	3301      	adds	r3, #1
 8002b00:	60bb      	str	r3, [r7, #8]
 8002b02:	697a      	ldr	r2, [r7, #20]
 8002b04:	429a      	cmp	r2, r3
 8002b06:	d307      	bcc.n	8002b18 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 0301 	and.w	r3, r3, #1
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d1f2      	bne.n	8002afc <HAL_DMA_IRQHandler+0x2cc>
 8002b16:	e000      	b.n	8002b1a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002b18:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2200      	movs	r2, #0
 8002b26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d005      	beq.n	8002b3e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b36:	6878      	ldr	r0, [r7, #4]
 8002b38:	4798      	blx	r3
 8002b3a:	e000      	b.n	8002b3e <HAL_DMA_IRQHandler+0x30e>
        return;
 8002b3c:	bf00      	nop
    }
  }
}
 8002b3e:	3718      	adds	r7, #24
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}

08002b44 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b085      	sub	sp, #20
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	60f8      	str	r0, [r7, #12]
 8002b4c:	60b9      	str	r1, [r7, #8]
 8002b4e:	607a      	str	r2, [r7, #4]
 8002b50:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	681a      	ldr	r2, [r3, #0]
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002b60:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	683a      	ldr	r2, [r7, #0]
 8002b68:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	2b40      	cmp	r3, #64	; 0x40
 8002b70:	d108      	bne.n	8002b84 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	687a      	ldr	r2, [r7, #4]
 8002b78:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	68ba      	ldr	r2, [r7, #8]
 8002b80:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002b82:	e007      	b.n	8002b94 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	68ba      	ldr	r2, [r7, #8]
 8002b8a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	687a      	ldr	r2, [r7, #4]
 8002b92:	60da      	str	r2, [r3, #12]
}
 8002b94:	bf00      	nop
 8002b96:	3714      	adds	r7, #20
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9e:	4770      	bx	lr

08002ba0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b085      	sub	sp, #20
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	3b10      	subs	r3, #16
 8002bb0:	4a13      	ldr	r2, [pc, #76]	; (8002c00 <DMA_CalcBaseAndBitshift+0x60>)
 8002bb2:	fba2 2303 	umull	r2, r3, r2, r3
 8002bb6:	091b      	lsrs	r3, r3, #4
 8002bb8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002bba:	4a12      	ldr	r2, [pc, #72]	; (8002c04 <DMA_CalcBaseAndBitshift+0x64>)
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	4413      	add	r3, r2
 8002bc0:	781b      	ldrb	r3, [r3, #0]
 8002bc2:	461a      	mov	r2, r3
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2b03      	cmp	r3, #3
 8002bcc:	d908      	bls.n	8002be0 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	461a      	mov	r2, r3
 8002bd4:	4b0c      	ldr	r3, [pc, #48]	; (8002c08 <DMA_CalcBaseAndBitshift+0x68>)
 8002bd6:	4013      	ands	r3, r2
 8002bd8:	1d1a      	adds	r2, r3, #4
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	659a      	str	r2, [r3, #88]	; 0x58
 8002bde:	e006      	b.n	8002bee <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	461a      	mov	r2, r3
 8002be6:	4b08      	ldr	r3, [pc, #32]	; (8002c08 <DMA_CalcBaseAndBitshift+0x68>)
 8002be8:	4013      	ands	r3, r2
 8002bea:	687a      	ldr	r2, [r7, #4]
 8002bec:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3714      	adds	r7, #20
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfc:	4770      	bx	lr
 8002bfe:	bf00      	nop
 8002c00:	aaaaaaab 	.word	0xaaaaaaab
 8002c04:	080070d8 	.word	0x080070d8
 8002c08:	fffffc00 	.word	0xfffffc00

08002c0c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b085      	sub	sp, #20
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c14:	2300      	movs	r3, #0
 8002c16:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c1c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	699b      	ldr	r3, [r3, #24]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d11f      	bne.n	8002c66 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	2b03      	cmp	r3, #3
 8002c2a:	d856      	bhi.n	8002cda <DMA_CheckFifoParam+0xce>
 8002c2c:	a201      	add	r2, pc, #4	; (adr r2, 8002c34 <DMA_CheckFifoParam+0x28>)
 8002c2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c32:	bf00      	nop
 8002c34:	08002c45 	.word	0x08002c45
 8002c38:	08002c57 	.word	0x08002c57
 8002c3c:	08002c45 	.word	0x08002c45
 8002c40:	08002cdb 	.word	0x08002cdb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c48:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d046      	beq.n	8002cde <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c54:	e043      	b.n	8002cde <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c5a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002c5e:	d140      	bne.n	8002ce2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002c60:	2301      	movs	r3, #1
 8002c62:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c64:	e03d      	b.n	8002ce2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	699b      	ldr	r3, [r3, #24]
 8002c6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c6e:	d121      	bne.n	8002cb4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	2b03      	cmp	r3, #3
 8002c74:	d837      	bhi.n	8002ce6 <DMA_CheckFifoParam+0xda>
 8002c76:	a201      	add	r2, pc, #4	; (adr r2, 8002c7c <DMA_CheckFifoParam+0x70>)
 8002c78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c7c:	08002c8d 	.word	0x08002c8d
 8002c80:	08002c93 	.word	0x08002c93
 8002c84:	08002c8d 	.word	0x08002c8d
 8002c88:	08002ca5 	.word	0x08002ca5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	73fb      	strb	r3, [r7, #15]
      break;
 8002c90:	e030      	b.n	8002cf4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c96:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d025      	beq.n	8002cea <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ca2:	e022      	b.n	8002cea <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ca8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002cac:	d11f      	bne.n	8002cee <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002cb2:	e01c      	b.n	8002cee <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	2b02      	cmp	r3, #2
 8002cb8:	d903      	bls.n	8002cc2 <DMA_CheckFifoParam+0xb6>
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	2b03      	cmp	r3, #3
 8002cbe:	d003      	beq.n	8002cc8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002cc0:	e018      	b.n	8002cf4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	73fb      	strb	r3, [r7, #15]
      break;
 8002cc6:	e015      	b.n	8002cf4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ccc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d00e      	beq.n	8002cf2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	73fb      	strb	r3, [r7, #15]
      break;
 8002cd8:	e00b      	b.n	8002cf2 <DMA_CheckFifoParam+0xe6>
      break;
 8002cda:	bf00      	nop
 8002cdc:	e00a      	b.n	8002cf4 <DMA_CheckFifoParam+0xe8>
      break;
 8002cde:	bf00      	nop
 8002ce0:	e008      	b.n	8002cf4 <DMA_CheckFifoParam+0xe8>
      break;
 8002ce2:	bf00      	nop
 8002ce4:	e006      	b.n	8002cf4 <DMA_CheckFifoParam+0xe8>
      break;
 8002ce6:	bf00      	nop
 8002ce8:	e004      	b.n	8002cf4 <DMA_CheckFifoParam+0xe8>
      break;
 8002cea:	bf00      	nop
 8002cec:	e002      	b.n	8002cf4 <DMA_CheckFifoParam+0xe8>
      break;   
 8002cee:	bf00      	nop
 8002cf0:	e000      	b.n	8002cf4 <DMA_CheckFifoParam+0xe8>
      break;
 8002cf2:	bf00      	nop
    }
  } 
  
  return status; 
 8002cf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	3714      	adds	r7, #20
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr
 8002d02:	bf00      	nop

08002d04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b089      	sub	sp, #36	; 0x24
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
 8002d0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002d12:	2300      	movs	r3, #0
 8002d14:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002d16:	2300      	movs	r3, #0
 8002d18:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002d1e:	2300      	movs	r3, #0
 8002d20:	61fb      	str	r3, [r7, #28]
 8002d22:	e175      	b.n	8003010 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002d24:	2201      	movs	r2, #1
 8002d26:	69fb      	ldr	r3, [r7, #28]
 8002d28:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	697a      	ldr	r2, [r7, #20]
 8002d34:	4013      	ands	r3, r2
 8002d36:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d38:	693a      	ldr	r2, [r7, #16]
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	429a      	cmp	r2, r3
 8002d3e:	f040 8164 	bne.w	800300a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	f003 0303 	and.w	r3, r3, #3
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d005      	beq.n	8002d5a <HAL_GPIO_Init+0x56>
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	f003 0303 	and.w	r3, r3, #3
 8002d56:	2b02      	cmp	r3, #2
 8002d58:	d130      	bne.n	8002dbc <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002d60:	69fb      	ldr	r3, [r7, #28]
 8002d62:	005b      	lsls	r3, r3, #1
 8002d64:	2203      	movs	r2, #3
 8002d66:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6a:	43db      	mvns	r3, r3
 8002d6c:	69ba      	ldr	r2, [r7, #24]
 8002d6e:	4013      	ands	r3, r2
 8002d70:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	68da      	ldr	r2, [r3, #12]
 8002d76:	69fb      	ldr	r3, [r7, #28]
 8002d78:	005b      	lsls	r3, r3, #1
 8002d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d7e:	69ba      	ldr	r2, [r7, #24]
 8002d80:	4313      	orrs	r3, r2
 8002d82:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	69ba      	ldr	r2, [r7, #24]
 8002d88:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d90:	2201      	movs	r2, #1
 8002d92:	69fb      	ldr	r3, [r7, #28]
 8002d94:	fa02 f303 	lsl.w	r3, r2, r3
 8002d98:	43db      	mvns	r3, r3
 8002d9a:	69ba      	ldr	r2, [r7, #24]
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	091b      	lsrs	r3, r3, #4
 8002da6:	f003 0201 	and.w	r2, r3, #1
 8002daa:	69fb      	ldr	r3, [r7, #28]
 8002dac:	fa02 f303 	lsl.w	r3, r2, r3
 8002db0:	69ba      	ldr	r2, [r7, #24]
 8002db2:	4313      	orrs	r3, r2
 8002db4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	69ba      	ldr	r2, [r7, #24]
 8002dba:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	f003 0303 	and.w	r3, r3, #3
 8002dc4:	2b03      	cmp	r3, #3
 8002dc6:	d017      	beq.n	8002df8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	68db      	ldr	r3, [r3, #12]
 8002dcc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002dce:	69fb      	ldr	r3, [r7, #28]
 8002dd0:	005b      	lsls	r3, r3, #1
 8002dd2:	2203      	movs	r2, #3
 8002dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd8:	43db      	mvns	r3, r3
 8002dda:	69ba      	ldr	r2, [r7, #24]
 8002ddc:	4013      	ands	r3, r2
 8002dde:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	689a      	ldr	r2, [r3, #8]
 8002de4:	69fb      	ldr	r3, [r7, #28]
 8002de6:	005b      	lsls	r3, r3, #1
 8002de8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dec:	69ba      	ldr	r2, [r7, #24]
 8002dee:	4313      	orrs	r3, r2
 8002df0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	69ba      	ldr	r2, [r7, #24]
 8002df6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	f003 0303 	and.w	r3, r3, #3
 8002e00:	2b02      	cmp	r3, #2
 8002e02:	d123      	bne.n	8002e4c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002e04:	69fb      	ldr	r3, [r7, #28]
 8002e06:	08da      	lsrs	r2, r3, #3
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	3208      	adds	r2, #8
 8002e0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002e12:	69fb      	ldr	r3, [r7, #28]
 8002e14:	f003 0307 	and.w	r3, r3, #7
 8002e18:	009b      	lsls	r3, r3, #2
 8002e1a:	220f      	movs	r2, #15
 8002e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e20:	43db      	mvns	r3, r3
 8002e22:	69ba      	ldr	r2, [r7, #24]
 8002e24:	4013      	ands	r3, r2
 8002e26:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	691a      	ldr	r2, [r3, #16]
 8002e2c:	69fb      	ldr	r3, [r7, #28]
 8002e2e:	f003 0307 	and.w	r3, r3, #7
 8002e32:	009b      	lsls	r3, r3, #2
 8002e34:	fa02 f303 	lsl.w	r3, r2, r3
 8002e38:	69ba      	ldr	r2, [r7, #24]
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002e3e:	69fb      	ldr	r3, [r7, #28]
 8002e40:	08da      	lsrs	r2, r3, #3
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	3208      	adds	r2, #8
 8002e46:	69b9      	ldr	r1, [r7, #24]
 8002e48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002e52:	69fb      	ldr	r3, [r7, #28]
 8002e54:	005b      	lsls	r3, r3, #1
 8002e56:	2203      	movs	r2, #3
 8002e58:	fa02 f303 	lsl.w	r3, r2, r3
 8002e5c:	43db      	mvns	r3, r3
 8002e5e:	69ba      	ldr	r2, [r7, #24]
 8002e60:	4013      	ands	r3, r2
 8002e62:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	f003 0203 	and.w	r2, r3, #3
 8002e6c:	69fb      	ldr	r3, [r7, #28]
 8002e6e:	005b      	lsls	r3, r3, #1
 8002e70:	fa02 f303 	lsl.w	r3, r2, r3
 8002e74:	69ba      	ldr	r2, [r7, #24]
 8002e76:	4313      	orrs	r3, r2
 8002e78:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	69ba      	ldr	r2, [r7, #24]
 8002e7e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	f000 80be 	beq.w	800300a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e8e:	4b66      	ldr	r3, [pc, #408]	; (8003028 <HAL_GPIO_Init+0x324>)
 8002e90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e92:	4a65      	ldr	r2, [pc, #404]	; (8003028 <HAL_GPIO_Init+0x324>)
 8002e94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e98:	6453      	str	r3, [r2, #68]	; 0x44
 8002e9a:	4b63      	ldr	r3, [pc, #396]	; (8003028 <HAL_GPIO_Init+0x324>)
 8002e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ea2:	60fb      	str	r3, [r7, #12]
 8002ea4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002ea6:	4a61      	ldr	r2, [pc, #388]	; (800302c <HAL_GPIO_Init+0x328>)
 8002ea8:	69fb      	ldr	r3, [r7, #28]
 8002eaa:	089b      	lsrs	r3, r3, #2
 8002eac:	3302      	adds	r3, #2
 8002eae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002eb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002eb4:	69fb      	ldr	r3, [r7, #28]
 8002eb6:	f003 0303 	and.w	r3, r3, #3
 8002eba:	009b      	lsls	r3, r3, #2
 8002ebc:	220f      	movs	r2, #15
 8002ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec2:	43db      	mvns	r3, r3
 8002ec4:	69ba      	ldr	r2, [r7, #24]
 8002ec6:	4013      	ands	r3, r2
 8002ec8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	4a58      	ldr	r2, [pc, #352]	; (8003030 <HAL_GPIO_Init+0x32c>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d037      	beq.n	8002f42 <HAL_GPIO_Init+0x23e>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	4a57      	ldr	r2, [pc, #348]	; (8003034 <HAL_GPIO_Init+0x330>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d031      	beq.n	8002f3e <HAL_GPIO_Init+0x23a>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	4a56      	ldr	r2, [pc, #344]	; (8003038 <HAL_GPIO_Init+0x334>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d02b      	beq.n	8002f3a <HAL_GPIO_Init+0x236>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	4a55      	ldr	r2, [pc, #340]	; (800303c <HAL_GPIO_Init+0x338>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d025      	beq.n	8002f36 <HAL_GPIO_Init+0x232>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	4a54      	ldr	r2, [pc, #336]	; (8003040 <HAL_GPIO_Init+0x33c>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d01f      	beq.n	8002f32 <HAL_GPIO_Init+0x22e>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	4a53      	ldr	r2, [pc, #332]	; (8003044 <HAL_GPIO_Init+0x340>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d019      	beq.n	8002f2e <HAL_GPIO_Init+0x22a>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	4a52      	ldr	r2, [pc, #328]	; (8003048 <HAL_GPIO_Init+0x344>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d013      	beq.n	8002f2a <HAL_GPIO_Init+0x226>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	4a51      	ldr	r2, [pc, #324]	; (800304c <HAL_GPIO_Init+0x348>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d00d      	beq.n	8002f26 <HAL_GPIO_Init+0x222>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	4a50      	ldr	r2, [pc, #320]	; (8003050 <HAL_GPIO_Init+0x34c>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d007      	beq.n	8002f22 <HAL_GPIO_Init+0x21e>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	4a4f      	ldr	r2, [pc, #316]	; (8003054 <HAL_GPIO_Init+0x350>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d101      	bne.n	8002f1e <HAL_GPIO_Init+0x21a>
 8002f1a:	2309      	movs	r3, #9
 8002f1c:	e012      	b.n	8002f44 <HAL_GPIO_Init+0x240>
 8002f1e:	230a      	movs	r3, #10
 8002f20:	e010      	b.n	8002f44 <HAL_GPIO_Init+0x240>
 8002f22:	2308      	movs	r3, #8
 8002f24:	e00e      	b.n	8002f44 <HAL_GPIO_Init+0x240>
 8002f26:	2307      	movs	r3, #7
 8002f28:	e00c      	b.n	8002f44 <HAL_GPIO_Init+0x240>
 8002f2a:	2306      	movs	r3, #6
 8002f2c:	e00a      	b.n	8002f44 <HAL_GPIO_Init+0x240>
 8002f2e:	2305      	movs	r3, #5
 8002f30:	e008      	b.n	8002f44 <HAL_GPIO_Init+0x240>
 8002f32:	2304      	movs	r3, #4
 8002f34:	e006      	b.n	8002f44 <HAL_GPIO_Init+0x240>
 8002f36:	2303      	movs	r3, #3
 8002f38:	e004      	b.n	8002f44 <HAL_GPIO_Init+0x240>
 8002f3a:	2302      	movs	r3, #2
 8002f3c:	e002      	b.n	8002f44 <HAL_GPIO_Init+0x240>
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e000      	b.n	8002f44 <HAL_GPIO_Init+0x240>
 8002f42:	2300      	movs	r3, #0
 8002f44:	69fa      	ldr	r2, [r7, #28]
 8002f46:	f002 0203 	and.w	r2, r2, #3
 8002f4a:	0092      	lsls	r2, r2, #2
 8002f4c:	4093      	lsls	r3, r2
 8002f4e:	69ba      	ldr	r2, [r7, #24]
 8002f50:	4313      	orrs	r3, r2
 8002f52:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002f54:	4935      	ldr	r1, [pc, #212]	; (800302c <HAL_GPIO_Init+0x328>)
 8002f56:	69fb      	ldr	r3, [r7, #28]
 8002f58:	089b      	lsrs	r3, r3, #2
 8002f5a:	3302      	adds	r3, #2
 8002f5c:	69ba      	ldr	r2, [r7, #24]
 8002f5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f62:	4b3d      	ldr	r3, [pc, #244]	; (8003058 <HAL_GPIO_Init+0x354>)
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	43db      	mvns	r3, r3
 8002f6c:	69ba      	ldr	r2, [r7, #24]
 8002f6e:	4013      	ands	r3, r2
 8002f70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d003      	beq.n	8002f86 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002f7e:	69ba      	ldr	r2, [r7, #24]
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	4313      	orrs	r3, r2
 8002f84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f86:	4a34      	ldr	r2, [pc, #208]	; (8003058 <HAL_GPIO_Init+0x354>)
 8002f88:	69bb      	ldr	r3, [r7, #24]
 8002f8a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f8c:	4b32      	ldr	r3, [pc, #200]	; (8003058 <HAL_GPIO_Init+0x354>)
 8002f8e:	68db      	ldr	r3, [r3, #12]
 8002f90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	43db      	mvns	r3, r3
 8002f96:	69ba      	ldr	r2, [r7, #24]
 8002f98:	4013      	ands	r3, r2
 8002f9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d003      	beq.n	8002fb0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002fa8:	69ba      	ldr	r2, [r7, #24]
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	4313      	orrs	r3, r2
 8002fae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002fb0:	4a29      	ldr	r2, [pc, #164]	; (8003058 <HAL_GPIO_Init+0x354>)
 8002fb2:	69bb      	ldr	r3, [r7, #24]
 8002fb4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002fb6:	4b28      	ldr	r3, [pc, #160]	; (8003058 <HAL_GPIO_Init+0x354>)
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	43db      	mvns	r3, r3
 8002fc0:	69ba      	ldr	r2, [r7, #24]
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d003      	beq.n	8002fda <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002fd2:	69ba      	ldr	r2, [r7, #24]
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002fda:	4a1f      	ldr	r2, [pc, #124]	; (8003058 <HAL_GPIO_Init+0x354>)
 8002fdc:	69bb      	ldr	r3, [r7, #24]
 8002fde:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002fe0:	4b1d      	ldr	r3, [pc, #116]	; (8003058 <HAL_GPIO_Init+0x354>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	43db      	mvns	r3, r3
 8002fea:	69ba      	ldr	r2, [r7, #24]
 8002fec:	4013      	ands	r3, r2
 8002fee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d003      	beq.n	8003004 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002ffc:	69ba      	ldr	r2, [r7, #24]
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	4313      	orrs	r3, r2
 8003002:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003004:	4a14      	ldr	r2, [pc, #80]	; (8003058 <HAL_GPIO_Init+0x354>)
 8003006:	69bb      	ldr	r3, [r7, #24]
 8003008:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800300a:	69fb      	ldr	r3, [r7, #28]
 800300c:	3301      	adds	r3, #1
 800300e:	61fb      	str	r3, [r7, #28]
 8003010:	69fb      	ldr	r3, [r7, #28]
 8003012:	2b0f      	cmp	r3, #15
 8003014:	f67f ae86 	bls.w	8002d24 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003018:	bf00      	nop
 800301a:	bf00      	nop
 800301c:	3724      	adds	r7, #36	; 0x24
 800301e:	46bd      	mov	sp, r7
 8003020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003024:	4770      	bx	lr
 8003026:	bf00      	nop
 8003028:	40023800 	.word	0x40023800
 800302c:	40013800 	.word	0x40013800
 8003030:	40020000 	.word	0x40020000
 8003034:	40020400 	.word	0x40020400
 8003038:	40020800 	.word	0x40020800
 800303c:	40020c00 	.word	0x40020c00
 8003040:	40021000 	.word	0x40021000
 8003044:	40021400 	.word	0x40021400
 8003048:	40021800 	.word	0x40021800
 800304c:	40021c00 	.word	0x40021c00
 8003050:	40022000 	.word	0x40022000
 8003054:	40022400 	.word	0x40022400
 8003058:	40013c00 	.word	0x40013c00

0800305c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800305c:	b480      	push	{r7}
 800305e:	b083      	sub	sp, #12
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
 8003064:	460b      	mov	r3, r1
 8003066:	807b      	strh	r3, [r7, #2]
 8003068:	4613      	mov	r3, r2
 800306a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800306c:	787b      	ldrb	r3, [r7, #1]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d003      	beq.n	800307a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003072:	887a      	ldrh	r2, [r7, #2]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003078:	e003      	b.n	8003082 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800307a:	887b      	ldrh	r3, [r7, #2]
 800307c:	041a      	lsls	r2, r3, #16
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	619a      	str	r2, [r3, #24]
}
 8003082:	bf00      	nop
 8003084:	370c      	adds	r7, #12
 8003086:	46bd      	mov	sp, r7
 8003088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308c:	4770      	bx	lr

0800308e <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800308e:	b480      	push	{r7}
 8003090:	b085      	sub	sp, #20
 8003092:	af00      	add	r7, sp, #0
 8003094:	6078      	str	r0, [r7, #4]
 8003096:	460b      	mov	r3, r1
 8003098:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	695b      	ldr	r3, [r3, #20]
 800309e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80030a0:	887a      	ldrh	r2, [r7, #2]
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	4013      	ands	r3, r2
 80030a6:	041a      	lsls	r2, r3, #16
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	43d9      	mvns	r1, r3
 80030ac:	887b      	ldrh	r3, [r7, #2]
 80030ae:	400b      	ands	r3, r1
 80030b0:	431a      	orrs	r2, r3
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	619a      	str	r2, [r3, #24]
}
 80030b6:	bf00      	nop
 80030b8:	3714      	adds	r7, #20
 80030ba:	46bd      	mov	sp, r7
 80030bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c0:	4770      	bx	lr
	...

080030c4 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80030c4:	b480      	push	{r7}
 80030c6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80030c8:	4b05      	ldr	r3, [pc, #20]	; (80030e0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a04      	ldr	r2, [pc, #16]	; (80030e0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80030ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030d2:	6013      	str	r3, [r2, #0]
}
 80030d4:	bf00      	nop
 80030d6:	46bd      	mov	sp, r7
 80030d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030dc:	4770      	bx	lr
 80030de:	bf00      	nop
 80030e0:	40007000 	.word	0x40007000

080030e4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b082      	sub	sp, #8
 80030e8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80030ea:	2300      	movs	r3, #0
 80030ec:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80030ee:	4b23      	ldr	r3, [pc, #140]	; (800317c <HAL_PWREx_EnableOverDrive+0x98>)
 80030f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f2:	4a22      	ldr	r2, [pc, #136]	; (800317c <HAL_PWREx_EnableOverDrive+0x98>)
 80030f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030f8:	6413      	str	r3, [r2, #64]	; 0x40
 80030fa:	4b20      	ldr	r3, [pc, #128]	; (800317c <HAL_PWREx_EnableOverDrive+0x98>)
 80030fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003102:	603b      	str	r3, [r7, #0]
 8003104:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003106:	4b1e      	ldr	r3, [pc, #120]	; (8003180 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a1d      	ldr	r2, [pc, #116]	; (8003180 <HAL_PWREx_EnableOverDrive+0x9c>)
 800310c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003110:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003112:	f7fe fb63 	bl	80017dc <HAL_GetTick>
 8003116:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003118:	e009      	b.n	800312e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800311a:	f7fe fb5f 	bl	80017dc <HAL_GetTick>
 800311e:	4602      	mov	r2, r0
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	1ad3      	subs	r3, r2, r3
 8003124:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003128:	d901      	bls.n	800312e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800312a:	2303      	movs	r3, #3
 800312c:	e022      	b.n	8003174 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800312e:	4b14      	ldr	r3, [pc, #80]	; (8003180 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003136:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800313a:	d1ee      	bne.n	800311a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800313c:	4b10      	ldr	r3, [pc, #64]	; (8003180 <HAL_PWREx_EnableOverDrive+0x9c>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a0f      	ldr	r2, [pc, #60]	; (8003180 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003142:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003146:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003148:	f7fe fb48 	bl	80017dc <HAL_GetTick>
 800314c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800314e:	e009      	b.n	8003164 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003150:	f7fe fb44 	bl	80017dc <HAL_GetTick>
 8003154:	4602      	mov	r2, r0
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	1ad3      	subs	r3, r2, r3
 800315a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800315e:	d901      	bls.n	8003164 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003160:	2303      	movs	r3, #3
 8003162:	e007      	b.n	8003174 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003164:	4b06      	ldr	r3, [pc, #24]	; (8003180 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800316c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003170:	d1ee      	bne.n	8003150 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003172:	2300      	movs	r3, #0
}
 8003174:	4618      	mov	r0, r3
 8003176:	3708      	adds	r7, #8
 8003178:	46bd      	mov	sp, r7
 800317a:	bd80      	pop	{r7, pc}
 800317c:	40023800 	.word	0x40023800
 8003180:	40007000 	.word	0x40007000

08003184 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b086      	sub	sp, #24
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800318c:	2300      	movs	r3, #0
 800318e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d101      	bne.n	800319a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e29b      	b.n	80036d2 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f003 0301 	and.w	r3, r3, #1
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	f000 8087 	beq.w	80032b6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80031a8:	4b96      	ldr	r3, [pc, #600]	; (8003404 <HAL_RCC_OscConfig+0x280>)
 80031aa:	689b      	ldr	r3, [r3, #8]
 80031ac:	f003 030c 	and.w	r3, r3, #12
 80031b0:	2b04      	cmp	r3, #4
 80031b2:	d00c      	beq.n	80031ce <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031b4:	4b93      	ldr	r3, [pc, #588]	; (8003404 <HAL_RCC_OscConfig+0x280>)
 80031b6:	689b      	ldr	r3, [r3, #8]
 80031b8:	f003 030c 	and.w	r3, r3, #12
 80031bc:	2b08      	cmp	r3, #8
 80031be:	d112      	bne.n	80031e6 <HAL_RCC_OscConfig+0x62>
 80031c0:	4b90      	ldr	r3, [pc, #576]	; (8003404 <HAL_RCC_OscConfig+0x280>)
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031cc:	d10b      	bne.n	80031e6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031ce:	4b8d      	ldr	r3, [pc, #564]	; (8003404 <HAL_RCC_OscConfig+0x280>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d06c      	beq.n	80032b4 <HAL_RCC_OscConfig+0x130>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d168      	bne.n	80032b4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	e275      	b.n	80036d2 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031ee:	d106      	bne.n	80031fe <HAL_RCC_OscConfig+0x7a>
 80031f0:	4b84      	ldr	r3, [pc, #528]	; (8003404 <HAL_RCC_OscConfig+0x280>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a83      	ldr	r2, [pc, #524]	; (8003404 <HAL_RCC_OscConfig+0x280>)
 80031f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031fa:	6013      	str	r3, [r2, #0]
 80031fc:	e02e      	b.n	800325c <HAL_RCC_OscConfig+0xd8>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d10c      	bne.n	8003220 <HAL_RCC_OscConfig+0x9c>
 8003206:	4b7f      	ldr	r3, [pc, #508]	; (8003404 <HAL_RCC_OscConfig+0x280>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a7e      	ldr	r2, [pc, #504]	; (8003404 <HAL_RCC_OscConfig+0x280>)
 800320c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003210:	6013      	str	r3, [r2, #0]
 8003212:	4b7c      	ldr	r3, [pc, #496]	; (8003404 <HAL_RCC_OscConfig+0x280>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a7b      	ldr	r2, [pc, #492]	; (8003404 <HAL_RCC_OscConfig+0x280>)
 8003218:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800321c:	6013      	str	r3, [r2, #0]
 800321e:	e01d      	b.n	800325c <HAL_RCC_OscConfig+0xd8>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003228:	d10c      	bne.n	8003244 <HAL_RCC_OscConfig+0xc0>
 800322a:	4b76      	ldr	r3, [pc, #472]	; (8003404 <HAL_RCC_OscConfig+0x280>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a75      	ldr	r2, [pc, #468]	; (8003404 <HAL_RCC_OscConfig+0x280>)
 8003230:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003234:	6013      	str	r3, [r2, #0]
 8003236:	4b73      	ldr	r3, [pc, #460]	; (8003404 <HAL_RCC_OscConfig+0x280>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a72      	ldr	r2, [pc, #456]	; (8003404 <HAL_RCC_OscConfig+0x280>)
 800323c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003240:	6013      	str	r3, [r2, #0]
 8003242:	e00b      	b.n	800325c <HAL_RCC_OscConfig+0xd8>
 8003244:	4b6f      	ldr	r3, [pc, #444]	; (8003404 <HAL_RCC_OscConfig+0x280>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a6e      	ldr	r2, [pc, #440]	; (8003404 <HAL_RCC_OscConfig+0x280>)
 800324a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800324e:	6013      	str	r3, [r2, #0]
 8003250:	4b6c      	ldr	r3, [pc, #432]	; (8003404 <HAL_RCC_OscConfig+0x280>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a6b      	ldr	r2, [pc, #428]	; (8003404 <HAL_RCC_OscConfig+0x280>)
 8003256:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800325a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d013      	beq.n	800328c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003264:	f7fe faba 	bl	80017dc <HAL_GetTick>
 8003268:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800326a:	e008      	b.n	800327e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800326c:	f7fe fab6 	bl	80017dc <HAL_GetTick>
 8003270:	4602      	mov	r2, r0
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	1ad3      	subs	r3, r2, r3
 8003276:	2b64      	cmp	r3, #100	; 0x64
 8003278:	d901      	bls.n	800327e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800327a:	2303      	movs	r3, #3
 800327c:	e229      	b.n	80036d2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800327e:	4b61      	ldr	r3, [pc, #388]	; (8003404 <HAL_RCC_OscConfig+0x280>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003286:	2b00      	cmp	r3, #0
 8003288:	d0f0      	beq.n	800326c <HAL_RCC_OscConfig+0xe8>
 800328a:	e014      	b.n	80032b6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800328c:	f7fe faa6 	bl	80017dc <HAL_GetTick>
 8003290:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003292:	e008      	b.n	80032a6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003294:	f7fe faa2 	bl	80017dc <HAL_GetTick>
 8003298:	4602      	mov	r2, r0
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	1ad3      	subs	r3, r2, r3
 800329e:	2b64      	cmp	r3, #100	; 0x64
 80032a0:	d901      	bls.n	80032a6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80032a2:	2303      	movs	r3, #3
 80032a4:	e215      	b.n	80036d2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032a6:	4b57      	ldr	r3, [pc, #348]	; (8003404 <HAL_RCC_OscConfig+0x280>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d1f0      	bne.n	8003294 <HAL_RCC_OscConfig+0x110>
 80032b2:	e000      	b.n	80032b6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f003 0302 	and.w	r3, r3, #2
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d069      	beq.n	8003396 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80032c2:	4b50      	ldr	r3, [pc, #320]	; (8003404 <HAL_RCC_OscConfig+0x280>)
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	f003 030c 	and.w	r3, r3, #12
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d00b      	beq.n	80032e6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032ce:	4b4d      	ldr	r3, [pc, #308]	; (8003404 <HAL_RCC_OscConfig+0x280>)
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	f003 030c 	and.w	r3, r3, #12
 80032d6:	2b08      	cmp	r3, #8
 80032d8:	d11c      	bne.n	8003314 <HAL_RCC_OscConfig+0x190>
 80032da:	4b4a      	ldr	r3, [pc, #296]	; (8003404 <HAL_RCC_OscConfig+0x280>)
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d116      	bne.n	8003314 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032e6:	4b47      	ldr	r3, [pc, #284]	; (8003404 <HAL_RCC_OscConfig+0x280>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f003 0302 	and.w	r3, r3, #2
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d005      	beq.n	80032fe <HAL_RCC_OscConfig+0x17a>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	68db      	ldr	r3, [r3, #12]
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	d001      	beq.n	80032fe <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	e1e9      	b.n	80036d2 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032fe:	4b41      	ldr	r3, [pc, #260]	; (8003404 <HAL_RCC_OscConfig+0x280>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	691b      	ldr	r3, [r3, #16]
 800330a:	00db      	lsls	r3, r3, #3
 800330c:	493d      	ldr	r1, [pc, #244]	; (8003404 <HAL_RCC_OscConfig+0x280>)
 800330e:	4313      	orrs	r3, r2
 8003310:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003312:	e040      	b.n	8003396 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	68db      	ldr	r3, [r3, #12]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d023      	beq.n	8003364 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800331c:	4b39      	ldr	r3, [pc, #228]	; (8003404 <HAL_RCC_OscConfig+0x280>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a38      	ldr	r2, [pc, #224]	; (8003404 <HAL_RCC_OscConfig+0x280>)
 8003322:	f043 0301 	orr.w	r3, r3, #1
 8003326:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003328:	f7fe fa58 	bl	80017dc <HAL_GetTick>
 800332c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800332e:	e008      	b.n	8003342 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003330:	f7fe fa54 	bl	80017dc <HAL_GetTick>
 8003334:	4602      	mov	r2, r0
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	1ad3      	subs	r3, r2, r3
 800333a:	2b02      	cmp	r3, #2
 800333c:	d901      	bls.n	8003342 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800333e:	2303      	movs	r3, #3
 8003340:	e1c7      	b.n	80036d2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003342:	4b30      	ldr	r3, [pc, #192]	; (8003404 <HAL_RCC_OscConfig+0x280>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f003 0302 	and.w	r3, r3, #2
 800334a:	2b00      	cmp	r3, #0
 800334c:	d0f0      	beq.n	8003330 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800334e:	4b2d      	ldr	r3, [pc, #180]	; (8003404 <HAL_RCC_OscConfig+0x280>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	691b      	ldr	r3, [r3, #16]
 800335a:	00db      	lsls	r3, r3, #3
 800335c:	4929      	ldr	r1, [pc, #164]	; (8003404 <HAL_RCC_OscConfig+0x280>)
 800335e:	4313      	orrs	r3, r2
 8003360:	600b      	str	r3, [r1, #0]
 8003362:	e018      	b.n	8003396 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003364:	4b27      	ldr	r3, [pc, #156]	; (8003404 <HAL_RCC_OscConfig+0x280>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a26      	ldr	r2, [pc, #152]	; (8003404 <HAL_RCC_OscConfig+0x280>)
 800336a:	f023 0301 	bic.w	r3, r3, #1
 800336e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003370:	f7fe fa34 	bl	80017dc <HAL_GetTick>
 8003374:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003376:	e008      	b.n	800338a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003378:	f7fe fa30 	bl	80017dc <HAL_GetTick>
 800337c:	4602      	mov	r2, r0
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	1ad3      	subs	r3, r2, r3
 8003382:	2b02      	cmp	r3, #2
 8003384:	d901      	bls.n	800338a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003386:	2303      	movs	r3, #3
 8003388:	e1a3      	b.n	80036d2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800338a:	4b1e      	ldr	r3, [pc, #120]	; (8003404 <HAL_RCC_OscConfig+0x280>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 0302 	and.w	r3, r3, #2
 8003392:	2b00      	cmp	r3, #0
 8003394:	d1f0      	bne.n	8003378 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f003 0308 	and.w	r3, r3, #8
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d038      	beq.n	8003414 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	695b      	ldr	r3, [r3, #20]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d019      	beq.n	80033de <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033aa:	4b16      	ldr	r3, [pc, #88]	; (8003404 <HAL_RCC_OscConfig+0x280>)
 80033ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033ae:	4a15      	ldr	r2, [pc, #84]	; (8003404 <HAL_RCC_OscConfig+0x280>)
 80033b0:	f043 0301 	orr.w	r3, r3, #1
 80033b4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033b6:	f7fe fa11 	bl	80017dc <HAL_GetTick>
 80033ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033bc:	e008      	b.n	80033d0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033be:	f7fe fa0d 	bl	80017dc <HAL_GetTick>
 80033c2:	4602      	mov	r2, r0
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	1ad3      	subs	r3, r2, r3
 80033c8:	2b02      	cmp	r3, #2
 80033ca:	d901      	bls.n	80033d0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80033cc:	2303      	movs	r3, #3
 80033ce:	e180      	b.n	80036d2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033d0:	4b0c      	ldr	r3, [pc, #48]	; (8003404 <HAL_RCC_OscConfig+0x280>)
 80033d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033d4:	f003 0302 	and.w	r3, r3, #2
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d0f0      	beq.n	80033be <HAL_RCC_OscConfig+0x23a>
 80033dc:	e01a      	b.n	8003414 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033de:	4b09      	ldr	r3, [pc, #36]	; (8003404 <HAL_RCC_OscConfig+0x280>)
 80033e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033e2:	4a08      	ldr	r2, [pc, #32]	; (8003404 <HAL_RCC_OscConfig+0x280>)
 80033e4:	f023 0301 	bic.w	r3, r3, #1
 80033e8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033ea:	f7fe f9f7 	bl	80017dc <HAL_GetTick>
 80033ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033f0:	e00a      	b.n	8003408 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033f2:	f7fe f9f3 	bl	80017dc <HAL_GetTick>
 80033f6:	4602      	mov	r2, r0
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	1ad3      	subs	r3, r2, r3
 80033fc:	2b02      	cmp	r3, #2
 80033fe:	d903      	bls.n	8003408 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003400:	2303      	movs	r3, #3
 8003402:	e166      	b.n	80036d2 <HAL_RCC_OscConfig+0x54e>
 8003404:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003408:	4b92      	ldr	r3, [pc, #584]	; (8003654 <HAL_RCC_OscConfig+0x4d0>)
 800340a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800340c:	f003 0302 	and.w	r3, r3, #2
 8003410:	2b00      	cmp	r3, #0
 8003412:	d1ee      	bne.n	80033f2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f003 0304 	and.w	r3, r3, #4
 800341c:	2b00      	cmp	r3, #0
 800341e:	f000 80a4 	beq.w	800356a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003422:	4b8c      	ldr	r3, [pc, #560]	; (8003654 <HAL_RCC_OscConfig+0x4d0>)
 8003424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003426:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800342a:	2b00      	cmp	r3, #0
 800342c:	d10d      	bne.n	800344a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800342e:	4b89      	ldr	r3, [pc, #548]	; (8003654 <HAL_RCC_OscConfig+0x4d0>)
 8003430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003432:	4a88      	ldr	r2, [pc, #544]	; (8003654 <HAL_RCC_OscConfig+0x4d0>)
 8003434:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003438:	6413      	str	r3, [r2, #64]	; 0x40
 800343a:	4b86      	ldr	r3, [pc, #536]	; (8003654 <HAL_RCC_OscConfig+0x4d0>)
 800343c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003442:	60bb      	str	r3, [r7, #8]
 8003444:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003446:	2301      	movs	r3, #1
 8003448:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800344a:	4b83      	ldr	r3, [pc, #524]	; (8003658 <HAL_RCC_OscConfig+0x4d4>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003452:	2b00      	cmp	r3, #0
 8003454:	d118      	bne.n	8003488 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003456:	4b80      	ldr	r3, [pc, #512]	; (8003658 <HAL_RCC_OscConfig+0x4d4>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a7f      	ldr	r2, [pc, #508]	; (8003658 <HAL_RCC_OscConfig+0x4d4>)
 800345c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003460:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003462:	f7fe f9bb 	bl	80017dc <HAL_GetTick>
 8003466:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003468:	e008      	b.n	800347c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800346a:	f7fe f9b7 	bl	80017dc <HAL_GetTick>
 800346e:	4602      	mov	r2, r0
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	1ad3      	subs	r3, r2, r3
 8003474:	2b64      	cmp	r3, #100	; 0x64
 8003476:	d901      	bls.n	800347c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003478:	2303      	movs	r3, #3
 800347a:	e12a      	b.n	80036d2 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800347c:	4b76      	ldr	r3, [pc, #472]	; (8003658 <HAL_RCC_OscConfig+0x4d4>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003484:	2b00      	cmp	r3, #0
 8003486:	d0f0      	beq.n	800346a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	2b01      	cmp	r3, #1
 800348e:	d106      	bne.n	800349e <HAL_RCC_OscConfig+0x31a>
 8003490:	4b70      	ldr	r3, [pc, #448]	; (8003654 <HAL_RCC_OscConfig+0x4d0>)
 8003492:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003494:	4a6f      	ldr	r2, [pc, #444]	; (8003654 <HAL_RCC_OscConfig+0x4d0>)
 8003496:	f043 0301 	orr.w	r3, r3, #1
 800349a:	6713      	str	r3, [r2, #112]	; 0x70
 800349c:	e02d      	b.n	80034fa <HAL_RCC_OscConfig+0x376>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d10c      	bne.n	80034c0 <HAL_RCC_OscConfig+0x33c>
 80034a6:	4b6b      	ldr	r3, [pc, #428]	; (8003654 <HAL_RCC_OscConfig+0x4d0>)
 80034a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034aa:	4a6a      	ldr	r2, [pc, #424]	; (8003654 <HAL_RCC_OscConfig+0x4d0>)
 80034ac:	f023 0301 	bic.w	r3, r3, #1
 80034b0:	6713      	str	r3, [r2, #112]	; 0x70
 80034b2:	4b68      	ldr	r3, [pc, #416]	; (8003654 <HAL_RCC_OscConfig+0x4d0>)
 80034b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034b6:	4a67      	ldr	r2, [pc, #412]	; (8003654 <HAL_RCC_OscConfig+0x4d0>)
 80034b8:	f023 0304 	bic.w	r3, r3, #4
 80034bc:	6713      	str	r3, [r2, #112]	; 0x70
 80034be:	e01c      	b.n	80034fa <HAL_RCC_OscConfig+0x376>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	2b05      	cmp	r3, #5
 80034c6:	d10c      	bne.n	80034e2 <HAL_RCC_OscConfig+0x35e>
 80034c8:	4b62      	ldr	r3, [pc, #392]	; (8003654 <HAL_RCC_OscConfig+0x4d0>)
 80034ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034cc:	4a61      	ldr	r2, [pc, #388]	; (8003654 <HAL_RCC_OscConfig+0x4d0>)
 80034ce:	f043 0304 	orr.w	r3, r3, #4
 80034d2:	6713      	str	r3, [r2, #112]	; 0x70
 80034d4:	4b5f      	ldr	r3, [pc, #380]	; (8003654 <HAL_RCC_OscConfig+0x4d0>)
 80034d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034d8:	4a5e      	ldr	r2, [pc, #376]	; (8003654 <HAL_RCC_OscConfig+0x4d0>)
 80034da:	f043 0301 	orr.w	r3, r3, #1
 80034de:	6713      	str	r3, [r2, #112]	; 0x70
 80034e0:	e00b      	b.n	80034fa <HAL_RCC_OscConfig+0x376>
 80034e2:	4b5c      	ldr	r3, [pc, #368]	; (8003654 <HAL_RCC_OscConfig+0x4d0>)
 80034e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034e6:	4a5b      	ldr	r2, [pc, #364]	; (8003654 <HAL_RCC_OscConfig+0x4d0>)
 80034e8:	f023 0301 	bic.w	r3, r3, #1
 80034ec:	6713      	str	r3, [r2, #112]	; 0x70
 80034ee:	4b59      	ldr	r3, [pc, #356]	; (8003654 <HAL_RCC_OscConfig+0x4d0>)
 80034f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034f2:	4a58      	ldr	r2, [pc, #352]	; (8003654 <HAL_RCC_OscConfig+0x4d0>)
 80034f4:	f023 0304 	bic.w	r3, r3, #4
 80034f8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d015      	beq.n	800352e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003502:	f7fe f96b 	bl	80017dc <HAL_GetTick>
 8003506:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003508:	e00a      	b.n	8003520 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800350a:	f7fe f967 	bl	80017dc <HAL_GetTick>
 800350e:	4602      	mov	r2, r0
 8003510:	693b      	ldr	r3, [r7, #16]
 8003512:	1ad3      	subs	r3, r2, r3
 8003514:	f241 3288 	movw	r2, #5000	; 0x1388
 8003518:	4293      	cmp	r3, r2
 800351a:	d901      	bls.n	8003520 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800351c:	2303      	movs	r3, #3
 800351e:	e0d8      	b.n	80036d2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003520:	4b4c      	ldr	r3, [pc, #304]	; (8003654 <HAL_RCC_OscConfig+0x4d0>)
 8003522:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003524:	f003 0302 	and.w	r3, r3, #2
 8003528:	2b00      	cmp	r3, #0
 800352a:	d0ee      	beq.n	800350a <HAL_RCC_OscConfig+0x386>
 800352c:	e014      	b.n	8003558 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800352e:	f7fe f955 	bl	80017dc <HAL_GetTick>
 8003532:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003534:	e00a      	b.n	800354c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003536:	f7fe f951 	bl	80017dc <HAL_GetTick>
 800353a:	4602      	mov	r2, r0
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	1ad3      	subs	r3, r2, r3
 8003540:	f241 3288 	movw	r2, #5000	; 0x1388
 8003544:	4293      	cmp	r3, r2
 8003546:	d901      	bls.n	800354c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003548:	2303      	movs	r3, #3
 800354a:	e0c2      	b.n	80036d2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800354c:	4b41      	ldr	r3, [pc, #260]	; (8003654 <HAL_RCC_OscConfig+0x4d0>)
 800354e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003550:	f003 0302 	and.w	r3, r3, #2
 8003554:	2b00      	cmp	r3, #0
 8003556:	d1ee      	bne.n	8003536 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003558:	7dfb      	ldrb	r3, [r7, #23]
 800355a:	2b01      	cmp	r3, #1
 800355c:	d105      	bne.n	800356a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800355e:	4b3d      	ldr	r3, [pc, #244]	; (8003654 <HAL_RCC_OscConfig+0x4d0>)
 8003560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003562:	4a3c      	ldr	r2, [pc, #240]	; (8003654 <HAL_RCC_OscConfig+0x4d0>)
 8003564:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003568:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	699b      	ldr	r3, [r3, #24]
 800356e:	2b00      	cmp	r3, #0
 8003570:	f000 80ae 	beq.w	80036d0 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003574:	4b37      	ldr	r3, [pc, #220]	; (8003654 <HAL_RCC_OscConfig+0x4d0>)
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	f003 030c 	and.w	r3, r3, #12
 800357c:	2b08      	cmp	r3, #8
 800357e:	d06d      	beq.n	800365c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	699b      	ldr	r3, [r3, #24]
 8003584:	2b02      	cmp	r3, #2
 8003586:	d14b      	bne.n	8003620 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003588:	4b32      	ldr	r3, [pc, #200]	; (8003654 <HAL_RCC_OscConfig+0x4d0>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a31      	ldr	r2, [pc, #196]	; (8003654 <HAL_RCC_OscConfig+0x4d0>)
 800358e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003592:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003594:	f7fe f922 	bl	80017dc <HAL_GetTick>
 8003598:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800359a:	e008      	b.n	80035ae <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800359c:	f7fe f91e 	bl	80017dc <HAL_GetTick>
 80035a0:	4602      	mov	r2, r0
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	1ad3      	subs	r3, r2, r3
 80035a6:	2b02      	cmp	r3, #2
 80035a8:	d901      	bls.n	80035ae <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80035aa:	2303      	movs	r3, #3
 80035ac:	e091      	b.n	80036d2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035ae:	4b29      	ldr	r3, [pc, #164]	; (8003654 <HAL_RCC_OscConfig+0x4d0>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d1f0      	bne.n	800359c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	69da      	ldr	r2, [r3, #28]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6a1b      	ldr	r3, [r3, #32]
 80035c2:	431a      	orrs	r2, r3
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c8:	019b      	lsls	r3, r3, #6
 80035ca:	431a      	orrs	r2, r3
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035d0:	085b      	lsrs	r3, r3, #1
 80035d2:	3b01      	subs	r3, #1
 80035d4:	041b      	lsls	r3, r3, #16
 80035d6:	431a      	orrs	r2, r3
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035dc:	061b      	lsls	r3, r3, #24
 80035de:	431a      	orrs	r2, r3
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035e4:	071b      	lsls	r3, r3, #28
 80035e6:	491b      	ldr	r1, [pc, #108]	; (8003654 <HAL_RCC_OscConfig+0x4d0>)
 80035e8:	4313      	orrs	r3, r2
 80035ea:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035ec:	4b19      	ldr	r3, [pc, #100]	; (8003654 <HAL_RCC_OscConfig+0x4d0>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a18      	ldr	r2, [pc, #96]	; (8003654 <HAL_RCC_OscConfig+0x4d0>)
 80035f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80035f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035f8:	f7fe f8f0 	bl	80017dc <HAL_GetTick>
 80035fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035fe:	e008      	b.n	8003612 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003600:	f7fe f8ec 	bl	80017dc <HAL_GetTick>
 8003604:	4602      	mov	r2, r0
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	1ad3      	subs	r3, r2, r3
 800360a:	2b02      	cmp	r3, #2
 800360c:	d901      	bls.n	8003612 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800360e:	2303      	movs	r3, #3
 8003610:	e05f      	b.n	80036d2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003612:	4b10      	ldr	r3, [pc, #64]	; (8003654 <HAL_RCC_OscConfig+0x4d0>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800361a:	2b00      	cmp	r3, #0
 800361c:	d0f0      	beq.n	8003600 <HAL_RCC_OscConfig+0x47c>
 800361e:	e057      	b.n	80036d0 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003620:	4b0c      	ldr	r3, [pc, #48]	; (8003654 <HAL_RCC_OscConfig+0x4d0>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a0b      	ldr	r2, [pc, #44]	; (8003654 <HAL_RCC_OscConfig+0x4d0>)
 8003626:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800362a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800362c:	f7fe f8d6 	bl	80017dc <HAL_GetTick>
 8003630:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003632:	e008      	b.n	8003646 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003634:	f7fe f8d2 	bl	80017dc <HAL_GetTick>
 8003638:	4602      	mov	r2, r0
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	1ad3      	subs	r3, r2, r3
 800363e:	2b02      	cmp	r3, #2
 8003640:	d901      	bls.n	8003646 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003642:	2303      	movs	r3, #3
 8003644:	e045      	b.n	80036d2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003646:	4b03      	ldr	r3, [pc, #12]	; (8003654 <HAL_RCC_OscConfig+0x4d0>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800364e:	2b00      	cmp	r3, #0
 8003650:	d1f0      	bne.n	8003634 <HAL_RCC_OscConfig+0x4b0>
 8003652:	e03d      	b.n	80036d0 <HAL_RCC_OscConfig+0x54c>
 8003654:	40023800 	.word	0x40023800
 8003658:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800365c:	4b1f      	ldr	r3, [pc, #124]	; (80036dc <HAL_RCC_OscConfig+0x558>)
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	699b      	ldr	r3, [r3, #24]
 8003666:	2b01      	cmp	r3, #1
 8003668:	d030      	beq.n	80036cc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003674:	429a      	cmp	r2, r3
 8003676:	d129      	bne.n	80036cc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003682:	429a      	cmp	r2, r3
 8003684:	d122      	bne.n	80036cc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003686:	68fa      	ldr	r2, [r7, #12]
 8003688:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800368c:	4013      	ands	r3, r2
 800368e:	687a      	ldr	r2, [r7, #4]
 8003690:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003692:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003694:	4293      	cmp	r3, r2
 8003696:	d119      	bne.n	80036cc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036a2:	085b      	lsrs	r3, r3, #1
 80036a4:	3b01      	subs	r3, #1
 80036a6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d10f      	bne.n	80036cc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036b6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80036b8:	429a      	cmp	r2, r3
 80036ba:	d107      	bne.n	80036cc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036c6:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80036c8:	429a      	cmp	r2, r3
 80036ca:	d001      	beq.n	80036d0 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80036cc:	2301      	movs	r3, #1
 80036ce:	e000      	b.n	80036d2 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80036d0:	2300      	movs	r3, #0
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	3718      	adds	r7, #24
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}
 80036da:	bf00      	nop
 80036dc:	40023800 	.word	0x40023800

080036e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b084      	sub	sp, #16
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
 80036e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80036ea:	2300      	movs	r3, #0
 80036ec:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d101      	bne.n	80036f8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80036f4:	2301      	movs	r3, #1
 80036f6:	e0d0      	b.n	800389a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80036f8:	4b6a      	ldr	r3, [pc, #424]	; (80038a4 <HAL_RCC_ClockConfig+0x1c4>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f003 030f 	and.w	r3, r3, #15
 8003700:	683a      	ldr	r2, [r7, #0]
 8003702:	429a      	cmp	r2, r3
 8003704:	d910      	bls.n	8003728 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003706:	4b67      	ldr	r3, [pc, #412]	; (80038a4 <HAL_RCC_ClockConfig+0x1c4>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f023 020f 	bic.w	r2, r3, #15
 800370e:	4965      	ldr	r1, [pc, #404]	; (80038a4 <HAL_RCC_ClockConfig+0x1c4>)
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	4313      	orrs	r3, r2
 8003714:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003716:	4b63      	ldr	r3, [pc, #396]	; (80038a4 <HAL_RCC_ClockConfig+0x1c4>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f003 030f 	and.w	r3, r3, #15
 800371e:	683a      	ldr	r2, [r7, #0]
 8003720:	429a      	cmp	r2, r3
 8003722:	d001      	beq.n	8003728 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003724:	2301      	movs	r3, #1
 8003726:	e0b8      	b.n	800389a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f003 0302 	and.w	r3, r3, #2
 8003730:	2b00      	cmp	r3, #0
 8003732:	d020      	beq.n	8003776 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f003 0304 	and.w	r3, r3, #4
 800373c:	2b00      	cmp	r3, #0
 800373e:	d005      	beq.n	800374c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003740:	4b59      	ldr	r3, [pc, #356]	; (80038a8 <HAL_RCC_ClockConfig+0x1c8>)
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	4a58      	ldr	r2, [pc, #352]	; (80038a8 <HAL_RCC_ClockConfig+0x1c8>)
 8003746:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800374a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f003 0308 	and.w	r3, r3, #8
 8003754:	2b00      	cmp	r3, #0
 8003756:	d005      	beq.n	8003764 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003758:	4b53      	ldr	r3, [pc, #332]	; (80038a8 <HAL_RCC_ClockConfig+0x1c8>)
 800375a:	689b      	ldr	r3, [r3, #8]
 800375c:	4a52      	ldr	r2, [pc, #328]	; (80038a8 <HAL_RCC_ClockConfig+0x1c8>)
 800375e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003762:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003764:	4b50      	ldr	r3, [pc, #320]	; (80038a8 <HAL_RCC_ClockConfig+0x1c8>)
 8003766:	689b      	ldr	r3, [r3, #8]
 8003768:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	494d      	ldr	r1, [pc, #308]	; (80038a8 <HAL_RCC_ClockConfig+0x1c8>)
 8003772:	4313      	orrs	r3, r2
 8003774:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f003 0301 	and.w	r3, r3, #1
 800377e:	2b00      	cmp	r3, #0
 8003780:	d040      	beq.n	8003804 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	2b01      	cmp	r3, #1
 8003788:	d107      	bne.n	800379a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800378a:	4b47      	ldr	r3, [pc, #284]	; (80038a8 <HAL_RCC_ClockConfig+0x1c8>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003792:	2b00      	cmp	r3, #0
 8003794:	d115      	bne.n	80037c2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	e07f      	b.n	800389a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	2b02      	cmp	r3, #2
 80037a0:	d107      	bne.n	80037b2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037a2:	4b41      	ldr	r3, [pc, #260]	; (80038a8 <HAL_RCC_ClockConfig+0x1c8>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d109      	bne.n	80037c2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	e073      	b.n	800389a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037b2:	4b3d      	ldr	r3, [pc, #244]	; (80038a8 <HAL_RCC_ClockConfig+0x1c8>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f003 0302 	and.w	r3, r3, #2
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d101      	bne.n	80037c2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	e06b      	b.n	800389a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037c2:	4b39      	ldr	r3, [pc, #228]	; (80038a8 <HAL_RCC_ClockConfig+0x1c8>)
 80037c4:	689b      	ldr	r3, [r3, #8]
 80037c6:	f023 0203 	bic.w	r2, r3, #3
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	4936      	ldr	r1, [pc, #216]	; (80038a8 <HAL_RCC_ClockConfig+0x1c8>)
 80037d0:	4313      	orrs	r3, r2
 80037d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037d4:	f7fe f802 	bl	80017dc <HAL_GetTick>
 80037d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037da:	e00a      	b.n	80037f2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037dc:	f7fd fffe 	bl	80017dc <HAL_GetTick>
 80037e0:	4602      	mov	r2, r0
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	1ad3      	subs	r3, r2, r3
 80037e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d901      	bls.n	80037f2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80037ee:	2303      	movs	r3, #3
 80037f0:	e053      	b.n	800389a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037f2:	4b2d      	ldr	r3, [pc, #180]	; (80038a8 <HAL_RCC_ClockConfig+0x1c8>)
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	f003 020c 	and.w	r2, r3, #12
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	009b      	lsls	r3, r3, #2
 8003800:	429a      	cmp	r2, r3
 8003802:	d1eb      	bne.n	80037dc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003804:	4b27      	ldr	r3, [pc, #156]	; (80038a4 <HAL_RCC_ClockConfig+0x1c4>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f003 030f 	and.w	r3, r3, #15
 800380c:	683a      	ldr	r2, [r7, #0]
 800380e:	429a      	cmp	r2, r3
 8003810:	d210      	bcs.n	8003834 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003812:	4b24      	ldr	r3, [pc, #144]	; (80038a4 <HAL_RCC_ClockConfig+0x1c4>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f023 020f 	bic.w	r2, r3, #15
 800381a:	4922      	ldr	r1, [pc, #136]	; (80038a4 <HAL_RCC_ClockConfig+0x1c4>)
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	4313      	orrs	r3, r2
 8003820:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003822:	4b20      	ldr	r3, [pc, #128]	; (80038a4 <HAL_RCC_ClockConfig+0x1c4>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f003 030f 	and.w	r3, r3, #15
 800382a:	683a      	ldr	r2, [r7, #0]
 800382c:	429a      	cmp	r2, r3
 800382e:	d001      	beq.n	8003834 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	e032      	b.n	800389a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 0304 	and.w	r3, r3, #4
 800383c:	2b00      	cmp	r3, #0
 800383e:	d008      	beq.n	8003852 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003840:	4b19      	ldr	r3, [pc, #100]	; (80038a8 <HAL_RCC_ClockConfig+0x1c8>)
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	68db      	ldr	r3, [r3, #12]
 800384c:	4916      	ldr	r1, [pc, #88]	; (80038a8 <HAL_RCC_ClockConfig+0x1c8>)
 800384e:	4313      	orrs	r3, r2
 8003850:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 0308 	and.w	r3, r3, #8
 800385a:	2b00      	cmp	r3, #0
 800385c:	d009      	beq.n	8003872 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800385e:	4b12      	ldr	r3, [pc, #72]	; (80038a8 <HAL_RCC_ClockConfig+0x1c8>)
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	691b      	ldr	r3, [r3, #16]
 800386a:	00db      	lsls	r3, r3, #3
 800386c:	490e      	ldr	r1, [pc, #56]	; (80038a8 <HAL_RCC_ClockConfig+0x1c8>)
 800386e:	4313      	orrs	r3, r2
 8003870:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003872:	f000 f821 	bl	80038b8 <HAL_RCC_GetSysClockFreq>
 8003876:	4602      	mov	r2, r0
 8003878:	4b0b      	ldr	r3, [pc, #44]	; (80038a8 <HAL_RCC_ClockConfig+0x1c8>)
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	091b      	lsrs	r3, r3, #4
 800387e:	f003 030f 	and.w	r3, r3, #15
 8003882:	490a      	ldr	r1, [pc, #40]	; (80038ac <HAL_RCC_ClockConfig+0x1cc>)
 8003884:	5ccb      	ldrb	r3, [r1, r3]
 8003886:	fa22 f303 	lsr.w	r3, r2, r3
 800388a:	4a09      	ldr	r2, [pc, #36]	; (80038b0 <HAL_RCC_ClockConfig+0x1d0>)
 800388c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800388e:	4b09      	ldr	r3, [pc, #36]	; (80038b4 <HAL_RCC_ClockConfig+0x1d4>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4618      	mov	r0, r3
 8003894:	f7fd ff5e 	bl	8001754 <HAL_InitTick>

  return HAL_OK;
 8003898:	2300      	movs	r3, #0
}
 800389a:	4618      	mov	r0, r3
 800389c:	3710      	adds	r7, #16
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}
 80038a2:	bf00      	nop
 80038a4:	40023c00 	.word	0x40023c00
 80038a8:	40023800 	.word	0x40023800
 80038ac:	080070c0 	.word	0x080070c0
 80038b0:	20000000 	.word	0x20000000
 80038b4:	20000004 	.word	0x20000004

080038b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038bc:	b094      	sub	sp, #80	; 0x50
 80038be:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80038c0:	2300      	movs	r3, #0
 80038c2:	647b      	str	r3, [r7, #68]	; 0x44
 80038c4:	2300      	movs	r3, #0
 80038c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80038c8:	2300      	movs	r3, #0
 80038ca:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80038cc:	2300      	movs	r3, #0
 80038ce:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80038d0:	4b79      	ldr	r3, [pc, #484]	; (8003ab8 <HAL_RCC_GetSysClockFreq+0x200>)
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	f003 030c 	and.w	r3, r3, #12
 80038d8:	2b08      	cmp	r3, #8
 80038da:	d00d      	beq.n	80038f8 <HAL_RCC_GetSysClockFreq+0x40>
 80038dc:	2b08      	cmp	r3, #8
 80038de:	f200 80e1 	bhi.w	8003aa4 <HAL_RCC_GetSysClockFreq+0x1ec>
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d002      	beq.n	80038ec <HAL_RCC_GetSysClockFreq+0x34>
 80038e6:	2b04      	cmp	r3, #4
 80038e8:	d003      	beq.n	80038f2 <HAL_RCC_GetSysClockFreq+0x3a>
 80038ea:	e0db      	b.n	8003aa4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80038ec:	4b73      	ldr	r3, [pc, #460]	; (8003abc <HAL_RCC_GetSysClockFreq+0x204>)
 80038ee:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80038f0:	e0db      	b.n	8003aaa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80038f2:	4b73      	ldr	r3, [pc, #460]	; (8003ac0 <HAL_RCC_GetSysClockFreq+0x208>)
 80038f4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80038f6:	e0d8      	b.n	8003aaa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80038f8:	4b6f      	ldr	r3, [pc, #444]	; (8003ab8 <HAL_RCC_GetSysClockFreq+0x200>)
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003900:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003902:	4b6d      	ldr	r3, [pc, #436]	; (8003ab8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800390a:	2b00      	cmp	r3, #0
 800390c:	d063      	beq.n	80039d6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800390e:	4b6a      	ldr	r3, [pc, #424]	; (8003ab8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	099b      	lsrs	r3, r3, #6
 8003914:	2200      	movs	r2, #0
 8003916:	63bb      	str	r3, [r7, #56]	; 0x38
 8003918:	63fa      	str	r2, [r7, #60]	; 0x3c
 800391a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800391c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003920:	633b      	str	r3, [r7, #48]	; 0x30
 8003922:	2300      	movs	r3, #0
 8003924:	637b      	str	r3, [r7, #52]	; 0x34
 8003926:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800392a:	4622      	mov	r2, r4
 800392c:	462b      	mov	r3, r5
 800392e:	f04f 0000 	mov.w	r0, #0
 8003932:	f04f 0100 	mov.w	r1, #0
 8003936:	0159      	lsls	r1, r3, #5
 8003938:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800393c:	0150      	lsls	r0, r2, #5
 800393e:	4602      	mov	r2, r0
 8003940:	460b      	mov	r3, r1
 8003942:	4621      	mov	r1, r4
 8003944:	1a51      	subs	r1, r2, r1
 8003946:	6139      	str	r1, [r7, #16]
 8003948:	4629      	mov	r1, r5
 800394a:	eb63 0301 	sbc.w	r3, r3, r1
 800394e:	617b      	str	r3, [r7, #20]
 8003950:	f04f 0200 	mov.w	r2, #0
 8003954:	f04f 0300 	mov.w	r3, #0
 8003958:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800395c:	4659      	mov	r1, fp
 800395e:	018b      	lsls	r3, r1, #6
 8003960:	4651      	mov	r1, sl
 8003962:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003966:	4651      	mov	r1, sl
 8003968:	018a      	lsls	r2, r1, #6
 800396a:	4651      	mov	r1, sl
 800396c:	ebb2 0801 	subs.w	r8, r2, r1
 8003970:	4659      	mov	r1, fp
 8003972:	eb63 0901 	sbc.w	r9, r3, r1
 8003976:	f04f 0200 	mov.w	r2, #0
 800397a:	f04f 0300 	mov.w	r3, #0
 800397e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003982:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003986:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800398a:	4690      	mov	r8, r2
 800398c:	4699      	mov	r9, r3
 800398e:	4623      	mov	r3, r4
 8003990:	eb18 0303 	adds.w	r3, r8, r3
 8003994:	60bb      	str	r3, [r7, #8]
 8003996:	462b      	mov	r3, r5
 8003998:	eb49 0303 	adc.w	r3, r9, r3
 800399c:	60fb      	str	r3, [r7, #12]
 800399e:	f04f 0200 	mov.w	r2, #0
 80039a2:	f04f 0300 	mov.w	r3, #0
 80039a6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80039aa:	4629      	mov	r1, r5
 80039ac:	024b      	lsls	r3, r1, #9
 80039ae:	4621      	mov	r1, r4
 80039b0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80039b4:	4621      	mov	r1, r4
 80039b6:	024a      	lsls	r2, r1, #9
 80039b8:	4610      	mov	r0, r2
 80039ba:	4619      	mov	r1, r3
 80039bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039be:	2200      	movs	r2, #0
 80039c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80039c2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80039c4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80039c8:	f7fc fc8a 	bl	80002e0 <__aeabi_uldivmod>
 80039cc:	4602      	mov	r2, r0
 80039ce:	460b      	mov	r3, r1
 80039d0:	4613      	mov	r3, r2
 80039d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80039d4:	e058      	b.n	8003a88 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039d6:	4b38      	ldr	r3, [pc, #224]	; (8003ab8 <HAL_RCC_GetSysClockFreq+0x200>)
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	099b      	lsrs	r3, r3, #6
 80039dc:	2200      	movs	r2, #0
 80039de:	4618      	mov	r0, r3
 80039e0:	4611      	mov	r1, r2
 80039e2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80039e6:	623b      	str	r3, [r7, #32]
 80039e8:	2300      	movs	r3, #0
 80039ea:	627b      	str	r3, [r7, #36]	; 0x24
 80039ec:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80039f0:	4642      	mov	r2, r8
 80039f2:	464b      	mov	r3, r9
 80039f4:	f04f 0000 	mov.w	r0, #0
 80039f8:	f04f 0100 	mov.w	r1, #0
 80039fc:	0159      	lsls	r1, r3, #5
 80039fe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a02:	0150      	lsls	r0, r2, #5
 8003a04:	4602      	mov	r2, r0
 8003a06:	460b      	mov	r3, r1
 8003a08:	4641      	mov	r1, r8
 8003a0a:	ebb2 0a01 	subs.w	sl, r2, r1
 8003a0e:	4649      	mov	r1, r9
 8003a10:	eb63 0b01 	sbc.w	fp, r3, r1
 8003a14:	f04f 0200 	mov.w	r2, #0
 8003a18:	f04f 0300 	mov.w	r3, #0
 8003a1c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003a20:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003a24:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003a28:	ebb2 040a 	subs.w	r4, r2, sl
 8003a2c:	eb63 050b 	sbc.w	r5, r3, fp
 8003a30:	f04f 0200 	mov.w	r2, #0
 8003a34:	f04f 0300 	mov.w	r3, #0
 8003a38:	00eb      	lsls	r3, r5, #3
 8003a3a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a3e:	00e2      	lsls	r2, r4, #3
 8003a40:	4614      	mov	r4, r2
 8003a42:	461d      	mov	r5, r3
 8003a44:	4643      	mov	r3, r8
 8003a46:	18e3      	adds	r3, r4, r3
 8003a48:	603b      	str	r3, [r7, #0]
 8003a4a:	464b      	mov	r3, r9
 8003a4c:	eb45 0303 	adc.w	r3, r5, r3
 8003a50:	607b      	str	r3, [r7, #4]
 8003a52:	f04f 0200 	mov.w	r2, #0
 8003a56:	f04f 0300 	mov.w	r3, #0
 8003a5a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003a5e:	4629      	mov	r1, r5
 8003a60:	028b      	lsls	r3, r1, #10
 8003a62:	4621      	mov	r1, r4
 8003a64:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003a68:	4621      	mov	r1, r4
 8003a6a:	028a      	lsls	r2, r1, #10
 8003a6c:	4610      	mov	r0, r2
 8003a6e:	4619      	mov	r1, r3
 8003a70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a72:	2200      	movs	r2, #0
 8003a74:	61bb      	str	r3, [r7, #24]
 8003a76:	61fa      	str	r2, [r7, #28]
 8003a78:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a7c:	f7fc fc30 	bl	80002e0 <__aeabi_uldivmod>
 8003a80:	4602      	mov	r2, r0
 8003a82:	460b      	mov	r3, r1
 8003a84:	4613      	mov	r3, r2
 8003a86:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003a88:	4b0b      	ldr	r3, [pc, #44]	; (8003ab8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	0c1b      	lsrs	r3, r3, #16
 8003a8e:	f003 0303 	and.w	r3, r3, #3
 8003a92:	3301      	adds	r3, #1
 8003a94:	005b      	lsls	r3, r3, #1
 8003a96:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003a98:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003a9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aa0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003aa2:	e002      	b.n	8003aaa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003aa4:	4b05      	ldr	r3, [pc, #20]	; (8003abc <HAL_RCC_GetSysClockFreq+0x204>)
 8003aa6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003aa8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003aaa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003aac:	4618      	mov	r0, r3
 8003aae:	3750      	adds	r7, #80	; 0x50
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ab6:	bf00      	nop
 8003ab8:	40023800 	.word	0x40023800
 8003abc:	00f42400 	.word	0x00f42400
 8003ac0:	007a1200 	.word	0x007a1200

08003ac4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ac8:	4b03      	ldr	r3, [pc, #12]	; (8003ad8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003aca:	681b      	ldr	r3, [r3, #0]
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad4:	4770      	bx	lr
 8003ad6:	bf00      	nop
 8003ad8:	20000000 	.word	0x20000000

08003adc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003ae0:	f7ff fff0 	bl	8003ac4 <HAL_RCC_GetHCLKFreq>
 8003ae4:	4602      	mov	r2, r0
 8003ae6:	4b05      	ldr	r3, [pc, #20]	; (8003afc <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	0a9b      	lsrs	r3, r3, #10
 8003aec:	f003 0307 	and.w	r3, r3, #7
 8003af0:	4903      	ldr	r1, [pc, #12]	; (8003b00 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003af2:	5ccb      	ldrb	r3, [r1, r3]
 8003af4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	bd80      	pop	{r7, pc}
 8003afc:	40023800 	.word	0x40023800
 8003b00:	080070d0 	.word	0x080070d0

08003b04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003b08:	f7ff ffdc 	bl	8003ac4 <HAL_RCC_GetHCLKFreq>
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	4b05      	ldr	r3, [pc, #20]	; (8003b24 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b10:	689b      	ldr	r3, [r3, #8]
 8003b12:	0b5b      	lsrs	r3, r3, #13
 8003b14:	f003 0307 	and.w	r3, r3, #7
 8003b18:	4903      	ldr	r1, [pc, #12]	; (8003b28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b1a:	5ccb      	ldrb	r3, [r1, r3]
 8003b1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	bd80      	pop	{r7, pc}
 8003b24:	40023800 	.word	0x40023800
 8003b28:	080070d0 	.word	0x080070d0

08003b2c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b088      	sub	sp, #32
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003b34:	2300      	movs	r3, #0
 8003b36:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003b38:	2300      	movs	r3, #0
 8003b3a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003b40:	2300      	movs	r3, #0
 8003b42:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003b44:	2300      	movs	r3, #0
 8003b46:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f003 0301 	and.w	r3, r3, #1
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d012      	beq.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003b54:	4b69      	ldr	r3, [pc, #420]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b56:	689b      	ldr	r3, [r3, #8]
 8003b58:	4a68      	ldr	r2, [pc, #416]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b5a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003b5e:	6093      	str	r3, [r2, #8]
 8003b60:	4b66      	ldr	r3, [pc, #408]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b62:	689a      	ldr	r2, [r3, #8]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b68:	4964      	ldr	r1, [pc, #400]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d101      	bne.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003b76:	2301      	movs	r3, #1
 8003b78:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d017      	beq.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003b86:	4b5d      	ldr	r3, [pc, #372]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b8c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b94:	4959      	ldr	r1, [pc, #356]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b96:	4313      	orrs	r3, r2
 8003b98:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ba0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ba4:	d101      	bne.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d101      	bne.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d017      	beq.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003bc2:	4b4e      	ldr	r3, [pc, #312]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003bc8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd0:	494a      	ldr	r1, [pc, #296]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bdc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003be0:	d101      	bne.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003be2:	2301      	movs	r3, #1
 8003be4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d101      	bne.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d001      	beq.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f003 0320 	and.w	r3, r3, #32
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	f000 808b 	beq.w	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003c10:	4b3a      	ldr	r3, [pc, #232]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c14:	4a39      	ldr	r2, [pc, #228]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c1a:	6413      	str	r3, [r2, #64]	; 0x40
 8003c1c:	4b37      	ldr	r3, [pc, #220]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c24:	60bb      	str	r3, [r7, #8]
 8003c26:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003c28:	4b35      	ldr	r3, [pc, #212]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a34      	ldr	r2, [pc, #208]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003c2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c32:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c34:	f7fd fdd2 	bl	80017dc <HAL_GetTick>
 8003c38:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003c3a:	e008      	b.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c3c:	f7fd fdce 	bl	80017dc <HAL_GetTick>
 8003c40:	4602      	mov	r2, r0
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	1ad3      	subs	r3, r2, r3
 8003c46:	2b64      	cmp	r3, #100	; 0x64
 8003c48:	d901      	bls.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003c4a:	2303      	movs	r3, #3
 8003c4c:	e38f      	b.n	800436e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003c4e:	4b2c      	ldr	r3, [pc, #176]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d0f0      	beq.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003c5a:	4b28      	ldr	r3, [pc, #160]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c62:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d035      	beq.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c72:	693a      	ldr	r2, [r7, #16]
 8003c74:	429a      	cmp	r2, r3
 8003c76:	d02e      	beq.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c78:	4b20      	ldr	r3, [pc, #128]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c80:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003c82:	4b1e      	ldr	r3, [pc, #120]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c86:	4a1d      	ldr	r2, [pc, #116]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c8c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003c8e:	4b1b      	ldr	r3, [pc, #108]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c92:	4a1a      	ldr	r2, [pc, #104]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c98:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003c9a:	4a18      	ldr	r2, [pc, #96]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003ca0:	4b16      	ldr	r3, [pc, #88]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ca2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ca4:	f003 0301 	and.w	r3, r3, #1
 8003ca8:	2b01      	cmp	r3, #1
 8003caa:	d114      	bne.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cac:	f7fd fd96 	bl	80017dc <HAL_GetTick>
 8003cb0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cb2:	e00a      	b.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003cb4:	f7fd fd92 	bl	80017dc <HAL_GetTick>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	1ad3      	subs	r3, r2, r3
 8003cbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d901      	bls.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003cc6:	2303      	movs	r3, #3
 8003cc8:	e351      	b.n	800436e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cca:	4b0c      	ldr	r3, [pc, #48]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ccc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cce:	f003 0302 	and.w	r3, r3, #2
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d0ee      	beq.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cde:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ce2:	d111      	bne.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003ce4:	4b05      	ldr	r3, [pc, #20]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003cf0:	4b04      	ldr	r3, [pc, #16]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003cf2:	400b      	ands	r3, r1
 8003cf4:	4901      	ldr	r1, [pc, #4]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	608b      	str	r3, [r1, #8]
 8003cfa:	e00b      	b.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003cfc:	40023800 	.word	0x40023800
 8003d00:	40007000 	.word	0x40007000
 8003d04:	0ffffcff 	.word	0x0ffffcff
 8003d08:	4bac      	ldr	r3, [pc, #688]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	4aab      	ldr	r2, [pc, #684]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d0e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003d12:	6093      	str	r3, [r2, #8]
 8003d14:	4ba9      	ldr	r3, [pc, #676]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d16:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d20:	49a6      	ldr	r1, [pc, #664]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d22:	4313      	orrs	r3, r2
 8003d24:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f003 0310 	and.w	r3, r3, #16
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d010      	beq.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003d32:	4ba2      	ldr	r3, [pc, #648]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d38:	4aa0      	ldr	r2, [pc, #640]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d3a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d3e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003d42:	4b9e      	ldr	r3, [pc, #632]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d44:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d4c:	499b      	ldr	r1, [pc, #620]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d00a      	beq.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003d60:	4b96      	ldr	r3, [pc, #600]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d66:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d6e:	4993      	ldr	r1, [pc, #588]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d70:	4313      	orrs	r3, r2
 8003d72:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d00a      	beq.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003d82:	4b8e      	ldr	r3, [pc, #568]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d88:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d90:	498a      	ldr	r1, [pc, #552]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d92:	4313      	orrs	r3, r2
 8003d94:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d00a      	beq.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003da4:	4b85      	ldr	r3, [pc, #532]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003da6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003daa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003db2:	4982      	ldr	r1, [pc, #520]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003db4:	4313      	orrs	r3, r2
 8003db6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d00a      	beq.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003dc6:	4b7d      	ldr	r3, [pc, #500]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003dc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dcc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dd4:	4979      	ldr	r1, [pc, #484]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d00a      	beq.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003de8:	4b74      	ldr	r3, [pc, #464]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003dea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dee:	f023 0203 	bic.w	r2, r3, #3
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003df6:	4971      	ldr	r1, [pc, #452]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d00a      	beq.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003e0a:	4b6c      	ldr	r3, [pc, #432]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e10:	f023 020c 	bic.w	r2, r3, #12
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e18:	4968      	ldr	r1, [pc, #416]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d00a      	beq.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003e2c:	4b63      	ldr	r3, [pc, #396]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e32:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e3a:	4960      	ldr	r1, [pc, #384]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d00a      	beq.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003e4e:	4b5b      	ldr	r3, [pc, #364]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e54:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e5c:	4957      	ldr	r1, [pc, #348]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d00a      	beq.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003e70:	4b52      	ldr	r3, [pc, #328]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e76:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e7e:	494f      	ldr	r1, [pc, #316]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e80:	4313      	orrs	r3, r2
 8003e82:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d00a      	beq.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003e92:	4b4a      	ldr	r3, [pc, #296]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e98:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ea0:	4946      	ldr	r1, [pc, #280]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d00a      	beq.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003eb4:	4b41      	ldr	r3, [pc, #260]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003eb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eba:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ec2:	493e      	ldr	r1, [pc, #248]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d00a      	beq.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003ed6:	4b39      	ldr	r3, [pc, #228]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ed8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003edc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ee4:	4935      	ldr	r1, [pc, #212]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d00a      	beq.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003ef8:	4b30      	ldr	r3, [pc, #192]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003efa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003efe:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f06:	492d      	ldr	r1, [pc, #180]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d011      	beq.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003f1a:	4b28      	ldr	r3, [pc, #160]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f20:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f28:	4924      	ldr	r1, [pc, #144]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f34:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f38:	d101      	bne.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f003 0308 	and.w	r3, r3, #8
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d001      	beq.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d00a      	beq.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003f5a:	4b18      	ldr	r3, [pc, #96]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f60:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f68:	4914      	ldr	r1, [pc, #80]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d00b      	beq.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003f7c:	4b0f      	ldr	r3, [pc, #60]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f82:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f8c:	490b      	ldr	r1, [pc, #44]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d00f      	beq.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003fa0:	4b06      	ldr	r3, [pc, #24]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fa6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fb0:	4902      	ldr	r1, [pc, #8]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003fb8:	e002      	b.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8003fba:	bf00      	nop
 8003fbc:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d00b      	beq.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003fcc:	4b8a      	ldr	r3, [pc, #552]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003fce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003fd2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fdc:	4986      	ldr	r1, [pc, #536]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d00b      	beq.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003ff0:	4b81      	ldr	r3, [pc, #516]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ff2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ff6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004000:	497d      	ldr	r1, [pc, #500]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004002:	4313      	orrs	r3, r2
 8004004:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004008:	69fb      	ldr	r3, [r7, #28]
 800400a:	2b01      	cmp	r3, #1
 800400c:	d006      	beq.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004016:	2b00      	cmp	r3, #0
 8004018:	f000 80d6 	beq.w	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800401c:	4b76      	ldr	r3, [pc, #472]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a75      	ldr	r2, [pc, #468]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004022:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004026:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004028:	f7fd fbd8 	bl	80017dc <HAL_GetTick>
 800402c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800402e:	e008      	b.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004030:	f7fd fbd4 	bl	80017dc <HAL_GetTick>
 8004034:	4602      	mov	r2, r0
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	1ad3      	subs	r3, r2, r3
 800403a:	2b64      	cmp	r3, #100	; 0x64
 800403c:	d901      	bls.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800403e:	2303      	movs	r3, #3
 8004040:	e195      	b.n	800436e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004042:	4b6d      	ldr	r3, [pc, #436]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800404a:	2b00      	cmp	r3, #0
 800404c:	d1f0      	bne.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f003 0301 	and.w	r3, r3, #1
 8004056:	2b00      	cmp	r3, #0
 8004058:	d021      	beq.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x572>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800405e:	2b00      	cmp	r3, #0
 8004060:	d11d      	bne.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004062:	4b65      	ldr	r3, [pc, #404]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004064:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004068:	0c1b      	lsrs	r3, r3, #16
 800406a:	f003 0303 	and.w	r3, r3, #3
 800406e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004070:	4b61      	ldr	r3, [pc, #388]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004072:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004076:	0e1b      	lsrs	r3, r3, #24
 8004078:	f003 030f 	and.w	r3, r3, #15
 800407c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	019a      	lsls	r2, r3, #6
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	041b      	lsls	r3, r3, #16
 8004088:	431a      	orrs	r2, r3
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	061b      	lsls	r3, r3, #24
 800408e:	431a      	orrs	r2, r3
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	689b      	ldr	r3, [r3, #8]
 8004094:	071b      	lsls	r3, r3, #28
 8004096:	4958      	ldr	r1, [pc, #352]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004098:	4313      	orrs	r3, r2
 800409a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d004      	beq.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80040b2:	d00a      	beq.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d02e      	beq.n	800411e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040c8:	d129      	bne.n	800411e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80040ca:	4b4b      	ldr	r3, [pc, #300]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040d0:	0c1b      	lsrs	r3, r3, #16
 80040d2:	f003 0303 	and.w	r3, r3, #3
 80040d6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80040d8:	4b47      	ldr	r3, [pc, #284]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040de:	0f1b      	lsrs	r3, r3, #28
 80040e0:	f003 0307 	and.w	r3, r3, #7
 80040e4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	019a      	lsls	r2, r3, #6
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	041b      	lsls	r3, r3, #16
 80040f0:	431a      	orrs	r2, r3
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	68db      	ldr	r3, [r3, #12]
 80040f6:	061b      	lsls	r3, r3, #24
 80040f8:	431a      	orrs	r2, r3
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	071b      	lsls	r3, r3, #28
 80040fe:	493e      	ldr	r1, [pc, #248]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004100:	4313      	orrs	r3, r2
 8004102:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004106:	4b3c      	ldr	r3, [pc, #240]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004108:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800410c:	f023 021f 	bic.w	r2, r3, #31
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004114:	3b01      	subs	r3, #1
 8004116:	4938      	ldr	r1, [pc, #224]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004118:	4313      	orrs	r3, r2
 800411a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004126:	2b00      	cmp	r3, #0
 8004128:	d01d      	beq.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800412a:	4b33      	ldr	r3, [pc, #204]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800412c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004130:	0e1b      	lsrs	r3, r3, #24
 8004132:	f003 030f 	and.w	r3, r3, #15
 8004136:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004138:	4b2f      	ldr	r3, [pc, #188]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800413a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800413e:	0f1b      	lsrs	r3, r3, #28
 8004140:	f003 0307 	and.w	r3, r3, #7
 8004144:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	019a      	lsls	r2, r3, #6
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	691b      	ldr	r3, [r3, #16]
 8004150:	041b      	lsls	r3, r3, #16
 8004152:	431a      	orrs	r2, r3
 8004154:	693b      	ldr	r3, [r7, #16]
 8004156:	061b      	lsls	r3, r3, #24
 8004158:	431a      	orrs	r2, r3
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	071b      	lsls	r3, r3, #28
 800415e:	4926      	ldr	r1, [pc, #152]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004160:	4313      	orrs	r3, r2
 8004162:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800416e:	2b00      	cmp	r3, #0
 8004170:	d011      	beq.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	019a      	lsls	r2, r3, #6
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	691b      	ldr	r3, [r3, #16]
 800417c:	041b      	lsls	r3, r3, #16
 800417e:	431a      	orrs	r2, r3
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	68db      	ldr	r3, [r3, #12]
 8004184:	061b      	lsls	r3, r3, #24
 8004186:	431a      	orrs	r2, r3
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	689b      	ldr	r3, [r3, #8]
 800418c:	071b      	lsls	r3, r3, #28
 800418e:	491a      	ldr	r1, [pc, #104]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004190:	4313      	orrs	r3, r2
 8004192:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004196:	4b18      	ldr	r3, [pc, #96]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a17      	ldr	r2, [pc, #92]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800419c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80041a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041a2:	f7fd fb1b 	bl	80017dc <HAL_GetTick>
 80041a6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80041a8:	e008      	b.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80041aa:	f7fd fb17 	bl	80017dc <HAL_GetTick>
 80041ae:	4602      	mov	r2, r0
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	1ad3      	subs	r3, r2, r3
 80041b4:	2b64      	cmp	r3, #100	; 0x64
 80041b6:	d901      	bls.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80041b8:	2303      	movs	r3, #3
 80041ba:	e0d8      	b.n	800436e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80041bc:	4b0e      	ldr	r3, [pc, #56]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d0f0      	beq.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80041c8:	69bb      	ldr	r3, [r7, #24]
 80041ca:	2b01      	cmp	r3, #1
 80041cc:	f040 80ce 	bne.w	800436c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80041d0:	4b09      	ldr	r3, [pc, #36]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a08      	ldr	r2, [pc, #32]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041da:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041dc:	f7fd fafe 	bl	80017dc <HAL_GetTick>
 80041e0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80041e2:	e00b      	b.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80041e4:	f7fd fafa 	bl	80017dc <HAL_GetTick>
 80041e8:	4602      	mov	r2, r0
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	1ad3      	subs	r3, r2, r3
 80041ee:	2b64      	cmp	r3, #100	; 0x64
 80041f0:	d904      	bls.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80041f2:	2303      	movs	r3, #3
 80041f4:	e0bb      	b.n	800436e <HAL_RCCEx_PeriphCLKConfig+0x842>
 80041f6:	bf00      	nop
 80041f8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80041fc:	4b5e      	ldr	r3, [pc, #376]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004204:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004208:	d0ec      	beq.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004212:	2b00      	cmp	r3, #0
 8004214:	d003      	beq.n	800421e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800421a:	2b00      	cmp	r3, #0
 800421c:	d009      	beq.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004226:	2b00      	cmp	r3, #0
 8004228:	d02e      	beq.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800422e:	2b00      	cmp	r3, #0
 8004230:	d12a      	bne.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004232:	4b51      	ldr	r3, [pc, #324]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004234:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004238:	0c1b      	lsrs	r3, r3, #16
 800423a:	f003 0303 	and.w	r3, r3, #3
 800423e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004240:	4b4d      	ldr	r3, [pc, #308]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004242:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004246:	0f1b      	lsrs	r3, r3, #28
 8004248:	f003 0307 	and.w	r3, r3, #7
 800424c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	695b      	ldr	r3, [r3, #20]
 8004252:	019a      	lsls	r2, r3, #6
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	041b      	lsls	r3, r3, #16
 8004258:	431a      	orrs	r2, r3
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	699b      	ldr	r3, [r3, #24]
 800425e:	061b      	lsls	r3, r3, #24
 8004260:	431a      	orrs	r2, r3
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	071b      	lsls	r3, r3, #28
 8004266:	4944      	ldr	r1, [pc, #272]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004268:	4313      	orrs	r3, r2
 800426a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800426e:	4b42      	ldr	r3, [pc, #264]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004270:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004274:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800427c:	3b01      	subs	r3, #1
 800427e:	021b      	lsls	r3, r3, #8
 8004280:	493d      	ldr	r1, [pc, #244]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004282:	4313      	orrs	r3, r2
 8004284:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004290:	2b00      	cmp	r3, #0
 8004292:	d022      	beq.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004298:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800429c:	d11d      	bne.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800429e:	4b36      	ldr	r3, [pc, #216]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80042a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042a4:	0e1b      	lsrs	r3, r3, #24
 80042a6:	f003 030f 	and.w	r3, r3, #15
 80042aa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80042ac:	4b32      	ldr	r3, [pc, #200]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80042ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042b2:	0f1b      	lsrs	r3, r3, #28
 80042b4:	f003 0307 	and.w	r3, r3, #7
 80042b8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	695b      	ldr	r3, [r3, #20]
 80042be:	019a      	lsls	r2, r3, #6
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6a1b      	ldr	r3, [r3, #32]
 80042c4:	041b      	lsls	r3, r3, #16
 80042c6:	431a      	orrs	r2, r3
 80042c8:	693b      	ldr	r3, [r7, #16]
 80042ca:	061b      	lsls	r3, r3, #24
 80042cc:	431a      	orrs	r2, r3
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	071b      	lsls	r3, r3, #28
 80042d2:	4929      	ldr	r1, [pc, #164]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80042d4:	4313      	orrs	r3, r2
 80042d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f003 0308 	and.w	r3, r3, #8
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d028      	beq.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80042e6:	4b24      	ldr	r3, [pc, #144]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80042e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042ec:	0e1b      	lsrs	r3, r3, #24
 80042ee:	f003 030f 	and.w	r3, r3, #15
 80042f2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80042f4:	4b20      	ldr	r3, [pc, #128]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80042f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042fa:	0c1b      	lsrs	r3, r3, #16
 80042fc:	f003 0303 	and.w	r3, r3, #3
 8004300:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	695b      	ldr	r3, [r3, #20]
 8004306:	019a      	lsls	r2, r3, #6
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	041b      	lsls	r3, r3, #16
 800430c:	431a      	orrs	r2, r3
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	061b      	lsls	r3, r3, #24
 8004312:	431a      	orrs	r2, r3
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	69db      	ldr	r3, [r3, #28]
 8004318:	071b      	lsls	r3, r3, #28
 800431a:	4917      	ldr	r1, [pc, #92]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800431c:	4313      	orrs	r3, r2
 800431e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004322:	4b15      	ldr	r3, [pc, #84]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004324:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004328:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004330:	4911      	ldr	r1, [pc, #68]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004332:	4313      	orrs	r3, r2
 8004334:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004338:	4b0f      	ldr	r3, [pc, #60]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a0e      	ldr	r2, [pc, #56]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800433e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004342:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004344:	f7fd fa4a 	bl	80017dc <HAL_GetTick>
 8004348:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800434a:	e008      	b.n	800435e <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800434c:	f7fd fa46 	bl	80017dc <HAL_GetTick>
 8004350:	4602      	mov	r2, r0
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	1ad3      	subs	r3, r2, r3
 8004356:	2b64      	cmp	r3, #100	; 0x64
 8004358:	d901      	bls.n	800435e <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800435a:	2303      	movs	r3, #3
 800435c:	e007      	b.n	800436e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800435e:	4b06      	ldr	r3, [pc, #24]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004366:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800436a:	d1ef      	bne.n	800434c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 800436c:	2300      	movs	r3, #0
}
 800436e:	4618      	mov	r0, r3
 8004370:	3720      	adds	r7, #32
 8004372:	46bd      	mov	sp, r7
 8004374:	bd80      	pop	{r7, pc}
 8004376:	bf00      	nop
 8004378:	40023800 	.word	0x40023800

0800437c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b082      	sub	sp, #8
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d101      	bne.n	800438e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	e049      	b.n	8004422 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004394:	b2db      	uxtb	r3, r3
 8004396:	2b00      	cmp	r3, #0
 8004398:	d106      	bne.n	80043a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2200      	movs	r2, #0
 800439e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	f7fc fff0 	bl	8001388 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2202      	movs	r2, #2
 80043ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681a      	ldr	r2, [r3, #0]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	3304      	adds	r3, #4
 80043b8:	4619      	mov	r1, r3
 80043ba:	4610      	mov	r0, r2
 80043bc:	f000 fbf4 	bl	8004ba8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2201      	movs	r2, #1
 80043c4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2201      	movs	r2, #1
 80043cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2201      	movs	r2, #1
 80043d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2201      	movs	r2, #1
 80043dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2201      	movs	r2, #1
 80043e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2201      	movs	r2, #1
 80043ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2201      	movs	r2, #1
 80043f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2201      	movs	r2, #1
 80043fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2201      	movs	r2, #1
 8004404:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2201      	movs	r2, #1
 800440c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2201      	movs	r2, #1
 8004414:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2201      	movs	r2, #1
 800441c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004420:	2300      	movs	r3, #0
}
 8004422:	4618      	mov	r0, r3
 8004424:	3708      	adds	r7, #8
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}
	...

0800442c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800442c:	b480      	push	{r7}
 800442e:	b085      	sub	sp, #20
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800443a:	b2db      	uxtb	r3, r3
 800443c:	2b01      	cmp	r3, #1
 800443e:	d001      	beq.n	8004444 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004440:	2301      	movs	r3, #1
 8004442:	e054      	b.n	80044ee <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2202      	movs	r2, #2
 8004448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	68da      	ldr	r2, [r3, #12]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f042 0201 	orr.w	r2, r2, #1
 800445a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a26      	ldr	r2, [pc, #152]	; (80044fc <HAL_TIM_Base_Start_IT+0xd0>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d022      	beq.n	80044ac <HAL_TIM_Base_Start_IT+0x80>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800446e:	d01d      	beq.n	80044ac <HAL_TIM_Base_Start_IT+0x80>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a22      	ldr	r2, [pc, #136]	; (8004500 <HAL_TIM_Base_Start_IT+0xd4>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d018      	beq.n	80044ac <HAL_TIM_Base_Start_IT+0x80>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a21      	ldr	r2, [pc, #132]	; (8004504 <HAL_TIM_Base_Start_IT+0xd8>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d013      	beq.n	80044ac <HAL_TIM_Base_Start_IT+0x80>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a1f      	ldr	r2, [pc, #124]	; (8004508 <HAL_TIM_Base_Start_IT+0xdc>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d00e      	beq.n	80044ac <HAL_TIM_Base_Start_IT+0x80>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4a1e      	ldr	r2, [pc, #120]	; (800450c <HAL_TIM_Base_Start_IT+0xe0>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d009      	beq.n	80044ac <HAL_TIM_Base_Start_IT+0x80>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a1c      	ldr	r2, [pc, #112]	; (8004510 <HAL_TIM_Base_Start_IT+0xe4>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d004      	beq.n	80044ac <HAL_TIM_Base_Start_IT+0x80>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a1b      	ldr	r2, [pc, #108]	; (8004514 <HAL_TIM_Base_Start_IT+0xe8>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d115      	bne.n	80044d8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	689a      	ldr	r2, [r3, #8]
 80044b2:	4b19      	ldr	r3, [pc, #100]	; (8004518 <HAL_TIM_Base_Start_IT+0xec>)
 80044b4:	4013      	ands	r3, r2
 80044b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	2b06      	cmp	r3, #6
 80044bc:	d015      	beq.n	80044ea <HAL_TIM_Base_Start_IT+0xbe>
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044c4:	d011      	beq.n	80044ea <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	681a      	ldr	r2, [r3, #0]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f042 0201 	orr.w	r2, r2, #1
 80044d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044d6:	e008      	b.n	80044ea <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	681a      	ldr	r2, [r3, #0]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f042 0201 	orr.w	r2, r2, #1
 80044e6:	601a      	str	r2, [r3, #0]
 80044e8:	e000      	b.n	80044ec <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044ea:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80044ec:	2300      	movs	r3, #0
}
 80044ee:	4618      	mov	r0, r3
 80044f0:	3714      	adds	r7, #20
 80044f2:	46bd      	mov	sp, r7
 80044f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f8:	4770      	bx	lr
 80044fa:	bf00      	nop
 80044fc:	40010000 	.word	0x40010000
 8004500:	40000400 	.word	0x40000400
 8004504:	40000800 	.word	0x40000800
 8004508:	40000c00 	.word	0x40000c00
 800450c:	40010400 	.word	0x40010400
 8004510:	40014000 	.word	0x40014000
 8004514:	40001800 	.word	0x40001800
 8004518:	00010007 	.word	0x00010007

0800451c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b086      	sub	sp, #24
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
 8004524:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d101      	bne.n	8004530 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800452c:	2301      	movs	r3, #1
 800452e:	e08f      	b.n	8004650 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004536:	b2db      	uxtb	r3, r3
 8004538:	2b00      	cmp	r3, #0
 800453a:	d106      	bne.n	800454a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2200      	movs	r2, #0
 8004540:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004544:	6878      	ldr	r0, [r7, #4]
 8004546:	f7fc fedb 	bl	8001300 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2202      	movs	r2, #2
 800454e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	6899      	ldr	r1, [r3, #8]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681a      	ldr	r2, [r3, #0]
 800455c:	4b3e      	ldr	r3, [pc, #248]	; (8004658 <HAL_TIM_Encoder_Init+0x13c>)
 800455e:	400b      	ands	r3, r1
 8004560:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681a      	ldr	r2, [r3, #0]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	3304      	adds	r3, #4
 800456a:	4619      	mov	r1, r3
 800456c:	4610      	mov	r0, r2
 800456e:	f000 fb1b 	bl	8004ba8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	699b      	ldr	r3, [r3, #24]
 8004580:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	6a1b      	ldr	r3, [r3, #32]
 8004588:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	697a      	ldr	r2, [r7, #20]
 8004590:	4313      	orrs	r3, r2
 8004592:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004594:	693a      	ldr	r2, [r7, #16]
 8004596:	4b31      	ldr	r3, [pc, #196]	; (800465c <HAL_TIM_Encoder_Init+0x140>)
 8004598:	4013      	ands	r3, r2
 800459a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	689a      	ldr	r2, [r3, #8]
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	699b      	ldr	r3, [r3, #24]
 80045a4:	021b      	lsls	r3, r3, #8
 80045a6:	4313      	orrs	r3, r2
 80045a8:	693a      	ldr	r2, [r7, #16]
 80045aa:	4313      	orrs	r3, r2
 80045ac:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80045ae:	693a      	ldr	r2, [r7, #16]
 80045b0:	4b2b      	ldr	r3, [pc, #172]	; (8004660 <HAL_TIM_Encoder_Init+0x144>)
 80045b2:	4013      	ands	r3, r2
 80045b4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80045b6:	693a      	ldr	r2, [r7, #16]
 80045b8:	4b2a      	ldr	r3, [pc, #168]	; (8004664 <HAL_TIM_Encoder_Init+0x148>)
 80045ba:	4013      	ands	r3, r2
 80045bc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	68da      	ldr	r2, [r3, #12]
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	69db      	ldr	r3, [r3, #28]
 80045c6:	021b      	lsls	r3, r3, #8
 80045c8:	4313      	orrs	r3, r2
 80045ca:	693a      	ldr	r2, [r7, #16]
 80045cc:	4313      	orrs	r3, r2
 80045ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	691b      	ldr	r3, [r3, #16]
 80045d4:	011a      	lsls	r2, r3, #4
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	6a1b      	ldr	r3, [r3, #32]
 80045da:	031b      	lsls	r3, r3, #12
 80045dc:	4313      	orrs	r3, r2
 80045de:	693a      	ldr	r2, [r7, #16]
 80045e0:	4313      	orrs	r3, r2
 80045e2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80045ea:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80045f2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	685a      	ldr	r2, [r3, #4]
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	695b      	ldr	r3, [r3, #20]
 80045fc:	011b      	lsls	r3, r3, #4
 80045fe:	4313      	orrs	r3, r2
 8004600:	68fa      	ldr	r2, [r7, #12]
 8004602:	4313      	orrs	r3, r2
 8004604:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	697a      	ldr	r2, [r7, #20]
 800460c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	693a      	ldr	r2, [r7, #16]
 8004614:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	68fa      	ldr	r2, [r7, #12]
 800461c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2201      	movs	r2, #1
 8004622:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2201      	movs	r2, #1
 800462a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2201      	movs	r2, #1
 8004632:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2201      	movs	r2, #1
 800463a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2201      	movs	r2, #1
 8004642:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2201      	movs	r2, #1
 800464a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800464e:	2300      	movs	r3, #0
}
 8004650:	4618      	mov	r0, r3
 8004652:	3718      	adds	r7, #24
 8004654:	46bd      	mov	sp, r7
 8004656:	bd80      	pop	{r7, pc}
 8004658:	fffebff8 	.word	0xfffebff8
 800465c:	fffffcfc 	.word	0xfffffcfc
 8004660:	fffff3f3 	.word	0xfffff3f3
 8004664:	ffff0f0f 	.word	0xffff0f0f

08004668 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b084      	sub	sp, #16
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
 8004670:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004678:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004680:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004688:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004690:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d110      	bne.n	80046ba <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004698:	7bfb      	ldrb	r3, [r7, #15]
 800469a:	2b01      	cmp	r3, #1
 800469c:	d102      	bne.n	80046a4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800469e:	7b7b      	ldrb	r3, [r7, #13]
 80046a0:	2b01      	cmp	r3, #1
 80046a2:	d001      	beq.n	80046a8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80046a4:	2301      	movs	r3, #1
 80046a6:	e069      	b.n	800477c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2202      	movs	r2, #2
 80046ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2202      	movs	r2, #2
 80046b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80046b8:	e031      	b.n	800471e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	2b04      	cmp	r3, #4
 80046be:	d110      	bne.n	80046e2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80046c0:	7bbb      	ldrb	r3, [r7, #14]
 80046c2:	2b01      	cmp	r3, #1
 80046c4:	d102      	bne.n	80046cc <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80046c6:	7b3b      	ldrb	r3, [r7, #12]
 80046c8:	2b01      	cmp	r3, #1
 80046ca:	d001      	beq.n	80046d0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80046cc:	2301      	movs	r3, #1
 80046ce:	e055      	b.n	800477c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2202      	movs	r2, #2
 80046d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2202      	movs	r2, #2
 80046dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80046e0:	e01d      	b.n	800471e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80046e2:	7bfb      	ldrb	r3, [r7, #15]
 80046e4:	2b01      	cmp	r3, #1
 80046e6:	d108      	bne.n	80046fa <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80046e8:	7bbb      	ldrb	r3, [r7, #14]
 80046ea:	2b01      	cmp	r3, #1
 80046ec:	d105      	bne.n	80046fa <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80046ee:	7b7b      	ldrb	r3, [r7, #13]
 80046f0:	2b01      	cmp	r3, #1
 80046f2:	d102      	bne.n	80046fa <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80046f4:	7b3b      	ldrb	r3, [r7, #12]
 80046f6:	2b01      	cmp	r3, #1
 80046f8:	d001      	beq.n	80046fe <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80046fa:	2301      	movs	r3, #1
 80046fc:	e03e      	b.n	800477c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2202      	movs	r2, #2
 8004702:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2202      	movs	r2, #2
 800470a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2202      	movs	r2, #2
 8004712:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2202      	movs	r2, #2
 800471a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d003      	beq.n	800472c <HAL_TIM_Encoder_Start+0xc4>
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	2b04      	cmp	r3, #4
 8004728:	d008      	beq.n	800473c <HAL_TIM_Encoder_Start+0xd4>
 800472a:	e00f      	b.n	800474c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	2201      	movs	r2, #1
 8004732:	2100      	movs	r1, #0
 8004734:	4618      	mov	r0, r3
 8004736:	f000 fb71 	bl	8004e1c <TIM_CCxChannelCmd>
      break;
 800473a:	e016      	b.n	800476a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	2201      	movs	r2, #1
 8004742:	2104      	movs	r1, #4
 8004744:	4618      	mov	r0, r3
 8004746:	f000 fb69 	bl	8004e1c <TIM_CCxChannelCmd>
      break;
 800474a:	e00e      	b.n	800476a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	2201      	movs	r2, #1
 8004752:	2100      	movs	r1, #0
 8004754:	4618      	mov	r0, r3
 8004756:	f000 fb61 	bl	8004e1c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	2201      	movs	r2, #1
 8004760:	2104      	movs	r1, #4
 8004762:	4618      	mov	r0, r3
 8004764:	f000 fb5a 	bl	8004e1c <TIM_CCxChannelCmd>
      break;
 8004768:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	681a      	ldr	r2, [r3, #0]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f042 0201 	orr.w	r2, r2, #1
 8004778:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800477a:	2300      	movs	r3, #0
}
 800477c:	4618      	mov	r0, r3
 800477e:	3710      	adds	r7, #16
 8004780:	46bd      	mov	sp, r7
 8004782:	bd80      	pop	{r7, pc}

08004784 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b082      	sub	sp, #8
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	691b      	ldr	r3, [r3, #16]
 8004792:	f003 0302 	and.w	r3, r3, #2
 8004796:	2b02      	cmp	r3, #2
 8004798:	d122      	bne.n	80047e0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	68db      	ldr	r3, [r3, #12]
 80047a0:	f003 0302 	and.w	r3, r3, #2
 80047a4:	2b02      	cmp	r3, #2
 80047a6:	d11b      	bne.n	80047e0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f06f 0202 	mvn.w	r2, #2
 80047b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2201      	movs	r2, #1
 80047b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	699b      	ldr	r3, [r3, #24]
 80047be:	f003 0303 	and.w	r3, r3, #3
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d003      	beq.n	80047ce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80047c6:	6878      	ldr	r0, [r7, #4]
 80047c8:	f000 f9d0 	bl	8004b6c <HAL_TIM_IC_CaptureCallback>
 80047cc:	e005      	b.n	80047da <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80047ce:	6878      	ldr	r0, [r7, #4]
 80047d0:	f000 f9c2 	bl	8004b58 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047d4:	6878      	ldr	r0, [r7, #4]
 80047d6:	f000 f9d3 	bl	8004b80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2200      	movs	r2, #0
 80047de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	691b      	ldr	r3, [r3, #16]
 80047e6:	f003 0304 	and.w	r3, r3, #4
 80047ea:	2b04      	cmp	r3, #4
 80047ec:	d122      	bne.n	8004834 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	68db      	ldr	r3, [r3, #12]
 80047f4:	f003 0304 	and.w	r3, r3, #4
 80047f8:	2b04      	cmp	r3, #4
 80047fa:	d11b      	bne.n	8004834 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f06f 0204 	mvn.w	r2, #4
 8004804:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2202      	movs	r2, #2
 800480a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	699b      	ldr	r3, [r3, #24]
 8004812:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004816:	2b00      	cmp	r3, #0
 8004818:	d003      	beq.n	8004822 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800481a:	6878      	ldr	r0, [r7, #4]
 800481c:	f000 f9a6 	bl	8004b6c <HAL_TIM_IC_CaptureCallback>
 8004820:	e005      	b.n	800482e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004822:	6878      	ldr	r0, [r7, #4]
 8004824:	f000 f998 	bl	8004b58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004828:	6878      	ldr	r0, [r7, #4]
 800482a:	f000 f9a9 	bl	8004b80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2200      	movs	r2, #0
 8004832:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	691b      	ldr	r3, [r3, #16]
 800483a:	f003 0308 	and.w	r3, r3, #8
 800483e:	2b08      	cmp	r3, #8
 8004840:	d122      	bne.n	8004888 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	68db      	ldr	r3, [r3, #12]
 8004848:	f003 0308 	and.w	r3, r3, #8
 800484c:	2b08      	cmp	r3, #8
 800484e:	d11b      	bne.n	8004888 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f06f 0208 	mvn.w	r2, #8
 8004858:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2204      	movs	r2, #4
 800485e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	69db      	ldr	r3, [r3, #28]
 8004866:	f003 0303 	and.w	r3, r3, #3
 800486a:	2b00      	cmp	r3, #0
 800486c:	d003      	beq.n	8004876 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800486e:	6878      	ldr	r0, [r7, #4]
 8004870:	f000 f97c 	bl	8004b6c <HAL_TIM_IC_CaptureCallback>
 8004874:	e005      	b.n	8004882 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	f000 f96e 	bl	8004b58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800487c:	6878      	ldr	r0, [r7, #4]
 800487e:	f000 f97f 	bl	8004b80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2200      	movs	r2, #0
 8004886:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	691b      	ldr	r3, [r3, #16]
 800488e:	f003 0310 	and.w	r3, r3, #16
 8004892:	2b10      	cmp	r3, #16
 8004894:	d122      	bne.n	80048dc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	68db      	ldr	r3, [r3, #12]
 800489c:	f003 0310 	and.w	r3, r3, #16
 80048a0:	2b10      	cmp	r3, #16
 80048a2:	d11b      	bne.n	80048dc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f06f 0210 	mvn.w	r2, #16
 80048ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2208      	movs	r2, #8
 80048b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	69db      	ldr	r3, [r3, #28]
 80048ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d003      	beq.n	80048ca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	f000 f952 	bl	8004b6c <HAL_TIM_IC_CaptureCallback>
 80048c8:	e005      	b.n	80048d6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048ca:	6878      	ldr	r0, [r7, #4]
 80048cc:	f000 f944 	bl	8004b58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048d0:	6878      	ldr	r0, [r7, #4]
 80048d2:	f000 f955 	bl	8004b80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2200      	movs	r2, #0
 80048da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	691b      	ldr	r3, [r3, #16]
 80048e2:	f003 0301 	and.w	r3, r3, #1
 80048e6:	2b01      	cmp	r3, #1
 80048e8:	d10e      	bne.n	8004908 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	68db      	ldr	r3, [r3, #12]
 80048f0:	f003 0301 	and.w	r3, r3, #1
 80048f4:	2b01      	cmp	r3, #1
 80048f6:	d107      	bne.n	8004908 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f06f 0201 	mvn.w	r2, #1
 8004900:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	f7fc fa96 	bl	8000e34 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	691b      	ldr	r3, [r3, #16]
 800490e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004912:	2b80      	cmp	r3, #128	; 0x80
 8004914:	d10e      	bne.n	8004934 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	68db      	ldr	r3, [r3, #12]
 800491c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004920:	2b80      	cmp	r3, #128	; 0x80
 8004922:	d107      	bne.n	8004934 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800492c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800492e:	6878      	ldr	r0, [r7, #4]
 8004930:	f000 fb32 	bl	8004f98 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	691b      	ldr	r3, [r3, #16]
 800493a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800493e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004942:	d10e      	bne.n	8004962 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	68db      	ldr	r3, [r3, #12]
 800494a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800494e:	2b80      	cmp	r3, #128	; 0x80
 8004950:	d107      	bne.n	8004962 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800495a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800495c:	6878      	ldr	r0, [r7, #4]
 800495e:	f000 fb25 	bl	8004fac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	691b      	ldr	r3, [r3, #16]
 8004968:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800496c:	2b40      	cmp	r3, #64	; 0x40
 800496e:	d10e      	bne.n	800498e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	68db      	ldr	r3, [r3, #12]
 8004976:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800497a:	2b40      	cmp	r3, #64	; 0x40
 800497c:	d107      	bne.n	800498e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004986:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004988:	6878      	ldr	r0, [r7, #4]
 800498a:	f000 f903 	bl	8004b94 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	691b      	ldr	r3, [r3, #16]
 8004994:	f003 0320 	and.w	r3, r3, #32
 8004998:	2b20      	cmp	r3, #32
 800499a:	d10e      	bne.n	80049ba <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	68db      	ldr	r3, [r3, #12]
 80049a2:	f003 0320 	and.w	r3, r3, #32
 80049a6:	2b20      	cmp	r3, #32
 80049a8:	d107      	bne.n	80049ba <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f06f 0220 	mvn.w	r2, #32
 80049b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80049b4:	6878      	ldr	r0, [r7, #4]
 80049b6:	f000 fae5 	bl	8004f84 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80049ba:	bf00      	nop
 80049bc:	3708      	adds	r7, #8
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd80      	pop	{r7, pc}
	...

080049c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b084      	sub	sp, #16
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
 80049cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80049ce:	2300      	movs	r3, #0
 80049d0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049d8:	2b01      	cmp	r3, #1
 80049da:	d101      	bne.n	80049e0 <HAL_TIM_ConfigClockSource+0x1c>
 80049dc:	2302      	movs	r3, #2
 80049de:	e0b4      	b.n	8004b4a <HAL_TIM_ConfigClockSource+0x186>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2201      	movs	r2, #1
 80049e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2202      	movs	r2, #2
 80049ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	689b      	ldr	r3, [r3, #8]
 80049f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80049f8:	68ba      	ldr	r2, [r7, #8]
 80049fa:	4b56      	ldr	r3, [pc, #344]	; (8004b54 <HAL_TIM_ConfigClockSource+0x190>)
 80049fc:	4013      	ands	r3, r2
 80049fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004a06:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	68ba      	ldr	r2, [r7, #8]
 8004a0e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a18:	d03e      	beq.n	8004a98 <HAL_TIM_ConfigClockSource+0xd4>
 8004a1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a1e:	f200 8087 	bhi.w	8004b30 <HAL_TIM_ConfigClockSource+0x16c>
 8004a22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a26:	f000 8086 	beq.w	8004b36 <HAL_TIM_ConfigClockSource+0x172>
 8004a2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a2e:	d87f      	bhi.n	8004b30 <HAL_TIM_ConfigClockSource+0x16c>
 8004a30:	2b70      	cmp	r3, #112	; 0x70
 8004a32:	d01a      	beq.n	8004a6a <HAL_TIM_ConfigClockSource+0xa6>
 8004a34:	2b70      	cmp	r3, #112	; 0x70
 8004a36:	d87b      	bhi.n	8004b30 <HAL_TIM_ConfigClockSource+0x16c>
 8004a38:	2b60      	cmp	r3, #96	; 0x60
 8004a3a:	d050      	beq.n	8004ade <HAL_TIM_ConfigClockSource+0x11a>
 8004a3c:	2b60      	cmp	r3, #96	; 0x60
 8004a3e:	d877      	bhi.n	8004b30 <HAL_TIM_ConfigClockSource+0x16c>
 8004a40:	2b50      	cmp	r3, #80	; 0x50
 8004a42:	d03c      	beq.n	8004abe <HAL_TIM_ConfigClockSource+0xfa>
 8004a44:	2b50      	cmp	r3, #80	; 0x50
 8004a46:	d873      	bhi.n	8004b30 <HAL_TIM_ConfigClockSource+0x16c>
 8004a48:	2b40      	cmp	r3, #64	; 0x40
 8004a4a:	d058      	beq.n	8004afe <HAL_TIM_ConfigClockSource+0x13a>
 8004a4c:	2b40      	cmp	r3, #64	; 0x40
 8004a4e:	d86f      	bhi.n	8004b30 <HAL_TIM_ConfigClockSource+0x16c>
 8004a50:	2b30      	cmp	r3, #48	; 0x30
 8004a52:	d064      	beq.n	8004b1e <HAL_TIM_ConfigClockSource+0x15a>
 8004a54:	2b30      	cmp	r3, #48	; 0x30
 8004a56:	d86b      	bhi.n	8004b30 <HAL_TIM_ConfigClockSource+0x16c>
 8004a58:	2b20      	cmp	r3, #32
 8004a5a:	d060      	beq.n	8004b1e <HAL_TIM_ConfigClockSource+0x15a>
 8004a5c:	2b20      	cmp	r3, #32
 8004a5e:	d867      	bhi.n	8004b30 <HAL_TIM_ConfigClockSource+0x16c>
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d05c      	beq.n	8004b1e <HAL_TIM_ConfigClockSource+0x15a>
 8004a64:	2b10      	cmp	r3, #16
 8004a66:	d05a      	beq.n	8004b1e <HAL_TIM_ConfigClockSource+0x15a>
 8004a68:	e062      	b.n	8004b30 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6818      	ldr	r0, [r3, #0]
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	6899      	ldr	r1, [r3, #8]
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	685a      	ldr	r2, [r3, #4]
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	68db      	ldr	r3, [r3, #12]
 8004a7a:	f000 f9af 	bl	8004ddc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	689b      	ldr	r3, [r3, #8]
 8004a84:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004a86:	68bb      	ldr	r3, [r7, #8]
 8004a88:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004a8c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	68ba      	ldr	r2, [r7, #8]
 8004a94:	609a      	str	r2, [r3, #8]
      break;
 8004a96:	e04f      	b.n	8004b38 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6818      	ldr	r0, [r3, #0]
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	6899      	ldr	r1, [r3, #8]
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	685a      	ldr	r2, [r3, #4]
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	68db      	ldr	r3, [r3, #12]
 8004aa8:	f000 f998 	bl	8004ddc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	689a      	ldr	r2, [r3, #8]
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004aba:	609a      	str	r2, [r3, #8]
      break;
 8004abc:	e03c      	b.n	8004b38 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6818      	ldr	r0, [r3, #0]
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	6859      	ldr	r1, [r3, #4]
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	68db      	ldr	r3, [r3, #12]
 8004aca:	461a      	mov	r2, r3
 8004acc:	f000 f90c 	bl	8004ce8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	2150      	movs	r1, #80	; 0x50
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	f000 f965 	bl	8004da6 <TIM_ITRx_SetConfig>
      break;
 8004adc:	e02c      	b.n	8004b38 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6818      	ldr	r0, [r3, #0]
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	6859      	ldr	r1, [r3, #4]
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	68db      	ldr	r3, [r3, #12]
 8004aea:	461a      	mov	r2, r3
 8004aec:	f000 f92b 	bl	8004d46 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	2160      	movs	r1, #96	; 0x60
 8004af6:	4618      	mov	r0, r3
 8004af8:	f000 f955 	bl	8004da6 <TIM_ITRx_SetConfig>
      break;
 8004afc:	e01c      	b.n	8004b38 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6818      	ldr	r0, [r3, #0]
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	6859      	ldr	r1, [r3, #4]
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	68db      	ldr	r3, [r3, #12]
 8004b0a:	461a      	mov	r2, r3
 8004b0c:	f000 f8ec 	bl	8004ce8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	2140      	movs	r1, #64	; 0x40
 8004b16:	4618      	mov	r0, r3
 8004b18:	f000 f945 	bl	8004da6 <TIM_ITRx_SetConfig>
      break;
 8004b1c:	e00c      	b.n	8004b38 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681a      	ldr	r2, [r3, #0]
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4619      	mov	r1, r3
 8004b28:	4610      	mov	r0, r2
 8004b2a:	f000 f93c 	bl	8004da6 <TIM_ITRx_SetConfig>
      break;
 8004b2e:	e003      	b.n	8004b38 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004b30:	2301      	movs	r3, #1
 8004b32:	73fb      	strb	r3, [r7, #15]
      break;
 8004b34:	e000      	b.n	8004b38 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004b36:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2200      	movs	r2, #0
 8004b44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004b48:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	3710      	adds	r7, #16
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bd80      	pop	{r7, pc}
 8004b52:	bf00      	nop
 8004b54:	fffeff88 	.word	0xfffeff88

08004b58 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	b083      	sub	sp, #12
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004b60:	bf00      	nop
 8004b62:	370c      	adds	r7, #12
 8004b64:	46bd      	mov	sp, r7
 8004b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6a:	4770      	bx	lr

08004b6c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b083      	sub	sp, #12
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004b74:	bf00      	nop
 8004b76:	370c      	adds	r7, #12
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7e:	4770      	bx	lr

08004b80 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004b80:	b480      	push	{r7}
 8004b82:	b083      	sub	sp, #12
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004b88:	bf00      	nop
 8004b8a:	370c      	adds	r7, #12
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b92:	4770      	bx	lr

08004b94 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004b94:	b480      	push	{r7}
 8004b96:	b083      	sub	sp, #12
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004b9c:	bf00      	nop
 8004b9e:	370c      	adds	r7, #12
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba6:	4770      	bx	lr

08004ba8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b085      	sub	sp, #20
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
 8004bb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	4a40      	ldr	r2, [pc, #256]	; (8004cbc <TIM_Base_SetConfig+0x114>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d013      	beq.n	8004be8 <TIM_Base_SetConfig+0x40>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bc6:	d00f      	beq.n	8004be8 <TIM_Base_SetConfig+0x40>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	4a3d      	ldr	r2, [pc, #244]	; (8004cc0 <TIM_Base_SetConfig+0x118>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d00b      	beq.n	8004be8 <TIM_Base_SetConfig+0x40>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	4a3c      	ldr	r2, [pc, #240]	; (8004cc4 <TIM_Base_SetConfig+0x11c>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d007      	beq.n	8004be8 <TIM_Base_SetConfig+0x40>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	4a3b      	ldr	r2, [pc, #236]	; (8004cc8 <TIM_Base_SetConfig+0x120>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d003      	beq.n	8004be8 <TIM_Base_SetConfig+0x40>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	4a3a      	ldr	r2, [pc, #232]	; (8004ccc <TIM_Base_SetConfig+0x124>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d108      	bne.n	8004bfa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	68fa      	ldr	r2, [r7, #12]
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	4a2f      	ldr	r2, [pc, #188]	; (8004cbc <TIM_Base_SetConfig+0x114>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d02b      	beq.n	8004c5a <TIM_Base_SetConfig+0xb2>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c08:	d027      	beq.n	8004c5a <TIM_Base_SetConfig+0xb2>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	4a2c      	ldr	r2, [pc, #176]	; (8004cc0 <TIM_Base_SetConfig+0x118>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d023      	beq.n	8004c5a <TIM_Base_SetConfig+0xb2>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	4a2b      	ldr	r2, [pc, #172]	; (8004cc4 <TIM_Base_SetConfig+0x11c>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d01f      	beq.n	8004c5a <TIM_Base_SetConfig+0xb2>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	4a2a      	ldr	r2, [pc, #168]	; (8004cc8 <TIM_Base_SetConfig+0x120>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d01b      	beq.n	8004c5a <TIM_Base_SetConfig+0xb2>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	4a29      	ldr	r2, [pc, #164]	; (8004ccc <TIM_Base_SetConfig+0x124>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d017      	beq.n	8004c5a <TIM_Base_SetConfig+0xb2>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	4a28      	ldr	r2, [pc, #160]	; (8004cd0 <TIM_Base_SetConfig+0x128>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d013      	beq.n	8004c5a <TIM_Base_SetConfig+0xb2>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	4a27      	ldr	r2, [pc, #156]	; (8004cd4 <TIM_Base_SetConfig+0x12c>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d00f      	beq.n	8004c5a <TIM_Base_SetConfig+0xb2>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	4a26      	ldr	r2, [pc, #152]	; (8004cd8 <TIM_Base_SetConfig+0x130>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d00b      	beq.n	8004c5a <TIM_Base_SetConfig+0xb2>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	4a25      	ldr	r2, [pc, #148]	; (8004cdc <TIM_Base_SetConfig+0x134>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d007      	beq.n	8004c5a <TIM_Base_SetConfig+0xb2>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	4a24      	ldr	r2, [pc, #144]	; (8004ce0 <TIM_Base_SetConfig+0x138>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d003      	beq.n	8004c5a <TIM_Base_SetConfig+0xb2>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	4a23      	ldr	r2, [pc, #140]	; (8004ce4 <TIM_Base_SetConfig+0x13c>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d108      	bne.n	8004c6c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	68db      	ldr	r3, [r3, #12]
 8004c66:	68fa      	ldr	r2, [r7, #12]
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	695b      	ldr	r3, [r3, #20]
 8004c76:	4313      	orrs	r3, r2
 8004c78:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	68fa      	ldr	r2, [r7, #12]
 8004c7e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	689a      	ldr	r2, [r3, #8]
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	681a      	ldr	r2, [r3, #0]
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	4a0a      	ldr	r2, [pc, #40]	; (8004cbc <TIM_Base_SetConfig+0x114>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d003      	beq.n	8004ca0 <TIM_Base_SetConfig+0xf8>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	4a0c      	ldr	r2, [pc, #48]	; (8004ccc <TIM_Base_SetConfig+0x124>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d103      	bne.n	8004ca8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	691a      	ldr	r2, [r3, #16]
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2201      	movs	r2, #1
 8004cac:	615a      	str	r2, [r3, #20]
}
 8004cae:	bf00      	nop
 8004cb0:	3714      	adds	r7, #20
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb8:	4770      	bx	lr
 8004cba:	bf00      	nop
 8004cbc:	40010000 	.word	0x40010000
 8004cc0:	40000400 	.word	0x40000400
 8004cc4:	40000800 	.word	0x40000800
 8004cc8:	40000c00 	.word	0x40000c00
 8004ccc:	40010400 	.word	0x40010400
 8004cd0:	40014000 	.word	0x40014000
 8004cd4:	40014400 	.word	0x40014400
 8004cd8:	40014800 	.word	0x40014800
 8004cdc:	40001800 	.word	0x40001800
 8004ce0:	40001c00 	.word	0x40001c00
 8004ce4:	40002000 	.word	0x40002000

08004ce8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b087      	sub	sp, #28
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	60f8      	str	r0, [r7, #12]
 8004cf0:	60b9      	str	r1, [r7, #8]
 8004cf2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	6a1b      	ldr	r3, [r3, #32]
 8004cf8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	6a1b      	ldr	r3, [r3, #32]
 8004cfe:	f023 0201 	bic.w	r2, r3, #1
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	699b      	ldr	r3, [r3, #24]
 8004d0a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004d0c:	693b      	ldr	r3, [r7, #16]
 8004d0e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004d12:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	011b      	lsls	r3, r3, #4
 8004d18:	693a      	ldr	r2, [r7, #16]
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004d1e:	697b      	ldr	r3, [r7, #20]
 8004d20:	f023 030a 	bic.w	r3, r3, #10
 8004d24:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004d26:	697a      	ldr	r2, [r7, #20]
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	693a      	ldr	r2, [r7, #16]
 8004d32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	697a      	ldr	r2, [r7, #20]
 8004d38:	621a      	str	r2, [r3, #32]
}
 8004d3a:	bf00      	nop
 8004d3c:	371c      	adds	r7, #28
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d44:	4770      	bx	lr

08004d46 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d46:	b480      	push	{r7}
 8004d48:	b087      	sub	sp, #28
 8004d4a:	af00      	add	r7, sp, #0
 8004d4c:	60f8      	str	r0, [r7, #12]
 8004d4e:	60b9      	str	r1, [r7, #8]
 8004d50:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	6a1b      	ldr	r3, [r3, #32]
 8004d56:	f023 0210 	bic.w	r2, r3, #16
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	699b      	ldr	r3, [r3, #24]
 8004d62:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	6a1b      	ldr	r3, [r3, #32]
 8004d68:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004d6a:	697b      	ldr	r3, [r7, #20]
 8004d6c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004d70:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	031b      	lsls	r3, r3, #12
 8004d76:	697a      	ldr	r2, [r7, #20]
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004d7c:	693b      	ldr	r3, [r7, #16]
 8004d7e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004d82:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	011b      	lsls	r3, r3, #4
 8004d88:	693a      	ldr	r2, [r7, #16]
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	697a      	ldr	r2, [r7, #20]
 8004d92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	693a      	ldr	r2, [r7, #16]
 8004d98:	621a      	str	r2, [r3, #32]
}
 8004d9a:	bf00      	nop
 8004d9c:	371c      	adds	r7, #28
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da4:	4770      	bx	lr

08004da6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004da6:	b480      	push	{r7}
 8004da8:	b085      	sub	sp, #20
 8004daa:	af00      	add	r7, sp, #0
 8004dac:	6078      	str	r0, [r7, #4]
 8004dae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	689b      	ldr	r3, [r3, #8]
 8004db4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dbc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004dbe:	683a      	ldr	r2, [r7, #0]
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	f043 0307 	orr.w	r3, r3, #7
 8004dc8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	68fa      	ldr	r2, [r7, #12]
 8004dce:	609a      	str	r2, [r3, #8]
}
 8004dd0:	bf00      	nop
 8004dd2:	3714      	adds	r7, #20
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dda:	4770      	bx	lr

08004ddc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004ddc:	b480      	push	{r7}
 8004dde:	b087      	sub	sp, #28
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	60f8      	str	r0, [r7, #12]
 8004de4:	60b9      	str	r1, [r7, #8]
 8004de6:	607a      	str	r2, [r7, #4]
 8004de8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	689b      	ldr	r3, [r3, #8]
 8004dee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004df0:	697b      	ldr	r3, [r7, #20]
 8004df2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004df6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	021a      	lsls	r2, r3, #8
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	431a      	orrs	r2, r3
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	4313      	orrs	r3, r2
 8004e04:	697a      	ldr	r2, [r7, #20]
 8004e06:	4313      	orrs	r3, r2
 8004e08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	697a      	ldr	r2, [r7, #20]
 8004e0e:	609a      	str	r2, [r3, #8]
}
 8004e10:	bf00      	nop
 8004e12:	371c      	adds	r7, #28
 8004e14:	46bd      	mov	sp, r7
 8004e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1a:	4770      	bx	lr

08004e1c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	b087      	sub	sp, #28
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	60f8      	str	r0, [r7, #12]
 8004e24:	60b9      	str	r1, [r7, #8]
 8004e26:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	f003 031f 	and.w	r3, r3, #31
 8004e2e:	2201      	movs	r2, #1
 8004e30:	fa02 f303 	lsl.w	r3, r2, r3
 8004e34:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	6a1a      	ldr	r2, [r3, #32]
 8004e3a:	697b      	ldr	r3, [r7, #20]
 8004e3c:	43db      	mvns	r3, r3
 8004e3e:	401a      	ands	r2, r3
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	6a1a      	ldr	r2, [r3, #32]
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	f003 031f 	and.w	r3, r3, #31
 8004e4e:	6879      	ldr	r1, [r7, #4]
 8004e50:	fa01 f303 	lsl.w	r3, r1, r3
 8004e54:	431a      	orrs	r2, r3
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	621a      	str	r2, [r3, #32]
}
 8004e5a:	bf00      	nop
 8004e5c:	371c      	adds	r7, #28
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e64:	4770      	bx	lr
	...

08004e68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b085      	sub	sp, #20
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
 8004e70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e78:	2b01      	cmp	r3, #1
 8004e7a:	d101      	bne.n	8004e80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004e7c:	2302      	movs	r3, #2
 8004e7e:	e06d      	b.n	8004f5c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2201      	movs	r2, #1
 8004e84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2202      	movs	r2, #2
 8004e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	685b      	ldr	r3, [r3, #4]
 8004e96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	689b      	ldr	r3, [r3, #8]
 8004e9e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4a30      	ldr	r2, [pc, #192]	; (8004f68 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d004      	beq.n	8004eb4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4a2f      	ldr	r2, [pc, #188]	; (8004f6c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d108      	bne.n	8004ec6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004eba:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	68fa      	ldr	r2, [r7, #12]
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ecc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	68fa      	ldr	r2, [r7, #12]
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	68fa      	ldr	r2, [r7, #12]
 8004ede:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a20      	ldr	r2, [pc, #128]	; (8004f68 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d022      	beq.n	8004f30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ef2:	d01d      	beq.n	8004f30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a1d      	ldr	r2, [pc, #116]	; (8004f70 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d018      	beq.n	8004f30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a1c      	ldr	r2, [pc, #112]	; (8004f74 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d013      	beq.n	8004f30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a1a      	ldr	r2, [pc, #104]	; (8004f78 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d00e      	beq.n	8004f30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4a15      	ldr	r2, [pc, #84]	; (8004f6c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d009      	beq.n	8004f30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a16      	ldr	r2, [pc, #88]	; (8004f7c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d004      	beq.n	8004f30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a15      	ldr	r2, [pc, #84]	; (8004f80 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d10c      	bne.n	8004f4a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f36:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	689b      	ldr	r3, [r3, #8]
 8004f3c:	68ba      	ldr	r2, [r7, #8]
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	68ba      	ldr	r2, [r7, #8]
 8004f48:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2201      	movs	r2, #1
 8004f4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2200      	movs	r2, #0
 8004f56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f5a:	2300      	movs	r3, #0
}
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	3714      	adds	r7, #20
 8004f60:	46bd      	mov	sp, r7
 8004f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f66:	4770      	bx	lr
 8004f68:	40010000 	.word	0x40010000
 8004f6c:	40010400 	.word	0x40010400
 8004f70:	40000400 	.word	0x40000400
 8004f74:	40000800 	.word	0x40000800
 8004f78:	40000c00 	.word	0x40000c00
 8004f7c:	40014000 	.word	0x40014000
 8004f80:	40001800 	.word	0x40001800

08004f84 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004f84:	b480      	push	{r7}
 8004f86:	b083      	sub	sp, #12
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004f8c:	bf00      	nop
 8004f8e:	370c      	adds	r7, #12
 8004f90:	46bd      	mov	sp, r7
 8004f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f96:	4770      	bx	lr

08004f98 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b083      	sub	sp, #12
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004fa0:	bf00      	nop
 8004fa2:	370c      	adds	r7, #12
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004faa:	4770      	bx	lr

08004fac <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004fac:	b480      	push	{r7}
 8004fae:	b083      	sub	sp, #12
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004fb4:	bf00      	nop
 8004fb6:	370c      	adds	r7, #12
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbe:	4770      	bx	lr

08004fc0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b082      	sub	sp, #8
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d101      	bne.n	8004fd2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004fce:	2301      	movs	r3, #1
 8004fd0:	e040      	b.n	8005054 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d106      	bne.n	8004fe8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004fe2:	6878      	ldr	r0, [r7, #4]
 8004fe4:	f7fc fa12 	bl	800140c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2224      	movs	r2, #36	; 0x24
 8004fec:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	681a      	ldr	r2, [r3, #0]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f022 0201 	bic.w	r2, r2, #1
 8004ffc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	f000 fbf2 	bl	80057e8 <UART_SetConfig>
 8005004:	4603      	mov	r3, r0
 8005006:	2b01      	cmp	r3, #1
 8005008:	d101      	bne.n	800500e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800500a:	2301      	movs	r3, #1
 800500c:	e022      	b.n	8005054 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005012:	2b00      	cmp	r3, #0
 8005014:	d002      	beq.n	800501c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005016:	6878      	ldr	r0, [r7, #4]
 8005018:	f000 fe4a 	bl	8005cb0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	685a      	ldr	r2, [r3, #4]
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800502a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	689a      	ldr	r2, [r3, #8]
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800503a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	681a      	ldr	r2, [r3, #0]
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f042 0201 	orr.w	r2, r2, #1
 800504a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800504c:	6878      	ldr	r0, [r7, #4]
 800504e:	f000 fed1 	bl	8005df4 <UART_CheckIdleState>
 8005052:	4603      	mov	r3, r0
}
 8005054:	4618      	mov	r0, r3
 8005056:	3708      	adds	r7, #8
 8005058:	46bd      	mov	sp, r7
 800505a:	bd80      	pop	{r7, pc}

0800505c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800505c:	b480      	push	{r7}
 800505e:	b08b      	sub	sp, #44	; 0x2c
 8005060:	af00      	add	r7, sp, #0
 8005062:	60f8      	str	r0, [r7, #12]
 8005064:	60b9      	str	r1, [r7, #8]
 8005066:	4613      	mov	r3, r2
 8005068:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800506e:	2b20      	cmp	r3, #32
 8005070:	d156      	bne.n	8005120 <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d002      	beq.n	800507e <HAL_UART_Transmit_IT+0x22>
 8005078:	88fb      	ldrh	r3, [r7, #6]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d101      	bne.n	8005082 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800507e:	2301      	movs	r3, #1
 8005080:	e04f      	b.n	8005122 <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005088:	2b01      	cmp	r3, #1
 800508a:	d101      	bne.n	8005090 <HAL_UART_Transmit_IT+0x34>
 800508c:	2302      	movs	r3, #2
 800508e:	e048      	b.n	8005122 <HAL_UART_Transmit_IT+0xc6>
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	2201      	movs	r2, #1
 8005094:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	68ba      	ldr	r2, [r7, #8]
 800509c:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	88fa      	ldrh	r2, [r7, #6]
 80050a2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	88fa      	ldrh	r2, [r7, #6]
 80050aa:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	2200      	movs	r2, #0
 80050b2:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	2200      	movs	r2, #0
 80050b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	2221      	movs	r2, #33	; 0x21
 80050c0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	689b      	ldr	r3, [r3, #8]
 80050c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050ca:	d107      	bne.n	80050dc <HAL_UART_Transmit_IT+0x80>
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	691b      	ldr	r3, [r3, #16]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d103      	bne.n	80050dc <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	4a16      	ldr	r2, [pc, #88]	; (8005130 <HAL_UART_Transmit_IT+0xd4>)
 80050d8:	669a      	str	r2, [r3, #104]	; 0x68
 80050da:	e002      	b.n	80050e2 <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	4a15      	ldr	r2, [pc, #84]	; (8005134 <HAL_UART_Transmit_IT+0xd8>)
 80050e0:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	2200      	movs	r2, #0
 80050e6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050f0:	697b      	ldr	r3, [r7, #20]
 80050f2:	e853 3f00 	ldrex	r3, [r3]
 80050f6:	613b      	str	r3, [r7, #16]
   return(result);
 80050f8:	693b      	ldr	r3, [r7, #16]
 80050fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050fe:	627b      	str	r3, [r7, #36]	; 0x24
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	461a      	mov	r2, r3
 8005106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005108:	623b      	str	r3, [r7, #32]
 800510a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800510c:	69f9      	ldr	r1, [r7, #28]
 800510e:	6a3a      	ldr	r2, [r7, #32]
 8005110:	e841 2300 	strex	r3, r2, [r1]
 8005114:	61bb      	str	r3, [r7, #24]
   return(result);
 8005116:	69bb      	ldr	r3, [r7, #24]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d1e6      	bne.n	80050ea <HAL_UART_Transmit_IT+0x8e>

    return HAL_OK;
 800511c:	2300      	movs	r3, #0
 800511e:	e000      	b.n	8005122 <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 8005120:	2302      	movs	r3, #2
  }
}
 8005122:	4618      	mov	r0, r3
 8005124:	372c      	adds	r7, #44	; 0x2c
 8005126:	46bd      	mov	sp, r7
 8005128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512c:	4770      	bx	lr
 800512e:	bf00      	nop
 8005130:	0800634d 	.word	0x0800634d
 8005134:	08006297 	.word	0x08006297

08005138 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b08a      	sub	sp, #40	; 0x28
 800513c:	af00      	add	r7, sp, #0
 800513e:	60f8      	str	r0, [r7, #12]
 8005140:	60b9      	str	r1, [r7, #8]
 8005142:	4613      	mov	r3, r2
 8005144:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800514a:	2b20      	cmp	r3, #32
 800514c:	d13d      	bne.n	80051ca <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 800514e:	68bb      	ldr	r3, [r7, #8]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d002      	beq.n	800515a <HAL_UART_Receive_IT+0x22>
 8005154:	88fb      	ldrh	r3, [r7, #6]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d101      	bne.n	800515e <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 800515a:	2301      	movs	r3, #1
 800515c:	e036      	b.n	80051cc <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005164:	2b01      	cmp	r3, #1
 8005166:	d101      	bne.n	800516c <HAL_UART_Receive_IT+0x34>
 8005168:	2302      	movs	r3, #2
 800516a:	e02f      	b.n	80051cc <HAL_UART_Receive_IT+0x94>
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	2201      	movs	r2, #1
 8005170:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	2200      	movs	r2, #0
 8005178:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	685b      	ldr	r3, [r3, #4]
 8005180:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005184:	2b00      	cmp	r3, #0
 8005186:	d018      	beq.n	80051ba <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800518e:	697b      	ldr	r3, [r7, #20]
 8005190:	e853 3f00 	ldrex	r3, [r3]
 8005194:	613b      	str	r3, [r7, #16]
   return(result);
 8005196:	693b      	ldr	r3, [r7, #16]
 8005198:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800519c:	627b      	str	r3, [r7, #36]	; 0x24
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	461a      	mov	r2, r3
 80051a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a6:	623b      	str	r3, [r7, #32]
 80051a8:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051aa:	69f9      	ldr	r1, [r7, #28]
 80051ac:	6a3a      	ldr	r2, [r7, #32]
 80051ae:	e841 2300 	strex	r3, r2, [r1]
 80051b2:	61bb      	str	r3, [r7, #24]
   return(result);
 80051b4:	69bb      	ldr	r3, [r7, #24]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d1e6      	bne.n	8005188 <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80051ba:	88fb      	ldrh	r3, [r7, #6]
 80051bc:	461a      	mov	r2, r3
 80051be:	68b9      	ldr	r1, [r7, #8]
 80051c0:	68f8      	ldr	r0, [r7, #12]
 80051c2:	f000 ff25 	bl	8006010 <UART_Start_Receive_IT>
 80051c6:	4603      	mov	r3, r0
 80051c8:	e000      	b.n	80051cc <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80051ca:	2302      	movs	r3, #2
  }
}
 80051cc:	4618      	mov	r0, r3
 80051ce:	3728      	adds	r7, #40	; 0x28
 80051d0:	46bd      	mov	sp, r7
 80051d2:	bd80      	pop	{r7, pc}

080051d4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b0ba      	sub	sp, #232	; 0xe8
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	69db      	ldr	r3, [r3, #28]
 80051e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	689b      	ldr	r3, [r3, #8]
 80051f6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80051fa:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80051fe:	f640 030f 	movw	r3, #2063	; 0x80f
 8005202:	4013      	ands	r3, r2
 8005204:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005208:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800520c:	2b00      	cmp	r3, #0
 800520e:	d115      	bne.n	800523c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005210:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005214:	f003 0320 	and.w	r3, r3, #32
 8005218:	2b00      	cmp	r3, #0
 800521a:	d00f      	beq.n	800523c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800521c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005220:	f003 0320 	and.w	r3, r3, #32
 8005224:	2b00      	cmp	r3, #0
 8005226:	d009      	beq.n	800523c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800522c:	2b00      	cmp	r3, #0
 800522e:	f000 82a4 	beq.w	800577a <HAL_UART_IRQHandler+0x5a6>
      {
        huart->RxISR(huart);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005236:	6878      	ldr	r0, [r7, #4]
 8005238:	4798      	blx	r3
      }
      return;
 800523a:	e29e      	b.n	800577a <HAL_UART_IRQHandler+0x5a6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800523c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005240:	2b00      	cmp	r3, #0
 8005242:	f000 8117 	beq.w	8005474 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005246:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800524a:	f003 0301 	and.w	r3, r3, #1
 800524e:	2b00      	cmp	r3, #0
 8005250:	d106      	bne.n	8005260 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005252:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005256:	4b85      	ldr	r3, [pc, #532]	; (800546c <HAL_UART_IRQHandler+0x298>)
 8005258:	4013      	ands	r3, r2
 800525a:	2b00      	cmp	r3, #0
 800525c:	f000 810a 	beq.w	8005474 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005260:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005264:	f003 0301 	and.w	r3, r3, #1
 8005268:	2b00      	cmp	r3, #0
 800526a:	d011      	beq.n	8005290 <HAL_UART_IRQHandler+0xbc>
 800526c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005270:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005274:	2b00      	cmp	r3, #0
 8005276:	d00b      	beq.n	8005290 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	2201      	movs	r2, #1
 800527e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005286:	f043 0201 	orr.w	r2, r3, #1
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005290:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005294:	f003 0302 	and.w	r3, r3, #2
 8005298:	2b00      	cmp	r3, #0
 800529a:	d011      	beq.n	80052c0 <HAL_UART_IRQHandler+0xec>
 800529c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80052a0:	f003 0301 	and.w	r3, r3, #1
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d00b      	beq.n	80052c0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	2202      	movs	r2, #2
 80052ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80052b6:	f043 0204 	orr.w	r2, r3, #4
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80052c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052c4:	f003 0304 	and.w	r3, r3, #4
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d011      	beq.n	80052f0 <HAL_UART_IRQHandler+0x11c>
 80052cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80052d0:	f003 0301 	and.w	r3, r3, #1
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d00b      	beq.n	80052f0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	2204      	movs	r2, #4
 80052de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80052e6:	f043 0202 	orr.w	r2, r3, #2
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80052f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052f4:	f003 0308 	and.w	r3, r3, #8
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d017      	beq.n	800532c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80052fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005300:	f003 0320 	and.w	r3, r3, #32
 8005304:	2b00      	cmp	r3, #0
 8005306:	d105      	bne.n	8005314 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005308:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800530c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005310:	2b00      	cmp	r3, #0
 8005312:	d00b      	beq.n	800532c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	2208      	movs	r2, #8
 800531a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005322:	f043 0208 	orr.w	r2, r3, #8
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800532c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005330:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005334:	2b00      	cmp	r3, #0
 8005336:	d012      	beq.n	800535e <HAL_UART_IRQHandler+0x18a>
 8005338:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800533c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005340:	2b00      	cmp	r3, #0
 8005342:	d00c      	beq.n	800535e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800534c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005354:	f043 0220 	orr.w	r2, r3, #32
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005364:	2b00      	cmp	r3, #0
 8005366:	f000 820a 	beq.w	800577e <HAL_UART_IRQHandler+0x5aa>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800536a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800536e:	f003 0320 	and.w	r3, r3, #32
 8005372:	2b00      	cmp	r3, #0
 8005374:	d00d      	beq.n	8005392 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005376:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800537a:	f003 0320 	and.w	r3, r3, #32
 800537e:	2b00      	cmp	r3, #0
 8005380:	d007      	beq.n	8005392 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005386:	2b00      	cmp	r3, #0
 8005388:	d003      	beq.n	8005392 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800538e:	6878      	ldr	r0, [r7, #4]
 8005390:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005398:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	689b      	ldr	r3, [r3, #8]
 80053a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053a6:	2b40      	cmp	r3, #64	; 0x40
 80053a8:	d005      	beq.n	80053b6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80053aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80053ae:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d04f      	beq.n	8005456 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80053b6:	6878      	ldr	r0, [r7, #4]
 80053b8:	f000 fef4 	bl	80061a4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	689b      	ldr	r3, [r3, #8]
 80053c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053c6:	2b40      	cmp	r3, #64	; 0x40
 80053c8:	d141      	bne.n	800544e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	3308      	adds	r3, #8
 80053d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80053d8:	e853 3f00 	ldrex	r3, [r3]
 80053dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80053e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80053e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	3308      	adds	r3, #8
 80053f2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80053f6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80053fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053fe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005402:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005406:	e841 2300 	strex	r3, r2, [r1]
 800540a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800540e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005412:	2b00      	cmp	r3, #0
 8005414:	d1d9      	bne.n	80053ca <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800541a:	2b00      	cmp	r3, #0
 800541c:	d013      	beq.n	8005446 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005422:	4a13      	ldr	r2, [pc, #76]	; (8005470 <HAL_UART_IRQHandler+0x29c>)
 8005424:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800542a:	4618      	mov	r0, r3
 800542c:	f7fd f9de 	bl	80027ec <HAL_DMA_Abort_IT>
 8005430:	4603      	mov	r3, r0
 8005432:	2b00      	cmp	r3, #0
 8005434:	d017      	beq.n	8005466 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800543a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800543c:	687a      	ldr	r2, [r7, #4]
 800543e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8005440:	4610      	mov	r0, r2
 8005442:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005444:	e00f      	b.n	8005466 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005446:	6878      	ldr	r0, [r7, #4]
 8005448:	f000 f9ae 	bl	80057a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800544c:	e00b      	b.n	8005466 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800544e:	6878      	ldr	r0, [r7, #4]
 8005450:	f000 f9aa 	bl	80057a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005454:	e007      	b.n	8005466 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005456:	6878      	ldr	r0, [r7, #4]
 8005458:	f000 f9a6 	bl	80057a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2200      	movs	r2, #0
 8005460:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8005464:	e18b      	b.n	800577e <HAL_UART_IRQHandler+0x5aa>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005466:	bf00      	nop
    return;
 8005468:	e189      	b.n	800577e <HAL_UART_IRQHandler+0x5aa>
 800546a:	bf00      	nop
 800546c:	04000120 	.word	0x04000120
 8005470:	0800626b 	.word	0x0800626b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005478:	2b01      	cmp	r3, #1
 800547a:	f040 8144 	bne.w	8005706 <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800547e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005482:	f003 0310 	and.w	r3, r3, #16
 8005486:	2b00      	cmp	r3, #0
 8005488:	f000 813d 	beq.w	8005706 <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800548c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005490:	f003 0310 	and.w	r3, r3, #16
 8005494:	2b00      	cmp	r3, #0
 8005496:	f000 8136 	beq.w	8005706 <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	2210      	movs	r2, #16
 80054a0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	689b      	ldr	r3, [r3, #8]
 80054a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054ac:	2b40      	cmp	r3, #64	; 0x40
 80054ae:	f040 80b2 	bne.w	8005616 <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	685b      	ldr	r3, [r3, #4]
 80054ba:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80054be:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	f000 815d 	beq.w	8005782 <HAL_UART_IRQHandler+0x5ae>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80054ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80054d2:	429a      	cmp	r2, r3
 80054d4:	f080 8155 	bcs.w	8005782 <HAL_UART_IRQHandler+0x5ae>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80054de:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054e6:	69db      	ldr	r3, [r3, #28]
 80054e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054ec:	f000 8085 	beq.w	80055fa <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80054fc:	e853 3f00 	ldrex	r3, [r3]
 8005500:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005504:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005508:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800550c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	461a      	mov	r2, r3
 8005516:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800551a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800551e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005522:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005526:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800552a:	e841 2300 	strex	r3, r2, [r1]
 800552e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005532:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005536:	2b00      	cmp	r3, #0
 8005538:	d1da      	bne.n	80054f0 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	3308      	adds	r3, #8
 8005540:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005542:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005544:	e853 3f00 	ldrex	r3, [r3]
 8005548:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800554a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800554c:	f023 0301 	bic.w	r3, r3, #1
 8005550:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	3308      	adds	r3, #8
 800555a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800555e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005562:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005564:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005566:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800556a:	e841 2300 	strex	r3, r2, [r1]
 800556e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005570:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005572:	2b00      	cmp	r3, #0
 8005574:	d1e1      	bne.n	800553a <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	3308      	adds	r3, #8
 800557c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800557e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005580:	e853 3f00 	ldrex	r3, [r3]
 8005584:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005586:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005588:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800558c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	3308      	adds	r3, #8
 8005596:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800559a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800559c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800559e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80055a0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80055a2:	e841 2300 	strex	r3, r2, [r1]
 80055a6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80055a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d1e3      	bne.n	8005576 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2220      	movs	r2, #32
 80055b2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2200      	movs	r2, #0
 80055b8:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055c2:	e853 3f00 	ldrex	r3, [r3]
 80055c6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80055c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80055ca:	f023 0310 	bic.w	r3, r3, #16
 80055ce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	461a      	mov	r2, r3
 80055d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80055dc:	65bb      	str	r3, [r7, #88]	; 0x58
 80055de:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055e0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80055e2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80055e4:	e841 2300 	strex	r3, r2, [r1]
 80055e8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80055ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d1e4      	bne.n	80055ba <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055f4:	4618      	mov	r0, r3
 80055f6:	f7fd f889 	bl	800270c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005606:	b29b      	uxth	r3, r3
 8005608:	1ad3      	subs	r3, r2, r3
 800560a:	b29b      	uxth	r3, r3
 800560c:	4619      	mov	r1, r3
 800560e:	6878      	ldr	r0, [r7, #4]
 8005610:	f000 f8d4 	bl	80057bc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005614:	e0b5      	b.n	8005782 <HAL_UART_IRQHandler+0x5ae>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005622:	b29b      	uxth	r3, r3
 8005624:	1ad3      	subs	r3, r2, r3
 8005626:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005630:	b29b      	uxth	r3, r3
 8005632:	2b00      	cmp	r3, #0
 8005634:	f000 80a7 	beq.w	8005786 <HAL_UART_IRQHandler+0x5b2>
          && (nb_rx_data > 0U))
 8005638:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800563c:	2b00      	cmp	r3, #0
 800563e:	f000 80a2 	beq.w	8005786 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800564a:	e853 3f00 	ldrex	r3, [r3]
 800564e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005650:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005652:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005656:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	461a      	mov	r2, r3
 8005660:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005664:	647b      	str	r3, [r7, #68]	; 0x44
 8005666:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005668:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800566a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800566c:	e841 2300 	strex	r3, r2, [r1]
 8005670:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005672:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005674:	2b00      	cmp	r3, #0
 8005676:	d1e4      	bne.n	8005642 <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	3308      	adds	r3, #8
 800567e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005682:	e853 3f00 	ldrex	r3, [r3]
 8005686:	623b      	str	r3, [r7, #32]
   return(result);
 8005688:	6a3b      	ldr	r3, [r7, #32]
 800568a:	f023 0301 	bic.w	r3, r3, #1
 800568e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	3308      	adds	r3, #8
 8005698:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800569c:	633a      	str	r2, [r7, #48]	; 0x30
 800569e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056a0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80056a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056a4:	e841 2300 	strex	r3, r2, [r1]
 80056a8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80056aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d1e3      	bne.n	8005678 <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2220      	movs	r2, #32
 80056b4:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2200      	movs	r2, #0
 80056ba:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2200      	movs	r2, #0
 80056c0:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056c8:	693b      	ldr	r3, [r7, #16]
 80056ca:	e853 3f00 	ldrex	r3, [r3]
 80056ce:	60fb      	str	r3, [r7, #12]
   return(result);
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	f023 0310 	bic.w	r3, r3, #16
 80056d6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	461a      	mov	r2, r3
 80056e0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80056e4:	61fb      	str	r3, [r7, #28]
 80056e6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056e8:	69b9      	ldr	r1, [r7, #24]
 80056ea:	69fa      	ldr	r2, [r7, #28]
 80056ec:	e841 2300 	strex	r3, r2, [r1]
 80056f0:	617b      	str	r3, [r7, #20]
   return(result);
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d1e4      	bne.n	80056c2 <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80056f8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80056fc:	4619      	mov	r1, r3
 80056fe:	6878      	ldr	r0, [r7, #4]
 8005700:	f000 f85c 	bl	80057bc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005704:	e03f      	b.n	8005786 <HAL_UART_IRQHandler+0x5b2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005706:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800570a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800570e:	2b00      	cmp	r3, #0
 8005710:	d00e      	beq.n	8005730 <HAL_UART_IRQHandler+0x55c>
 8005712:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005716:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800571a:	2b00      	cmp	r3, #0
 800571c:	d008      	beq.n	8005730 <HAL_UART_IRQHandler+0x55c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005726:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005728:	6878      	ldr	r0, [r7, #4]
 800572a:	f000 f853 	bl	80057d4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800572e:	e02d      	b.n	800578c <HAL_UART_IRQHandler+0x5b8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005730:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005734:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005738:	2b00      	cmp	r3, #0
 800573a:	d00e      	beq.n	800575a <HAL_UART_IRQHandler+0x586>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800573c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005740:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005744:	2b00      	cmp	r3, #0
 8005746:	d008      	beq.n	800575a <HAL_UART_IRQHandler+0x586>
  {
    if (huart->TxISR != NULL)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800574c:	2b00      	cmp	r3, #0
 800574e:	d01c      	beq.n	800578a <HAL_UART_IRQHandler+0x5b6>
    {
      huart->TxISR(huart);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005754:	6878      	ldr	r0, [r7, #4]
 8005756:	4798      	blx	r3
    }
    return;
 8005758:	e017      	b.n	800578a <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800575a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800575e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005762:	2b00      	cmp	r3, #0
 8005764:	d012      	beq.n	800578c <HAL_UART_IRQHandler+0x5b8>
 8005766:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800576a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800576e:	2b00      	cmp	r3, #0
 8005770:	d00c      	beq.n	800578c <HAL_UART_IRQHandler+0x5b8>
  {
    UART_EndTransmit_IT(huart);
 8005772:	6878      	ldr	r0, [r7, #4]
 8005774:	f000 fe4a 	bl	800640c <UART_EndTransmit_IT>
    return;
 8005778:	e008      	b.n	800578c <HAL_UART_IRQHandler+0x5b8>
      return;
 800577a:	bf00      	nop
 800577c:	e006      	b.n	800578c <HAL_UART_IRQHandler+0x5b8>
    return;
 800577e:	bf00      	nop
 8005780:	e004      	b.n	800578c <HAL_UART_IRQHandler+0x5b8>
      return;
 8005782:	bf00      	nop
 8005784:	e002      	b.n	800578c <HAL_UART_IRQHandler+0x5b8>
      return;
 8005786:	bf00      	nop
 8005788:	e000      	b.n	800578c <HAL_UART_IRQHandler+0x5b8>
    return;
 800578a:	bf00      	nop
  }

}
 800578c:	37e8      	adds	r7, #232	; 0xe8
 800578e:	46bd      	mov	sp, r7
 8005790:	bd80      	pop	{r7, pc}
 8005792:	bf00      	nop

08005794 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005794:	b480      	push	{r7}
 8005796:	b083      	sub	sp, #12
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800579c:	bf00      	nop
 800579e:	370c      	adds	r7, #12
 80057a0:	46bd      	mov	sp, r7
 80057a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a6:	4770      	bx	lr

080057a8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80057a8:	b480      	push	{r7}
 80057aa:	b083      	sub	sp, #12
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80057b0:	bf00      	nop
 80057b2:	370c      	adds	r7, #12
 80057b4:	46bd      	mov	sp, r7
 80057b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ba:	4770      	bx	lr

080057bc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80057bc:	b480      	push	{r7}
 80057be:	b083      	sub	sp, #12
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
 80057c4:	460b      	mov	r3, r1
 80057c6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80057c8:	bf00      	nop
 80057ca:	370c      	adds	r7, #12
 80057cc:	46bd      	mov	sp, r7
 80057ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d2:	4770      	bx	lr

080057d4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80057d4:	b480      	push	{r7}
 80057d6:	b083      	sub	sp, #12
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80057dc:	bf00      	nop
 80057de:	370c      	adds	r7, #12
 80057e0:	46bd      	mov	sp, r7
 80057e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e6:	4770      	bx	lr

080057e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b088      	sub	sp, #32
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80057f0:	2300      	movs	r3, #0
 80057f2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	689a      	ldr	r2, [r3, #8]
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	691b      	ldr	r3, [r3, #16]
 80057fc:	431a      	orrs	r2, r3
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	695b      	ldr	r3, [r3, #20]
 8005802:	431a      	orrs	r2, r3
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	69db      	ldr	r3, [r3, #28]
 8005808:	4313      	orrs	r3, r2
 800580a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	681a      	ldr	r2, [r3, #0]
 8005812:	4ba6      	ldr	r3, [pc, #664]	; (8005aac <UART_SetConfig+0x2c4>)
 8005814:	4013      	ands	r3, r2
 8005816:	687a      	ldr	r2, [r7, #4]
 8005818:	6812      	ldr	r2, [r2, #0]
 800581a:	6979      	ldr	r1, [r7, #20]
 800581c:	430b      	orrs	r3, r1
 800581e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	685b      	ldr	r3, [r3, #4]
 8005826:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	68da      	ldr	r2, [r3, #12]
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	430a      	orrs	r2, r1
 8005834:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	699b      	ldr	r3, [r3, #24]
 800583a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6a1b      	ldr	r3, [r3, #32]
 8005840:	697a      	ldr	r2, [r7, #20]
 8005842:	4313      	orrs	r3, r2
 8005844:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	689b      	ldr	r3, [r3, #8]
 800584c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	697a      	ldr	r2, [r7, #20]
 8005856:	430a      	orrs	r2, r1
 8005858:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	4a94      	ldr	r2, [pc, #592]	; (8005ab0 <UART_SetConfig+0x2c8>)
 8005860:	4293      	cmp	r3, r2
 8005862:	d120      	bne.n	80058a6 <UART_SetConfig+0xbe>
 8005864:	4b93      	ldr	r3, [pc, #588]	; (8005ab4 <UART_SetConfig+0x2cc>)
 8005866:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800586a:	f003 0303 	and.w	r3, r3, #3
 800586e:	2b03      	cmp	r3, #3
 8005870:	d816      	bhi.n	80058a0 <UART_SetConfig+0xb8>
 8005872:	a201      	add	r2, pc, #4	; (adr r2, 8005878 <UART_SetConfig+0x90>)
 8005874:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005878:	08005889 	.word	0x08005889
 800587c:	08005895 	.word	0x08005895
 8005880:	0800588f 	.word	0x0800588f
 8005884:	0800589b 	.word	0x0800589b
 8005888:	2301      	movs	r3, #1
 800588a:	77fb      	strb	r3, [r7, #31]
 800588c:	e150      	b.n	8005b30 <UART_SetConfig+0x348>
 800588e:	2302      	movs	r3, #2
 8005890:	77fb      	strb	r3, [r7, #31]
 8005892:	e14d      	b.n	8005b30 <UART_SetConfig+0x348>
 8005894:	2304      	movs	r3, #4
 8005896:	77fb      	strb	r3, [r7, #31]
 8005898:	e14a      	b.n	8005b30 <UART_SetConfig+0x348>
 800589a:	2308      	movs	r3, #8
 800589c:	77fb      	strb	r3, [r7, #31]
 800589e:	e147      	b.n	8005b30 <UART_SetConfig+0x348>
 80058a0:	2310      	movs	r3, #16
 80058a2:	77fb      	strb	r3, [r7, #31]
 80058a4:	e144      	b.n	8005b30 <UART_SetConfig+0x348>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4a83      	ldr	r2, [pc, #524]	; (8005ab8 <UART_SetConfig+0x2d0>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d132      	bne.n	8005916 <UART_SetConfig+0x12e>
 80058b0:	4b80      	ldr	r3, [pc, #512]	; (8005ab4 <UART_SetConfig+0x2cc>)
 80058b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058b6:	f003 030c 	and.w	r3, r3, #12
 80058ba:	2b0c      	cmp	r3, #12
 80058bc:	d828      	bhi.n	8005910 <UART_SetConfig+0x128>
 80058be:	a201      	add	r2, pc, #4	; (adr r2, 80058c4 <UART_SetConfig+0xdc>)
 80058c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058c4:	080058f9 	.word	0x080058f9
 80058c8:	08005911 	.word	0x08005911
 80058cc:	08005911 	.word	0x08005911
 80058d0:	08005911 	.word	0x08005911
 80058d4:	08005905 	.word	0x08005905
 80058d8:	08005911 	.word	0x08005911
 80058dc:	08005911 	.word	0x08005911
 80058e0:	08005911 	.word	0x08005911
 80058e4:	080058ff 	.word	0x080058ff
 80058e8:	08005911 	.word	0x08005911
 80058ec:	08005911 	.word	0x08005911
 80058f0:	08005911 	.word	0x08005911
 80058f4:	0800590b 	.word	0x0800590b
 80058f8:	2300      	movs	r3, #0
 80058fa:	77fb      	strb	r3, [r7, #31]
 80058fc:	e118      	b.n	8005b30 <UART_SetConfig+0x348>
 80058fe:	2302      	movs	r3, #2
 8005900:	77fb      	strb	r3, [r7, #31]
 8005902:	e115      	b.n	8005b30 <UART_SetConfig+0x348>
 8005904:	2304      	movs	r3, #4
 8005906:	77fb      	strb	r3, [r7, #31]
 8005908:	e112      	b.n	8005b30 <UART_SetConfig+0x348>
 800590a:	2308      	movs	r3, #8
 800590c:	77fb      	strb	r3, [r7, #31]
 800590e:	e10f      	b.n	8005b30 <UART_SetConfig+0x348>
 8005910:	2310      	movs	r3, #16
 8005912:	77fb      	strb	r3, [r7, #31]
 8005914:	e10c      	b.n	8005b30 <UART_SetConfig+0x348>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	4a68      	ldr	r2, [pc, #416]	; (8005abc <UART_SetConfig+0x2d4>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d120      	bne.n	8005962 <UART_SetConfig+0x17a>
 8005920:	4b64      	ldr	r3, [pc, #400]	; (8005ab4 <UART_SetConfig+0x2cc>)
 8005922:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005926:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800592a:	2b30      	cmp	r3, #48	; 0x30
 800592c:	d013      	beq.n	8005956 <UART_SetConfig+0x16e>
 800592e:	2b30      	cmp	r3, #48	; 0x30
 8005930:	d814      	bhi.n	800595c <UART_SetConfig+0x174>
 8005932:	2b20      	cmp	r3, #32
 8005934:	d009      	beq.n	800594a <UART_SetConfig+0x162>
 8005936:	2b20      	cmp	r3, #32
 8005938:	d810      	bhi.n	800595c <UART_SetConfig+0x174>
 800593a:	2b00      	cmp	r3, #0
 800593c:	d002      	beq.n	8005944 <UART_SetConfig+0x15c>
 800593e:	2b10      	cmp	r3, #16
 8005940:	d006      	beq.n	8005950 <UART_SetConfig+0x168>
 8005942:	e00b      	b.n	800595c <UART_SetConfig+0x174>
 8005944:	2300      	movs	r3, #0
 8005946:	77fb      	strb	r3, [r7, #31]
 8005948:	e0f2      	b.n	8005b30 <UART_SetConfig+0x348>
 800594a:	2302      	movs	r3, #2
 800594c:	77fb      	strb	r3, [r7, #31]
 800594e:	e0ef      	b.n	8005b30 <UART_SetConfig+0x348>
 8005950:	2304      	movs	r3, #4
 8005952:	77fb      	strb	r3, [r7, #31]
 8005954:	e0ec      	b.n	8005b30 <UART_SetConfig+0x348>
 8005956:	2308      	movs	r3, #8
 8005958:	77fb      	strb	r3, [r7, #31]
 800595a:	e0e9      	b.n	8005b30 <UART_SetConfig+0x348>
 800595c:	2310      	movs	r3, #16
 800595e:	77fb      	strb	r3, [r7, #31]
 8005960:	e0e6      	b.n	8005b30 <UART_SetConfig+0x348>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4a56      	ldr	r2, [pc, #344]	; (8005ac0 <UART_SetConfig+0x2d8>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d120      	bne.n	80059ae <UART_SetConfig+0x1c6>
 800596c:	4b51      	ldr	r3, [pc, #324]	; (8005ab4 <UART_SetConfig+0x2cc>)
 800596e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005972:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005976:	2bc0      	cmp	r3, #192	; 0xc0
 8005978:	d013      	beq.n	80059a2 <UART_SetConfig+0x1ba>
 800597a:	2bc0      	cmp	r3, #192	; 0xc0
 800597c:	d814      	bhi.n	80059a8 <UART_SetConfig+0x1c0>
 800597e:	2b80      	cmp	r3, #128	; 0x80
 8005980:	d009      	beq.n	8005996 <UART_SetConfig+0x1ae>
 8005982:	2b80      	cmp	r3, #128	; 0x80
 8005984:	d810      	bhi.n	80059a8 <UART_SetConfig+0x1c0>
 8005986:	2b00      	cmp	r3, #0
 8005988:	d002      	beq.n	8005990 <UART_SetConfig+0x1a8>
 800598a:	2b40      	cmp	r3, #64	; 0x40
 800598c:	d006      	beq.n	800599c <UART_SetConfig+0x1b4>
 800598e:	e00b      	b.n	80059a8 <UART_SetConfig+0x1c0>
 8005990:	2300      	movs	r3, #0
 8005992:	77fb      	strb	r3, [r7, #31]
 8005994:	e0cc      	b.n	8005b30 <UART_SetConfig+0x348>
 8005996:	2302      	movs	r3, #2
 8005998:	77fb      	strb	r3, [r7, #31]
 800599a:	e0c9      	b.n	8005b30 <UART_SetConfig+0x348>
 800599c:	2304      	movs	r3, #4
 800599e:	77fb      	strb	r3, [r7, #31]
 80059a0:	e0c6      	b.n	8005b30 <UART_SetConfig+0x348>
 80059a2:	2308      	movs	r3, #8
 80059a4:	77fb      	strb	r3, [r7, #31]
 80059a6:	e0c3      	b.n	8005b30 <UART_SetConfig+0x348>
 80059a8:	2310      	movs	r3, #16
 80059aa:	77fb      	strb	r3, [r7, #31]
 80059ac:	e0c0      	b.n	8005b30 <UART_SetConfig+0x348>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4a44      	ldr	r2, [pc, #272]	; (8005ac4 <UART_SetConfig+0x2dc>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d125      	bne.n	8005a04 <UART_SetConfig+0x21c>
 80059b8:	4b3e      	ldr	r3, [pc, #248]	; (8005ab4 <UART_SetConfig+0x2cc>)
 80059ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80059c6:	d017      	beq.n	80059f8 <UART_SetConfig+0x210>
 80059c8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80059cc:	d817      	bhi.n	80059fe <UART_SetConfig+0x216>
 80059ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80059d2:	d00b      	beq.n	80059ec <UART_SetConfig+0x204>
 80059d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80059d8:	d811      	bhi.n	80059fe <UART_SetConfig+0x216>
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d003      	beq.n	80059e6 <UART_SetConfig+0x1fe>
 80059de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059e2:	d006      	beq.n	80059f2 <UART_SetConfig+0x20a>
 80059e4:	e00b      	b.n	80059fe <UART_SetConfig+0x216>
 80059e6:	2300      	movs	r3, #0
 80059e8:	77fb      	strb	r3, [r7, #31]
 80059ea:	e0a1      	b.n	8005b30 <UART_SetConfig+0x348>
 80059ec:	2302      	movs	r3, #2
 80059ee:	77fb      	strb	r3, [r7, #31]
 80059f0:	e09e      	b.n	8005b30 <UART_SetConfig+0x348>
 80059f2:	2304      	movs	r3, #4
 80059f4:	77fb      	strb	r3, [r7, #31]
 80059f6:	e09b      	b.n	8005b30 <UART_SetConfig+0x348>
 80059f8:	2308      	movs	r3, #8
 80059fa:	77fb      	strb	r3, [r7, #31]
 80059fc:	e098      	b.n	8005b30 <UART_SetConfig+0x348>
 80059fe:	2310      	movs	r3, #16
 8005a00:	77fb      	strb	r3, [r7, #31]
 8005a02:	e095      	b.n	8005b30 <UART_SetConfig+0x348>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	4a2f      	ldr	r2, [pc, #188]	; (8005ac8 <UART_SetConfig+0x2e0>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d125      	bne.n	8005a5a <UART_SetConfig+0x272>
 8005a0e:	4b29      	ldr	r3, [pc, #164]	; (8005ab4 <UART_SetConfig+0x2cc>)
 8005a10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a14:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005a18:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005a1c:	d017      	beq.n	8005a4e <UART_SetConfig+0x266>
 8005a1e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005a22:	d817      	bhi.n	8005a54 <UART_SetConfig+0x26c>
 8005a24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a28:	d00b      	beq.n	8005a42 <UART_SetConfig+0x25a>
 8005a2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a2e:	d811      	bhi.n	8005a54 <UART_SetConfig+0x26c>
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d003      	beq.n	8005a3c <UART_SetConfig+0x254>
 8005a34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a38:	d006      	beq.n	8005a48 <UART_SetConfig+0x260>
 8005a3a:	e00b      	b.n	8005a54 <UART_SetConfig+0x26c>
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	77fb      	strb	r3, [r7, #31]
 8005a40:	e076      	b.n	8005b30 <UART_SetConfig+0x348>
 8005a42:	2302      	movs	r3, #2
 8005a44:	77fb      	strb	r3, [r7, #31]
 8005a46:	e073      	b.n	8005b30 <UART_SetConfig+0x348>
 8005a48:	2304      	movs	r3, #4
 8005a4a:	77fb      	strb	r3, [r7, #31]
 8005a4c:	e070      	b.n	8005b30 <UART_SetConfig+0x348>
 8005a4e:	2308      	movs	r3, #8
 8005a50:	77fb      	strb	r3, [r7, #31]
 8005a52:	e06d      	b.n	8005b30 <UART_SetConfig+0x348>
 8005a54:	2310      	movs	r3, #16
 8005a56:	77fb      	strb	r3, [r7, #31]
 8005a58:	e06a      	b.n	8005b30 <UART_SetConfig+0x348>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4a1b      	ldr	r2, [pc, #108]	; (8005acc <UART_SetConfig+0x2e4>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d138      	bne.n	8005ad6 <UART_SetConfig+0x2ee>
 8005a64:	4b13      	ldr	r3, [pc, #76]	; (8005ab4 <UART_SetConfig+0x2cc>)
 8005a66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a6a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005a6e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005a72:	d017      	beq.n	8005aa4 <UART_SetConfig+0x2bc>
 8005a74:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005a78:	d82a      	bhi.n	8005ad0 <UART_SetConfig+0x2e8>
 8005a7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a7e:	d00b      	beq.n	8005a98 <UART_SetConfig+0x2b0>
 8005a80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a84:	d824      	bhi.n	8005ad0 <UART_SetConfig+0x2e8>
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d003      	beq.n	8005a92 <UART_SetConfig+0x2aa>
 8005a8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a8e:	d006      	beq.n	8005a9e <UART_SetConfig+0x2b6>
 8005a90:	e01e      	b.n	8005ad0 <UART_SetConfig+0x2e8>
 8005a92:	2300      	movs	r3, #0
 8005a94:	77fb      	strb	r3, [r7, #31]
 8005a96:	e04b      	b.n	8005b30 <UART_SetConfig+0x348>
 8005a98:	2302      	movs	r3, #2
 8005a9a:	77fb      	strb	r3, [r7, #31]
 8005a9c:	e048      	b.n	8005b30 <UART_SetConfig+0x348>
 8005a9e:	2304      	movs	r3, #4
 8005aa0:	77fb      	strb	r3, [r7, #31]
 8005aa2:	e045      	b.n	8005b30 <UART_SetConfig+0x348>
 8005aa4:	2308      	movs	r3, #8
 8005aa6:	77fb      	strb	r3, [r7, #31]
 8005aa8:	e042      	b.n	8005b30 <UART_SetConfig+0x348>
 8005aaa:	bf00      	nop
 8005aac:	efff69f3 	.word	0xefff69f3
 8005ab0:	40011000 	.word	0x40011000
 8005ab4:	40023800 	.word	0x40023800
 8005ab8:	40004400 	.word	0x40004400
 8005abc:	40004800 	.word	0x40004800
 8005ac0:	40004c00 	.word	0x40004c00
 8005ac4:	40005000 	.word	0x40005000
 8005ac8:	40011400 	.word	0x40011400
 8005acc:	40007800 	.word	0x40007800
 8005ad0:	2310      	movs	r3, #16
 8005ad2:	77fb      	strb	r3, [r7, #31]
 8005ad4:	e02c      	b.n	8005b30 <UART_SetConfig+0x348>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	4a72      	ldr	r2, [pc, #456]	; (8005ca4 <UART_SetConfig+0x4bc>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d125      	bne.n	8005b2c <UART_SetConfig+0x344>
 8005ae0:	4b71      	ldr	r3, [pc, #452]	; (8005ca8 <UART_SetConfig+0x4c0>)
 8005ae2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ae6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005aea:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005aee:	d017      	beq.n	8005b20 <UART_SetConfig+0x338>
 8005af0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005af4:	d817      	bhi.n	8005b26 <UART_SetConfig+0x33e>
 8005af6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005afa:	d00b      	beq.n	8005b14 <UART_SetConfig+0x32c>
 8005afc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b00:	d811      	bhi.n	8005b26 <UART_SetConfig+0x33e>
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d003      	beq.n	8005b0e <UART_SetConfig+0x326>
 8005b06:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005b0a:	d006      	beq.n	8005b1a <UART_SetConfig+0x332>
 8005b0c:	e00b      	b.n	8005b26 <UART_SetConfig+0x33e>
 8005b0e:	2300      	movs	r3, #0
 8005b10:	77fb      	strb	r3, [r7, #31]
 8005b12:	e00d      	b.n	8005b30 <UART_SetConfig+0x348>
 8005b14:	2302      	movs	r3, #2
 8005b16:	77fb      	strb	r3, [r7, #31]
 8005b18:	e00a      	b.n	8005b30 <UART_SetConfig+0x348>
 8005b1a:	2304      	movs	r3, #4
 8005b1c:	77fb      	strb	r3, [r7, #31]
 8005b1e:	e007      	b.n	8005b30 <UART_SetConfig+0x348>
 8005b20:	2308      	movs	r3, #8
 8005b22:	77fb      	strb	r3, [r7, #31]
 8005b24:	e004      	b.n	8005b30 <UART_SetConfig+0x348>
 8005b26:	2310      	movs	r3, #16
 8005b28:	77fb      	strb	r3, [r7, #31]
 8005b2a:	e001      	b.n	8005b30 <UART_SetConfig+0x348>
 8005b2c:	2310      	movs	r3, #16
 8005b2e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	69db      	ldr	r3, [r3, #28]
 8005b34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b38:	d15b      	bne.n	8005bf2 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8005b3a:	7ffb      	ldrb	r3, [r7, #31]
 8005b3c:	2b08      	cmp	r3, #8
 8005b3e:	d828      	bhi.n	8005b92 <UART_SetConfig+0x3aa>
 8005b40:	a201      	add	r2, pc, #4	; (adr r2, 8005b48 <UART_SetConfig+0x360>)
 8005b42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b46:	bf00      	nop
 8005b48:	08005b6d 	.word	0x08005b6d
 8005b4c:	08005b75 	.word	0x08005b75
 8005b50:	08005b7d 	.word	0x08005b7d
 8005b54:	08005b93 	.word	0x08005b93
 8005b58:	08005b83 	.word	0x08005b83
 8005b5c:	08005b93 	.word	0x08005b93
 8005b60:	08005b93 	.word	0x08005b93
 8005b64:	08005b93 	.word	0x08005b93
 8005b68:	08005b8b 	.word	0x08005b8b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b6c:	f7fd ffb6 	bl	8003adc <HAL_RCC_GetPCLK1Freq>
 8005b70:	61b8      	str	r0, [r7, #24]
        break;
 8005b72:	e013      	b.n	8005b9c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005b74:	f7fd ffc6 	bl	8003b04 <HAL_RCC_GetPCLK2Freq>
 8005b78:	61b8      	str	r0, [r7, #24]
        break;
 8005b7a:	e00f      	b.n	8005b9c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b7c:	4b4b      	ldr	r3, [pc, #300]	; (8005cac <UART_SetConfig+0x4c4>)
 8005b7e:	61bb      	str	r3, [r7, #24]
        break;
 8005b80:	e00c      	b.n	8005b9c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b82:	f7fd fe99 	bl	80038b8 <HAL_RCC_GetSysClockFreq>
 8005b86:	61b8      	str	r0, [r7, #24]
        break;
 8005b88:	e008      	b.n	8005b9c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b8e:	61bb      	str	r3, [r7, #24]
        break;
 8005b90:	e004      	b.n	8005b9c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8005b92:	2300      	movs	r3, #0
 8005b94:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005b96:	2301      	movs	r3, #1
 8005b98:	77bb      	strb	r3, [r7, #30]
        break;
 8005b9a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005b9c:	69bb      	ldr	r3, [r7, #24]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d074      	beq.n	8005c8c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005ba2:	69bb      	ldr	r3, [r7, #24]
 8005ba4:	005a      	lsls	r2, r3, #1
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	685b      	ldr	r3, [r3, #4]
 8005baa:	085b      	lsrs	r3, r3, #1
 8005bac:	441a      	add	r2, r3
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	685b      	ldr	r3, [r3, #4]
 8005bb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bb6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005bb8:	693b      	ldr	r3, [r7, #16]
 8005bba:	2b0f      	cmp	r3, #15
 8005bbc:	d916      	bls.n	8005bec <UART_SetConfig+0x404>
 8005bbe:	693b      	ldr	r3, [r7, #16]
 8005bc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005bc4:	d212      	bcs.n	8005bec <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005bc6:	693b      	ldr	r3, [r7, #16]
 8005bc8:	b29b      	uxth	r3, r3
 8005bca:	f023 030f 	bic.w	r3, r3, #15
 8005bce:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005bd0:	693b      	ldr	r3, [r7, #16]
 8005bd2:	085b      	lsrs	r3, r3, #1
 8005bd4:	b29b      	uxth	r3, r3
 8005bd6:	f003 0307 	and.w	r3, r3, #7
 8005bda:	b29a      	uxth	r2, r3
 8005bdc:	89fb      	ldrh	r3, [r7, #14]
 8005bde:	4313      	orrs	r3, r2
 8005be0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	89fa      	ldrh	r2, [r7, #14]
 8005be8:	60da      	str	r2, [r3, #12]
 8005bea:	e04f      	b.n	8005c8c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005bec:	2301      	movs	r3, #1
 8005bee:	77bb      	strb	r3, [r7, #30]
 8005bf0:	e04c      	b.n	8005c8c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005bf2:	7ffb      	ldrb	r3, [r7, #31]
 8005bf4:	2b08      	cmp	r3, #8
 8005bf6:	d828      	bhi.n	8005c4a <UART_SetConfig+0x462>
 8005bf8:	a201      	add	r2, pc, #4	; (adr r2, 8005c00 <UART_SetConfig+0x418>)
 8005bfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bfe:	bf00      	nop
 8005c00:	08005c25 	.word	0x08005c25
 8005c04:	08005c2d 	.word	0x08005c2d
 8005c08:	08005c35 	.word	0x08005c35
 8005c0c:	08005c4b 	.word	0x08005c4b
 8005c10:	08005c3b 	.word	0x08005c3b
 8005c14:	08005c4b 	.word	0x08005c4b
 8005c18:	08005c4b 	.word	0x08005c4b
 8005c1c:	08005c4b 	.word	0x08005c4b
 8005c20:	08005c43 	.word	0x08005c43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c24:	f7fd ff5a 	bl	8003adc <HAL_RCC_GetPCLK1Freq>
 8005c28:	61b8      	str	r0, [r7, #24]
        break;
 8005c2a:	e013      	b.n	8005c54 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c2c:	f7fd ff6a 	bl	8003b04 <HAL_RCC_GetPCLK2Freq>
 8005c30:	61b8      	str	r0, [r7, #24]
        break;
 8005c32:	e00f      	b.n	8005c54 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c34:	4b1d      	ldr	r3, [pc, #116]	; (8005cac <UART_SetConfig+0x4c4>)
 8005c36:	61bb      	str	r3, [r7, #24]
        break;
 8005c38:	e00c      	b.n	8005c54 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c3a:	f7fd fe3d 	bl	80038b8 <HAL_RCC_GetSysClockFreq>
 8005c3e:	61b8      	str	r0, [r7, #24]
        break;
 8005c40:	e008      	b.n	8005c54 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c46:	61bb      	str	r3, [r7, #24]
        break;
 8005c48:	e004      	b.n	8005c54 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005c4e:	2301      	movs	r3, #1
 8005c50:	77bb      	strb	r3, [r7, #30]
        break;
 8005c52:	bf00      	nop
    }

    if (pclk != 0U)
 8005c54:	69bb      	ldr	r3, [r7, #24]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d018      	beq.n	8005c8c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	685b      	ldr	r3, [r3, #4]
 8005c5e:	085a      	lsrs	r2, r3, #1
 8005c60:	69bb      	ldr	r3, [r7, #24]
 8005c62:	441a      	add	r2, r3
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	685b      	ldr	r3, [r3, #4]
 8005c68:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c6c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c6e:	693b      	ldr	r3, [r7, #16]
 8005c70:	2b0f      	cmp	r3, #15
 8005c72:	d909      	bls.n	8005c88 <UART_SetConfig+0x4a0>
 8005c74:	693b      	ldr	r3, [r7, #16]
 8005c76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c7a:	d205      	bcs.n	8005c88 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005c7c:	693b      	ldr	r3, [r7, #16]
 8005c7e:	b29a      	uxth	r2, r3
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	60da      	str	r2, [r3, #12]
 8005c86:	e001      	b.n	8005c8c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005c88:	2301      	movs	r3, #1
 8005c8a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2200      	movs	r2, #0
 8005c90:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2200      	movs	r2, #0
 8005c96:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005c98:	7fbb      	ldrb	r3, [r7, #30]
}
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	3720      	adds	r7, #32
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	bd80      	pop	{r7, pc}
 8005ca2:	bf00      	nop
 8005ca4:	40007c00 	.word	0x40007c00
 8005ca8:	40023800 	.word	0x40023800
 8005cac:	00f42400 	.word	0x00f42400

08005cb0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005cb0:	b480      	push	{r7}
 8005cb2:	b083      	sub	sp, #12
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cbc:	f003 0301 	and.w	r3, r3, #1
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d00a      	beq.n	8005cda <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	685b      	ldr	r3, [r3, #4]
 8005cca:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	430a      	orrs	r2, r1
 8005cd8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cde:	f003 0302 	and.w	r3, r3, #2
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d00a      	beq.n	8005cfc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	685b      	ldr	r3, [r3, #4]
 8005cec:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	430a      	orrs	r2, r1
 8005cfa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d00:	f003 0304 	and.w	r3, r3, #4
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d00a      	beq.n	8005d1e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	685b      	ldr	r3, [r3, #4]
 8005d0e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	430a      	orrs	r2, r1
 8005d1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d22:	f003 0308 	and.w	r3, r3, #8
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d00a      	beq.n	8005d40 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	685b      	ldr	r3, [r3, #4]
 8005d30:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	430a      	orrs	r2, r1
 8005d3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d44:	f003 0310 	and.w	r3, r3, #16
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d00a      	beq.n	8005d62 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	689b      	ldr	r3, [r3, #8]
 8005d52:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	430a      	orrs	r2, r1
 8005d60:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d66:	f003 0320 	and.w	r3, r3, #32
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d00a      	beq.n	8005d84 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	689b      	ldr	r3, [r3, #8]
 8005d74:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	430a      	orrs	r2, r1
 8005d82:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d01a      	beq.n	8005dc6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	685b      	ldr	r3, [r3, #4]
 8005d96:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	430a      	orrs	r2, r1
 8005da4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005daa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005dae:	d10a      	bne.n	8005dc6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	685b      	ldr	r3, [r3, #4]
 8005db6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	430a      	orrs	r2, r1
 8005dc4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d00a      	beq.n	8005de8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	685b      	ldr	r3, [r3, #4]
 8005dd8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	430a      	orrs	r2, r1
 8005de6:	605a      	str	r2, [r3, #4]
  }
}
 8005de8:	bf00      	nop
 8005dea:	370c      	adds	r7, #12
 8005dec:	46bd      	mov	sp, r7
 8005dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df2:	4770      	bx	lr

08005df4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b086      	sub	sp, #24
 8005df8:	af02      	add	r7, sp, #8
 8005dfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2200      	movs	r2, #0
 8005e00:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005e04:	f7fb fcea 	bl	80017dc <HAL_GetTick>
 8005e08:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f003 0308 	and.w	r3, r3, #8
 8005e14:	2b08      	cmp	r3, #8
 8005e16:	d10e      	bne.n	8005e36 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e18:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005e1c:	9300      	str	r3, [sp, #0]
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	2200      	movs	r2, #0
 8005e22:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005e26:	6878      	ldr	r0, [r7, #4]
 8005e28:	f000 f82d 	bl	8005e86 <UART_WaitOnFlagUntilTimeout>
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d001      	beq.n	8005e36 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e32:	2303      	movs	r3, #3
 8005e34:	e023      	b.n	8005e7e <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f003 0304 	and.w	r3, r3, #4
 8005e40:	2b04      	cmp	r3, #4
 8005e42:	d10e      	bne.n	8005e62 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e44:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005e48:	9300      	str	r3, [sp, #0]
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005e52:	6878      	ldr	r0, [r7, #4]
 8005e54:	f000 f817 	bl	8005e86 <UART_WaitOnFlagUntilTimeout>
 8005e58:	4603      	mov	r3, r0
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d001      	beq.n	8005e62 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e5e:	2303      	movs	r3, #3
 8005e60:	e00d      	b.n	8005e7e <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2220      	movs	r2, #32
 8005e66:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2220      	movs	r2, #32
 8005e6c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2200      	movs	r2, #0
 8005e72:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2200      	movs	r2, #0
 8005e78:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005e7c:	2300      	movs	r3, #0
}
 8005e7e:	4618      	mov	r0, r3
 8005e80:	3710      	adds	r7, #16
 8005e82:	46bd      	mov	sp, r7
 8005e84:	bd80      	pop	{r7, pc}

08005e86 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005e86:	b580      	push	{r7, lr}
 8005e88:	b09c      	sub	sp, #112	; 0x70
 8005e8a:	af00      	add	r7, sp, #0
 8005e8c:	60f8      	str	r0, [r7, #12]
 8005e8e:	60b9      	str	r1, [r7, #8]
 8005e90:	603b      	str	r3, [r7, #0]
 8005e92:	4613      	mov	r3, r2
 8005e94:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e96:	e0a5      	b.n	8005fe4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e98:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e9e:	f000 80a1 	beq.w	8005fe4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ea2:	f7fb fc9b 	bl	80017dc <HAL_GetTick>
 8005ea6:	4602      	mov	r2, r0
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	1ad3      	subs	r3, r2, r3
 8005eac:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005eae:	429a      	cmp	r2, r3
 8005eb0:	d302      	bcc.n	8005eb8 <UART_WaitOnFlagUntilTimeout+0x32>
 8005eb2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d13e      	bne.n	8005f36 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ebe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ec0:	e853 3f00 	ldrex	r3, [r3]
 8005ec4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005ec6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ec8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005ecc:	667b      	str	r3, [r7, #100]	; 0x64
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	461a      	mov	r2, r3
 8005ed4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005ed6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005ed8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eda:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005edc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005ede:	e841 2300 	strex	r3, r2, [r1]
 8005ee2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005ee4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d1e6      	bne.n	8005eb8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	3308      	adds	r3, #8
 8005ef0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ef2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ef4:	e853 3f00 	ldrex	r3, [r3]
 8005ef8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005efa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005efc:	f023 0301 	bic.w	r3, r3, #1
 8005f00:	663b      	str	r3, [r7, #96]	; 0x60
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	3308      	adds	r3, #8
 8005f08:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005f0a:	64ba      	str	r2, [r7, #72]	; 0x48
 8005f0c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f0e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005f10:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005f12:	e841 2300 	strex	r3, r2, [r1]
 8005f16:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005f18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d1e5      	bne.n	8005eea <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	2220      	movs	r2, #32
 8005f22:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	2220      	movs	r2, #32
 8005f28:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005f32:	2303      	movs	r3, #3
 8005f34:	e067      	b.n	8006006 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f003 0304 	and.w	r3, r3, #4
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d04f      	beq.n	8005fe4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	69db      	ldr	r3, [r3, #28]
 8005f4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f52:	d147      	bne.n	8005fe4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005f5c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f66:	e853 3f00 	ldrex	r3, [r3]
 8005f6a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f6e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005f72:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	461a      	mov	r2, r3
 8005f7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f7c:	637b      	str	r3, [r7, #52]	; 0x34
 8005f7e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f80:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005f82:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005f84:	e841 2300 	strex	r3, r2, [r1]
 8005f88:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d1e6      	bne.n	8005f5e <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	3308      	adds	r3, #8
 8005f96:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f98:	697b      	ldr	r3, [r7, #20]
 8005f9a:	e853 3f00 	ldrex	r3, [r3]
 8005f9e:	613b      	str	r3, [r7, #16]
   return(result);
 8005fa0:	693b      	ldr	r3, [r7, #16]
 8005fa2:	f023 0301 	bic.w	r3, r3, #1
 8005fa6:	66bb      	str	r3, [r7, #104]	; 0x68
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	3308      	adds	r3, #8
 8005fae:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005fb0:	623a      	str	r2, [r7, #32]
 8005fb2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fb4:	69f9      	ldr	r1, [r7, #28]
 8005fb6:	6a3a      	ldr	r2, [r7, #32]
 8005fb8:	e841 2300 	strex	r3, r2, [r1]
 8005fbc:	61bb      	str	r3, [r7, #24]
   return(result);
 8005fbe:	69bb      	ldr	r3, [r7, #24]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d1e5      	bne.n	8005f90 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	2220      	movs	r2, #32
 8005fc8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	2220      	movs	r2, #32
 8005fce:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	2220      	movs	r2, #32
 8005fd4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	2200      	movs	r2, #0
 8005fdc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005fe0:	2303      	movs	r3, #3
 8005fe2:	e010      	b.n	8006006 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	69da      	ldr	r2, [r3, #28]
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	4013      	ands	r3, r2
 8005fee:	68ba      	ldr	r2, [r7, #8]
 8005ff0:	429a      	cmp	r2, r3
 8005ff2:	bf0c      	ite	eq
 8005ff4:	2301      	moveq	r3, #1
 8005ff6:	2300      	movne	r3, #0
 8005ff8:	b2db      	uxtb	r3, r3
 8005ffa:	461a      	mov	r2, r3
 8005ffc:	79fb      	ldrb	r3, [r7, #7]
 8005ffe:	429a      	cmp	r2, r3
 8006000:	f43f af4a 	beq.w	8005e98 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006004:	2300      	movs	r3, #0
}
 8006006:	4618      	mov	r0, r3
 8006008:	3770      	adds	r7, #112	; 0x70
 800600a:	46bd      	mov	sp, r7
 800600c:	bd80      	pop	{r7, pc}
	...

08006010 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006010:	b480      	push	{r7}
 8006012:	b097      	sub	sp, #92	; 0x5c
 8006014:	af00      	add	r7, sp, #0
 8006016:	60f8      	str	r0, [r7, #12]
 8006018:	60b9      	str	r1, [r7, #8]
 800601a:	4613      	mov	r3, r2
 800601c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	68ba      	ldr	r2, [r7, #8]
 8006022:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	88fa      	ldrh	r2, [r7, #6]
 8006028:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	88fa      	ldrh	r2, [r7, #6]
 8006030:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	2200      	movs	r2, #0
 8006038:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	689b      	ldr	r3, [r3, #8]
 800603e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006042:	d10e      	bne.n	8006062 <UART_Start_Receive_IT+0x52>
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	691b      	ldr	r3, [r3, #16]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d105      	bne.n	8006058 <UART_Start_Receive_IT+0x48>
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006052:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006056:	e02d      	b.n	80060b4 <UART_Start_Receive_IT+0xa4>
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	22ff      	movs	r2, #255	; 0xff
 800605c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006060:	e028      	b.n	80060b4 <UART_Start_Receive_IT+0xa4>
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	689b      	ldr	r3, [r3, #8]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d10d      	bne.n	8006086 <UART_Start_Receive_IT+0x76>
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	691b      	ldr	r3, [r3, #16]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d104      	bne.n	800607c <UART_Start_Receive_IT+0x6c>
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	22ff      	movs	r2, #255	; 0xff
 8006076:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800607a:	e01b      	b.n	80060b4 <UART_Start_Receive_IT+0xa4>
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	227f      	movs	r2, #127	; 0x7f
 8006080:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006084:	e016      	b.n	80060b4 <UART_Start_Receive_IT+0xa4>
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	689b      	ldr	r3, [r3, #8]
 800608a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800608e:	d10d      	bne.n	80060ac <UART_Start_Receive_IT+0x9c>
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	691b      	ldr	r3, [r3, #16]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d104      	bne.n	80060a2 <UART_Start_Receive_IT+0x92>
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	227f      	movs	r2, #127	; 0x7f
 800609c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80060a0:	e008      	b.n	80060b4 <UART_Start_Receive_IT+0xa4>
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	223f      	movs	r2, #63	; 0x3f
 80060a6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80060aa:	e003      	b.n	80060b4 <UART_Start_Receive_IT+0xa4>
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	2200      	movs	r2, #0
 80060b0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	2200      	movs	r2, #0
 80060b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	2222      	movs	r2, #34	; 0x22
 80060c0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	3308      	adds	r3, #8
 80060c8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060cc:	e853 3f00 	ldrex	r3, [r3]
 80060d0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80060d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060d4:	f043 0301 	orr.w	r3, r3, #1
 80060d8:	657b      	str	r3, [r7, #84]	; 0x54
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	3308      	adds	r3, #8
 80060e0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80060e2:	64ba      	str	r2, [r7, #72]	; 0x48
 80060e4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060e6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80060e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80060ea:	e841 2300 	strex	r3, r2, [r1]
 80060ee:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80060f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d1e5      	bne.n	80060c2 <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	689b      	ldr	r3, [r3, #8]
 80060fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060fe:	d107      	bne.n	8006110 <UART_Start_Receive_IT+0x100>
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	691b      	ldr	r3, [r3, #16]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d103      	bne.n	8006110 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	4a24      	ldr	r2, [pc, #144]	; (800619c <UART_Start_Receive_IT+0x18c>)
 800610c:	665a      	str	r2, [r3, #100]	; 0x64
 800610e:	e002      	b.n	8006116 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	4a23      	ldr	r2, [pc, #140]	; (80061a0 <UART_Start_Receive_IT+0x190>)
 8006114:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	2200      	movs	r2, #0
 800611a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	691b      	ldr	r3, [r3, #16]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d019      	beq.n	800615a <UART_Start_Receive_IT+0x14a>
  { 
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800612c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800612e:	e853 3f00 	ldrex	r3, [r3]
 8006132:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006136:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800613a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	461a      	mov	r2, r3
 8006142:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006144:	637b      	str	r3, [r7, #52]	; 0x34
 8006146:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006148:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800614a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800614c:	e841 2300 	strex	r3, r2, [r1]
 8006150:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006154:	2b00      	cmp	r3, #0
 8006156:	d1e6      	bne.n	8006126 <UART_Start_Receive_IT+0x116>
 8006158:	e018      	b.n	800618c <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006160:	697b      	ldr	r3, [r7, #20]
 8006162:	e853 3f00 	ldrex	r3, [r3]
 8006166:	613b      	str	r3, [r7, #16]
   return(result);
 8006168:	693b      	ldr	r3, [r7, #16]
 800616a:	f043 0320 	orr.w	r3, r3, #32
 800616e:	653b      	str	r3, [r7, #80]	; 0x50
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	461a      	mov	r2, r3
 8006176:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006178:	623b      	str	r3, [r7, #32]
 800617a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800617c:	69f9      	ldr	r1, [r7, #28]
 800617e:	6a3a      	ldr	r2, [r7, #32]
 8006180:	e841 2300 	strex	r3, r2, [r1]
 8006184:	61bb      	str	r3, [r7, #24]
   return(result);
 8006186:	69bb      	ldr	r3, [r7, #24]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d1e6      	bne.n	800615a <UART_Start_Receive_IT+0x14a>
  }
  return HAL_OK;
 800618c:	2300      	movs	r3, #0
}
 800618e:	4618      	mov	r0, r3
 8006190:	375c      	adds	r7, #92	; 0x5c
 8006192:	46bd      	mov	sp, r7
 8006194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006198:	4770      	bx	lr
 800619a:	bf00      	nop
 800619c:	080065bd 	.word	0x080065bd
 80061a0:	08006461 	.word	0x08006461

080061a4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80061a4:	b480      	push	{r7}
 80061a6:	b095      	sub	sp, #84	; 0x54
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061b4:	e853 3f00 	ldrex	r3, [r3]
 80061b8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80061ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061bc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80061c0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	461a      	mov	r2, r3
 80061c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061ca:	643b      	str	r3, [r7, #64]	; 0x40
 80061cc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061ce:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80061d0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80061d2:	e841 2300 	strex	r3, r2, [r1]
 80061d6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80061d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d1e6      	bne.n	80061ac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	3308      	adds	r3, #8
 80061e4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061e6:	6a3b      	ldr	r3, [r7, #32]
 80061e8:	e853 3f00 	ldrex	r3, [r3]
 80061ec:	61fb      	str	r3, [r7, #28]
   return(result);
 80061ee:	69fb      	ldr	r3, [r7, #28]
 80061f0:	f023 0301 	bic.w	r3, r3, #1
 80061f4:	64bb      	str	r3, [r7, #72]	; 0x48
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	3308      	adds	r3, #8
 80061fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80061fe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006200:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006202:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006204:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006206:	e841 2300 	strex	r3, r2, [r1]
 800620a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800620c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800620e:	2b00      	cmp	r3, #0
 8006210:	d1e5      	bne.n	80061de <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006216:	2b01      	cmp	r3, #1
 8006218:	d118      	bne.n	800624c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	e853 3f00 	ldrex	r3, [r3]
 8006226:	60bb      	str	r3, [r7, #8]
   return(result);
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	f023 0310 	bic.w	r3, r3, #16
 800622e:	647b      	str	r3, [r7, #68]	; 0x44
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	461a      	mov	r2, r3
 8006236:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006238:	61bb      	str	r3, [r7, #24]
 800623a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800623c:	6979      	ldr	r1, [r7, #20]
 800623e:	69ba      	ldr	r2, [r7, #24]
 8006240:	e841 2300 	strex	r3, r2, [r1]
 8006244:	613b      	str	r3, [r7, #16]
   return(result);
 8006246:	693b      	ldr	r3, [r7, #16]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d1e6      	bne.n	800621a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2220      	movs	r2, #32
 8006250:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2200      	movs	r2, #0
 8006256:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2200      	movs	r2, #0
 800625c:	665a      	str	r2, [r3, #100]	; 0x64
}
 800625e:	bf00      	nop
 8006260:	3754      	adds	r7, #84	; 0x54
 8006262:	46bd      	mov	sp, r7
 8006264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006268:	4770      	bx	lr

0800626a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800626a:	b580      	push	{r7, lr}
 800626c:	b084      	sub	sp, #16
 800626e:	af00      	add	r7, sp, #0
 8006270:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006276:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	2200      	movs	r2, #0
 800627c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	2200      	movs	r2, #0
 8006284:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006288:	68f8      	ldr	r0, [r7, #12]
 800628a:	f7ff fa8d 	bl	80057a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800628e:	bf00      	nop
 8006290:	3710      	adds	r7, #16
 8006292:	46bd      	mov	sp, r7
 8006294:	bd80      	pop	{r7, pc}

08006296 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006296:	b480      	push	{r7}
 8006298:	b08f      	sub	sp, #60	; 0x3c
 800629a:	af00      	add	r7, sp, #0
 800629c:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80062a2:	2b21      	cmp	r3, #33	; 0x21
 80062a4:	d14c      	bne.n	8006340 <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80062ac:	b29b      	uxth	r3, r3
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d132      	bne.n	8006318 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062b8:	6a3b      	ldr	r3, [r7, #32]
 80062ba:	e853 3f00 	ldrex	r3, [r3]
 80062be:	61fb      	str	r3, [r7, #28]
   return(result);
 80062c0:	69fb      	ldr	r3, [r7, #28]
 80062c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80062c6:	637b      	str	r3, [r7, #52]	; 0x34
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	461a      	mov	r2, r3
 80062ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80062d2:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80062d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80062d8:	e841 2300 	strex	r3, r2, [r1]
 80062dc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80062de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d1e6      	bne.n	80062b2 <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	e853 3f00 	ldrex	r3, [r3]
 80062f0:	60bb      	str	r3, [r7, #8]
   return(result);
 80062f2:	68bb      	ldr	r3, [r7, #8]
 80062f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80062f8:	633b      	str	r3, [r7, #48]	; 0x30
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	461a      	mov	r2, r3
 8006300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006302:	61bb      	str	r3, [r7, #24]
 8006304:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006306:	6979      	ldr	r1, [r7, #20]
 8006308:	69ba      	ldr	r2, [r7, #24]
 800630a:	e841 2300 	strex	r3, r2, [r1]
 800630e:	613b      	str	r3, [r7, #16]
   return(result);
 8006310:	693b      	ldr	r3, [r7, #16]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d1e6      	bne.n	80062e4 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8006316:	e013      	b.n	8006340 <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800631c:	781a      	ldrb	r2, [r3, #0]
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006328:	1c5a      	adds	r2, r3, #1
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006334:	b29b      	uxth	r3, r3
 8006336:	3b01      	subs	r3, #1
 8006338:	b29a      	uxth	r2, r3
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8006340:	bf00      	nop
 8006342:	373c      	adds	r7, #60	; 0x3c
 8006344:	46bd      	mov	sp, r7
 8006346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634a:	4770      	bx	lr

0800634c <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800634c:	b480      	push	{r7}
 800634e:	b091      	sub	sp, #68	; 0x44
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006358:	2b21      	cmp	r3, #33	; 0x21
 800635a:	d151      	bne.n	8006400 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006362:	b29b      	uxth	r3, r3
 8006364:	2b00      	cmp	r3, #0
 8006366:	d132      	bne.n	80063ce <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800636e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006370:	e853 3f00 	ldrex	r3, [r3]
 8006374:	623b      	str	r3, [r7, #32]
   return(result);
 8006376:	6a3b      	ldr	r3, [r7, #32]
 8006378:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800637c:	63bb      	str	r3, [r7, #56]	; 0x38
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	461a      	mov	r2, r3
 8006384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006386:	633b      	str	r3, [r7, #48]	; 0x30
 8006388:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800638a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800638c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800638e:	e841 2300 	strex	r3, r2, [r1]
 8006392:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006396:	2b00      	cmp	r3, #0
 8006398:	d1e6      	bne.n	8006368 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063a0:	693b      	ldr	r3, [r7, #16]
 80063a2:	e853 3f00 	ldrex	r3, [r3]
 80063a6:	60fb      	str	r3, [r7, #12]
   return(result);
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80063ae:	637b      	str	r3, [r7, #52]	; 0x34
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	461a      	mov	r2, r3
 80063b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063b8:	61fb      	str	r3, [r7, #28]
 80063ba:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063bc:	69b9      	ldr	r1, [r7, #24]
 80063be:	69fa      	ldr	r2, [r7, #28]
 80063c0:	e841 2300 	strex	r3, r2, [r1]
 80063c4:	617b      	str	r3, [r7, #20]
   return(result);
 80063c6:	697b      	ldr	r3, [r7, #20]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d1e6      	bne.n	800639a <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80063cc:	e018      	b.n	8006400 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063d2:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80063d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063d6:	881b      	ldrh	r3, [r3, #0]
 80063d8:	461a      	mov	r2, r3
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80063e2:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063e8:	1c9a      	adds	r2, r3, #2
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80063f4:	b29b      	uxth	r3, r3
 80063f6:	3b01      	subs	r3, #1
 80063f8:	b29a      	uxth	r2, r3
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8006400:	bf00      	nop
 8006402:	3744      	adds	r7, #68	; 0x44
 8006404:	46bd      	mov	sp, r7
 8006406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640a:	4770      	bx	lr

0800640c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b088      	sub	sp, #32
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	e853 3f00 	ldrex	r3, [r3]
 8006420:	60bb      	str	r3, [r7, #8]
   return(result);
 8006422:	68bb      	ldr	r3, [r7, #8]
 8006424:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006428:	61fb      	str	r3, [r7, #28]
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	461a      	mov	r2, r3
 8006430:	69fb      	ldr	r3, [r7, #28]
 8006432:	61bb      	str	r3, [r7, #24]
 8006434:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006436:	6979      	ldr	r1, [r7, #20]
 8006438:	69ba      	ldr	r2, [r7, #24]
 800643a:	e841 2300 	strex	r3, r2, [r1]
 800643e:	613b      	str	r3, [r7, #16]
   return(result);
 8006440:	693b      	ldr	r3, [r7, #16]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d1e6      	bne.n	8006414 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2220      	movs	r2, #32
 800644a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2200      	movs	r2, #0
 8006450:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006452:	6878      	ldr	r0, [r7, #4]
 8006454:	f7ff f99e 	bl	8005794 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006458:	bf00      	nop
 800645a:	3720      	adds	r7, #32
 800645c:	46bd      	mov	sp, r7
 800645e:	bd80      	pop	{r7, pc}

08006460 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b096      	sub	sp, #88	; 0x58
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800646e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006476:	2b22      	cmp	r3, #34	; 0x22
 8006478:	f040 8094 	bne.w	80065a4 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006482:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006486:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800648a:	b2d9      	uxtb	r1, r3
 800648c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006490:	b2da      	uxtb	r2, r3
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006496:	400a      	ands	r2, r1
 8006498:	b2d2      	uxtb	r2, r2
 800649a:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064a0:	1c5a      	adds	r2, r3, #1
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80064ac:	b29b      	uxth	r3, r3
 80064ae:	3b01      	subs	r3, #1
 80064b0:	b29a      	uxth	r2, r3
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80064be:	b29b      	uxth	r3, r3
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d177      	bne.n	80065b4 <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064cc:	e853 3f00 	ldrex	r3, [r3]
 80064d0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80064d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064d4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80064d8:	653b      	str	r3, [r7, #80]	; 0x50
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	461a      	mov	r2, r3
 80064e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80064e2:	647b      	str	r3, [r7, #68]	; 0x44
 80064e4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064e6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80064e8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80064ea:	e841 2300 	strex	r3, r2, [r1]
 80064ee:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80064f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d1e6      	bne.n	80064c4 <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	3308      	adds	r3, #8
 80064fc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006500:	e853 3f00 	ldrex	r3, [r3]
 8006504:	623b      	str	r3, [r7, #32]
   return(result);
 8006506:	6a3b      	ldr	r3, [r7, #32]
 8006508:	f023 0301 	bic.w	r3, r3, #1
 800650c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	3308      	adds	r3, #8
 8006514:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006516:	633a      	str	r2, [r7, #48]	; 0x30
 8006518:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800651a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800651c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800651e:	e841 2300 	strex	r3, r2, [r1]
 8006522:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006526:	2b00      	cmp	r3, #0
 8006528:	d1e5      	bne.n	80064f6 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2220      	movs	r2, #32
 800652e:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2200      	movs	r2, #0
 8006534:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800653a:	2b01      	cmp	r3, #1
 800653c:	d12e      	bne.n	800659c <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2200      	movs	r2, #0
 8006542:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800654a:	693b      	ldr	r3, [r7, #16]
 800654c:	e853 3f00 	ldrex	r3, [r3]
 8006550:	60fb      	str	r3, [r7, #12]
   return(result);
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	f023 0310 	bic.w	r3, r3, #16
 8006558:	64bb      	str	r3, [r7, #72]	; 0x48
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	461a      	mov	r2, r3
 8006560:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006562:	61fb      	str	r3, [r7, #28]
 8006564:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006566:	69b9      	ldr	r1, [r7, #24]
 8006568:	69fa      	ldr	r2, [r7, #28]
 800656a:	e841 2300 	strex	r3, r2, [r1]
 800656e:	617b      	str	r3, [r7, #20]
   return(result);
 8006570:	697b      	ldr	r3, [r7, #20]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d1e6      	bne.n	8006544 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	69db      	ldr	r3, [r3, #28]
 800657c:	f003 0310 	and.w	r3, r3, #16
 8006580:	2b10      	cmp	r3, #16
 8006582:	d103      	bne.n	800658c <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	2210      	movs	r2, #16
 800658a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006592:	4619      	mov	r1, r3
 8006594:	6878      	ldr	r0, [r7, #4]
 8006596:	f7ff f911 	bl	80057bc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800659a:	e00b      	b.n	80065b4 <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 800659c:	6878      	ldr	r0, [r7, #4]
 800659e:	f7fa fc93 	bl	8000ec8 <HAL_UART_RxCpltCallback>
}
 80065a2:	e007      	b.n	80065b4 <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	699a      	ldr	r2, [r3, #24]
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f042 0208 	orr.w	r2, r2, #8
 80065b2:	619a      	str	r2, [r3, #24]
}
 80065b4:	bf00      	nop
 80065b6:	3758      	adds	r7, #88	; 0x58
 80065b8:	46bd      	mov	sp, r7
 80065ba:	bd80      	pop	{r7, pc}

080065bc <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b096      	sub	sp, #88	; 0x58
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80065ca:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80065d2:	2b22      	cmp	r3, #34	; 0x22
 80065d4:	f040 8094 	bne.w	8006700 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065de:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065e6:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80065e8:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80065ec:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80065f0:	4013      	ands	r3, r2
 80065f2:	b29a      	uxth	r2, r3
 80065f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80065f6:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065fc:	1c9a      	adds	r2, r3, #2
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006608:	b29b      	uxth	r3, r3
 800660a:	3b01      	subs	r3, #1
 800660c:	b29a      	uxth	r2, r3
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800661a:	b29b      	uxth	r3, r3
 800661c:	2b00      	cmp	r3, #0
 800661e:	d177      	bne.n	8006710 <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006626:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006628:	e853 3f00 	ldrex	r3, [r3]
 800662c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800662e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006630:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006634:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	461a      	mov	r2, r3
 800663c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800663e:	643b      	str	r3, [r7, #64]	; 0x40
 8006640:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006642:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006644:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006646:	e841 2300 	strex	r3, r2, [r1]
 800664a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800664c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800664e:	2b00      	cmp	r3, #0
 8006650:	d1e6      	bne.n	8006620 <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	3308      	adds	r3, #8
 8006658:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800665a:	6a3b      	ldr	r3, [r7, #32]
 800665c:	e853 3f00 	ldrex	r3, [r3]
 8006660:	61fb      	str	r3, [r7, #28]
   return(result);
 8006662:	69fb      	ldr	r3, [r7, #28]
 8006664:	f023 0301 	bic.w	r3, r3, #1
 8006668:	64bb      	str	r3, [r7, #72]	; 0x48
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	3308      	adds	r3, #8
 8006670:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006672:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006674:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006676:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006678:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800667a:	e841 2300 	strex	r3, r2, [r1]
 800667e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006682:	2b00      	cmp	r3, #0
 8006684:	d1e5      	bne.n	8006652 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2220      	movs	r2, #32
 800668a:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2200      	movs	r2, #0
 8006690:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006696:	2b01      	cmp	r3, #1
 8006698:	d12e      	bne.n	80066f8 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2200      	movs	r2, #0
 800669e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	e853 3f00 	ldrex	r3, [r3]
 80066ac:	60bb      	str	r3, [r7, #8]
   return(result);
 80066ae:	68bb      	ldr	r3, [r7, #8]
 80066b0:	f023 0310 	bic.w	r3, r3, #16
 80066b4:	647b      	str	r3, [r7, #68]	; 0x44
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	461a      	mov	r2, r3
 80066bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80066be:	61bb      	str	r3, [r7, #24]
 80066c0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066c2:	6979      	ldr	r1, [r7, #20]
 80066c4:	69ba      	ldr	r2, [r7, #24]
 80066c6:	e841 2300 	strex	r3, r2, [r1]
 80066ca:	613b      	str	r3, [r7, #16]
   return(result);
 80066cc:	693b      	ldr	r3, [r7, #16]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d1e6      	bne.n	80066a0 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	69db      	ldr	r3, [r3, #28]
 80066d8:	f003 0310 	and.w	r3, r3, #16
 80066dc:	2b10      	cmp	r3, #16
 80066de:	d103      	bne.n	80066e8 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	2210      	movs	r2, #16
 80066e6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80066ee:	4619      	mov	r1, r3
 80066f0:	6878      	ldr	r0, [r7, #4]
 80066f2:	f7ff f863 	bl	80057bc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80066f6:	e00b      	b.n	8006710 <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 80066f8:	6878      	ldr	r0, [r7, #4]
 80066fa:	f7fa fbe5 	bl	8000ec8 <HAL_UART_RxCpltCallback>
}
 80066fe:	e007      	b.n	8006710 <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	699a      	ldr	r2, [r3, #24]
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f042 0208 	orr.w	r2, r2, #8
 800670e:	619a      	str	r2, [r3, #24]
}
 8006710:	bf00      	nop
 8006712:	3758      	adds	r7, #88	; 0x58
 8006714:	46bd      	mov	sp, r7
 8006716:	bd80      	pop	{r7, pc}

08006718 <__errno>:
 8006718:	4b01      	ldr	r3, [pc, #4]	; (8006720 <__errno+0x8>)
 800671a:	6818      	ldr	r0, [r3, #0]
 800671c:	4770      	bx	lr
 800671e:	bf00      	nop
 8006720:	2000000c 	.word	0x2000000c

08006724 <__libc_init_array>:
 8006724:	b570      	push	{r4, r5, r6, lr}
 8006726:	4d0d      	ldr	r5, [pc, #52]	; (800675c <__libc_init_array+0x38>)
 8006728:	4c0d      	ldr	r4, [pc, #52]	; (8006760 <__libc_init_array+0x3c>)
 800672a:	1b64      	subs	r4, r4, r5
 800672c:	10a4      	asrs	r4, r4, #2
 800672e:	2600      	movs	r6, #0
 8006730:	42a6      	cmp	r6, r4
 8006732:	d109      	bne.n	8006748 <__libc_init_array+0x24>
 8006734:	4d0b      	ldr	r5, [pc, #44]	; (8006764 <__libc_init_array+0x40>)
 8006736:	4c0c      	ldr	r4, [pc, #48]	; (8006768 <__libc_init_array+0x44>)
 8006738:	f000 fc8e 	bl	8007058 <_init>
 800673c:	1b64      	subs	r4, r4, r5
 800673e:	10a4      	asrs	r4, r4, #2
 8006740:	2600      	movs	r6, #0
 8006742:	42a6      	cmp	r6, r4
 8006744:	d105      	bne.n	8006752 <__libc_init_array+0x2e>
 8006746:	bd70      	pop	{r4, r5, r6, pc}
 8006748:	f855 3b04 	ldr.w	r3, [r5], #4
 800674c:	4798      	blx	r3
 800674e:	3601      	adds	r6, #1
 8006750:	e7ee      	b.n	8006730 <__libc_init_array+0xc>
 8006752:	f855 3b04 	ldr.w	r3, [r5], #4
 8006756:	4798      	blx	r3
 8006758:	3601      	adds	r6, #1
 800675a:	e7f2      	b.n	8006742 <__libc_init_array+0x1e>
 800675c:	0800711c 	.word	0x0800711c
 8006760:	0800711c 	.word	0x0800711c
 8006764:	0800711c 	.word	0x0800711c
 8006768:	08007120 	.word	0x08007120

0800676c <memset>:
 800676c:	4402      	add	r2, r0
 800676e:	4603      	mov	r3, r0
 8006770:	4293      	cmp	r3, r2
 8006772:	d100      	bne.n	8006776 <memset+0xa>
 8006774:	4770      	bx	lr
 8006776:	f803 1b01 	strb.w	r1, [r3], #1
 800677a:	e7f9      	b.n	8006770 <memset+0x4>

0800677c <siprintf>:
 800677c:	b40e      	push	{r1, r2, r3}
 800677e:	b500      	push	{lr}
 8006780:	b09c      	sub	sp, #112	; 0x70
 8006782:	ab1d      	add	r3, sp, #116	; 0x74
 8006784:	9002      	str	r0, [sp, #8]
 8006786:	9006      	str	r0, [sp, #24]
 8006788:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800678c:	4809      	ldr	r0, [pc, #36]	; (80067b4 <siprintf+0x38>)
 800678e:	9107      	str	r1, [sp, #28]
 8006790:	9104      	str	r1, [sp, #16]
 8006792:	4909      	ldr	r1, [pc, #36]	; (80067b8 <siprintf+0x3c>)
 8006794:	f853 2b04 	ldr.w	r2, [r3], #4
 8006798:	9105      	str	r1, [sp, #20]
 800679a:	6800      	ldr	r0, [r0, #0]
 800679c:	9301      	str	r3, [sp, #4]
 800679e:	a902      	add	r1, sp, #8
 80067a0:	f000 f868 	bl	8006874 <_svfiprintf_r>
 80067a4:	9b02      	ldr	r3, [sp, #8]
 80067a6:	2200      	movs	r2, #0
 80067a8:	701a      	strb	r2, [r3, #0]
 80067aa:	b01c      	add	sp, #112	; 0x70
 80067ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80067b0:	b003      	add	sp, #12
 80067b2:	4770      	bx	lr
 80067b4:	2000000c 	.word	0x2000000c
 80067b8:	ffff0208 	.word	0xffff0208

080067bc <__ssputs_r>:
 80067bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067c0:	688e      	ldr	r6, [r1, #8]
 80067c2:	429e      	cmp	r6, r3
 80067c4:	4682      	mov	sl, r0
 80067c6:	460c      	mov	r4, r1
 80067c8:	4690      	mov	r8, r2
 80067ca:	461f      	mov	r7, r3
 80067cc:	d838      	bhi.n	8006840 <__ssputs_r+0x84>
 80067ce:	898a      	ldrh	r2, [r1, #12]
 80067d0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80067d4:	d032      	beq.n	800683c <__ssputs_r+0x80>
 80067d6:	6825      	ldr	r5, [r4, #0]
 80067d8:	6909      	ldr	r1, [r1, #16]
 80067da:	eba5 0901 	sub.w	r9, r5, r1
 80067de:	6965      	ldr	r5, [r4, #20]
 80067e0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80067e4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80067e8:	3301      	adds	r3, #1
 80067ea:	444b      	add	r3, r9
 80067ec:	106d      	asrs	r5, r5, #1
 80067ee:	429d      	cmp	r5, r3
 80067f0:	bf38      	it	cc
 80067f2:	461d      	movcc	r5, r3
 80067f4:	0553      	lsls	r3, r2, #21
 80067f6:	d531      	bpl.n	800685c <__ssputs_r+0xa0>
 80067f8:	4629      	mov	r1, r5
 80067fa:	f000 fb63 	bl	8006ec4 <_malloc_r>
 80067fe:	4606      	mov	r6, r0
 8006800:	b950      	cbnz	r0, 8006818 <__ssputs_r+0x5c>
 8006802:	230c      	movs	r3, #12
 8006804:	f8ca 3000 	str.w	r3, [sl]
 8006808:	89a3      	ldrh	r3, [r4, #12]
 800680a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800680e:	81a3      	strh	r3, [r4, #12]
 8006810:	f04f 30ff 	mov.w	r0, #4294967295
 8006814:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006818:	6921      	ldr	r1, [r4, #16]
 800681a:	464a      	mov	r2, r9
 800681c:	f000 fabe 	bl	8006d9c <memcpy>
 8006820:	89a3      	ldrh	r3, [r4, #12]
 8006822:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006826:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800682a:	81a3      	strh	r3, [r4, #12]
 800682c:	6126      	str	r6, [r4, #16]
 800682e:	6165      	str	r5, [r4, #20]
 8006830:	444e      	add	r6, r9
 8006832:	eba5 0509 	sub.w	r5, r5, r9
 8006836:	6026      	str	r6, [r4, #0]
 8006838:	60a5      	str	r5, [r4, #8]
 800683a:	463e      	mov	r6, r7
 800683c:	42be      	cmp	r6, r7
 800683e:	d900      	bls.n	8006842 <__ssputs_r+0x86>
 8006840:	463e      	mov	r6, r7
 8006842:	6820      	ldr	r0, [r4, #0]
 8006844:	4632      	mov	r2, r6
 8006846:	4641      	mov	r1, r8
 8006848:	f000 fab6 	bl	8006db8 <memmove>
 800684c:	68a3      	ldr	r3, [r4, #8]
 800684e:	1b9b      	subs	r3, r3, r6
 8006850:	60a3      	str	r3, [r4, #8]
 8006852:	6823      	ldr	r3, [r4, #0]
 8006854:	4433      	add	r3, r6
 8006856:	6023      	str	r3, [r4, #0]
 8006858:	2000      	movs	r0, #0
 800685a:	e7db      	b.n	8006814 <__ssputs_r+0x58>
 800685c:	462a      	mov	r2, r5
 800685e:	f000 fba5 	bl	8006fac <_realloc_r>
 8006862:	4606      	mov	r6, r0
 8006864:	2800      	cmp	r0, #0
 8006866:	d1e1      	bne.n	800682c <__ssputs_r+0x70>
 8006868:	6921      	ldr	r1, [r4, #16]
 800686a:	4650      	mov	r0, sl
 800686c:	f000 fabe 	bl	8006dec <_free_r>
 8006870:	e7c7      	b.n	8006802 <__ssputs_r+0x46>
	...

08006874 <_svfiprintf_r>:
 8006874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006878:	4698      	mov	r8, r3
 800687a:	898b      	ldrh	r3, [r1, #12]
 800687c:	061b      	lsls	r3, r3, #24
 800687e:	b09d      	sub	sp, #116	; 0x74
 8006880:	4607      	mov	r7, r0
 8006882:	460d      	mov	r5, r1
 8006884:	4614      	mov	r4, r2
 8006886:	d50e      	bpl.n	80068a6 <_svfiprintf_r+0x32>
 8006888:	690b      	ldr	r3, [r1, #16]
 800688a:	b963      	cbnz	r3, 80068a6 <_svfiprintf_r+0x32>
 800688c:	2140      	movs	r1, #64	; 0x40
 800688e:	f000 fb19 	bl	8006ec4 <_malloc_r>
 8006892:	6028      	str	r0, [r5, #0]
 8006894:	6128      	str	r0, [r5, #16]
 8006896:	b920      	cbnz	r0, 80068a2 <_svfiprintf_r+0x2e>
 8006898:	230c      	movs	r3, #12
 800689a:	603b      	str	r3, [r7, #0]
 800689c:	f04f 30ff 	mov.w	r0, #4294967295
 80068a0:	e0d1      	b.n	8006a46 <_svfiprintf_r+0x1d2>
 80068a2:	2340      	movs	r3, #64	; 0x40
 80068a4:	616b      	str	r3, [r5, #20]
 80068a6:	2300      	movs	r3, #0
 80068a8:	9309      	str	r3, [sp, #36]	; 0x24
 80068aa:	2320      	movs	r3, #32
 80068ac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80068b0:	f8cd 800c 	str.w	r8, [sp, #12]
 80068b4:	2330      	movs	r3, #48	; 0x30
 80068b6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006a60 <_svfiprintf_r+0x1ec>
 80068ba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80068be:	f04f 0901 	mov.w	r9, #1
 80068c2:	4623      	mov	r3, r4
 80068c4:	469a      	mov	sl, r3
 80068c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80068ca:	b10a      	cbz	r2, 80068d0 <_svfiprintf_r+0x5c>
 80068cc:	2a25      	cmp	r2, #37	; 0x25
 80068ce:	d1f9      	bne.n	80068c4 <_svfiprintf_r+0x50>
 80068d0:	ebba 0b04 	subs.w	fp, sl, r4
 80068d4:	d00b      	beq.n	80068ee <_svfiprintf_r+0x7a>
 80068d6:	465b      	mov	r3, fp
 80068d8:	4622      	mov	r2, r4
 80068da:	4629      	mov	r1, r5
 80068dc:	4638      	mov	r0, r7
 80068de:	f7ff ff6d 	bl	80067bc <__ssputs_r>
 80068e2:	3001      	adds	r0, #1
 80068e4:	f000 80aa 	beq.w	8006a3c <_svfiprintf_r+0x1c8>
 80068e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80068ea:	445a      	add	r2, fp
 80068ec:	9209      	str	r2, [sp, #36]	; 0x24
 80068ee:	f89a 3000 	ldrb.w	r3, [sl]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	f000 80a2 	beq.w	8006a3c <_svfiprintf_r+0x1c8>
 80068f8:	2300      	movs	r3, #0
 80068fa:	f04f 32ff 	mov.w	r2, #4294967295
 80068fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006902:	f10a 0a01 	add.w	sl, sl, #1
 8006906:	9304      	str	r3, [sp, #16]
 8006908:	9307      	str	r3, [sp, #28]
 800690a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800690e:	931a      	str	r3, [sp, #104]	; 0x68
 8006910:	4654      	mov	r4, sl
 8006912:	2205      	movs	r2, #5
 8006914:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006918:	4851      	ldr	r0, [pc, #324]	; (8006a60 <_svfiprintf_r+0x1ec>)
 800691a:	f7f9 fc91 	bl	8000240 <memchr>
 800691e:	9a04      	ldr	r2, [sp, #16]
 8006920:	b9d8      	cbnz	r0, 800695a <_svfiprintf_r+0xe6>
 8006922:	06d0      	lsls	r0, r2, #27
 8006924:	bf44      	itt	mi
 8006926:	2320      	movmi	r3, #32
 8006928:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800692c:	0711      	lsls	r1, r2, #28
 800692e:	bf44      	itt	mi
 8006930:	232b      	movmi	r3, #43	; 0x2b
 8006932:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006936:	f89a 3000 	ldrb.w	r3, [sl]
 800693a:	2b2a      	cmp	r3, #42	; 0x2a
 800693c:	d015      	beq.n	800696a <_svfiprintf_r+0xf6>
 800693e:	9a07      	ldr	r2, [sp, #28]
 8006940:	4654      	mov	r4, sl
 8006942:	2000      	movs	r0, #0
 8006944:	f04f 0c0a 	mov.w	ip, #10
 8006948:	4621      	mov	r1, r4
 800694a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800694e:	3b30      	subs	r3, #48	; 0x30
 8006950:	2b09      	cmp	r3, #9
 8006952:	d94e      	bls.n	80069f2 <_svfiprintf_r+0x17e>
 8006954:	b1b0      	cbz	r0, 8006984 <_svfiprintf_r+0x110>
 8006956:	9207      	str	r2, [sp, #28]
 8006958:	e014      	b.n	8006984 <_svfiprintf_r+0x110>
 800695a:	eba0 0308 	sub.w	r3, r0, r8
 800695e:	fa09 f303 	lsl.w	r3, r9, r3
 8006962:	4313      	orrs	r3, r2
 8006964:	9304      	str	r3, [sp, #16]
 8006966:	46a2      	mov	sl, r4
 8006968:	e7d2      	b.n	8006910 <_svfiprintf_r+0x9c>
 800696a:	9b03      	ldr	r3, [sp, #12]
 800696c:	1d19      	adds	r1, r3, #4
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	9103      	str	r1, [sp, #12]
 8006972:	2b00      	cmp	r3, #0
 8006974:	bfbb      	ittet	lt
 8006976:	425b      	neglt	r3, r3
 8006978:	f042 0202 	orrlt.w	r2, r2, #2
 800697c:	9307      	strge	r3, [sp, #28]
 800697e:	9307      	strlt	r3, [sp, #28]
 8006980:	bfb8      	it	lt
 8006982:	9204      	strlt	r2, [sp, #16]
 8006984:	7823      	ldrb	r3, [r4, #0]
 8006986:	2b2e      	cmp	r3, #46	; 0x2e
 8006988:	d10c      	bne.n	80069a4 <_svfiprintf_r+0x130>
 800698a:	7863      	ldrb	r3, [r4, #1]
 800698c:	2b2a      	cmp	r3, #42	; 0x2a
 800698e:	d135      	bne.n	80069fc <_svfiprintf_r+0x188>
 8006990:	9b03      	ldr	r3, [sp, #12]
 8006992:	1d1a      	adds	r2, r3, #4
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	9203      	str	r2, [sp, #12]
 8006998:	2b00      	cmp	r3, #0
 800699a:	bfb8      	it	lt
 800699c:	f04f 33ff 	movlt.w	r3, #4294967295
 80069a0:	3402      	adds	r4, #2
 80069a2:	9305      	str	r3, [sp, #20]
 80069a4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006a70 <_svfiprintf_r+0x1fc>
 80069a8:	7821      	ldrb	r1, [r4, #0]
 80069aa:	2203      	movs	r2, #3
 80069ac:	4650      	mov	r0, sl
 80069ae:	f7f9 fc47 	bl	8000240 <memchr>
 80069b2:	b140      	cbz	r0, 80069c6 <_svfiprintf_r+0x152>
 80069b4:	2340      	movs	r3, #64	; 0x40
 80069b6:	eba0 000a 	sub.w	r0, r0, sl
 80069ba:	fa03 f000 	lsl.w	r0, r3, r0
 80069be:	9b04      	ldr	r3, [sp, #16]
 80069c0:	4303      	orrs	r3, r0
 80069c2:	3401      	adds	r4, #1
 80069c4:	9304      	str	r3, [sp, #16]
 80069c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80069ca:	4826      	ldr	r0, [pc, #152]	; (8006a64 <_svfiprintf_r+0x1f0>)
 80069cc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80069d0:	2206      	movs	r2, #6
 80069d2:	f7f9 fc35 	bl	8000240 <memchr>
 80069d6:	2800      	cmp	r0, #0
 80069d8:	d038      	beq.n	8006a4c <_svfiprintf_r+0x1d8>
 80069da:	4b23      	ldr	r3, [pc, #140]	; (8006a68 <_svfiprintf_r+0x1f4>)
 80069dc:	bb1b      	cbnz	r3, 8006a26 <_svfiprintf_r+0x1b2>
 80069de:	9b03      	ldr	r3, [sp, #12]
 80069e0:	3307      	adds	r3, #7
 80069e2:	f023 0307 	bic.w	r3, r3, #7
 80069e6:	3308      	adds	r3, #8
 80069e8:	9303      	str	r3, [sp, #12]
 80069ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069ec:	4433      	add	r3, r6
 80069ee:	9309      	str	r3, [sp, #36]	; 0x24
 80069f0:	e767      	b.n	80068c2 <_svfiprintf_r+0x4e>
 80069f2:	fb0c 3202 	mla	r2, ip, r2, r3
 80069f6:	460c      	mov	r4, r1
 80069f8:	2001      	movs	r0, #1
 80069fa:	e7a5      	b.n	8006948 <_svfiprintf_r+0xd4>
 80069fc:	2300      	movs	r3, #0
 80069fe:	3401      	adds	r4, #1
 8006a00:	9305      	str	r3, [sp, #20]
 8006a02:	4619      	mov	r1, r3
 8006a04:	f04f 0c0a 	mov.w	ip, #10
 8006a08:	4620      	mov	r0, r4
 8006a0a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006a0e:	3a30      	subs	r2, #48	; 0x30
 8006a10:	2a09      	cmp	r2, #9
 8006a12:	d903      	bls.n	8006a1c <_svfiprintf_r+0x1a8>
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d0c5      	beq.n	80069a4 <_svfiprintf_r+0x130>
 8006a18:	9105      	str	r1, [sp, #20]
 8006a1a:	e7c3      	b.n	80069a4 <_svfiprintf_r+0x130>
 8006a1c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006a20:	4604      	mov	r4, r0
 8006a22:	2301      	movs	r3, #1
 8006a24:	e7f0      	b.n	8006a08 <_svfiprintf_r+0x194>
 8006a26:	ab03      	add	r3, sp, #12
 8006a28:	9300      	str	r3, [sp, #0]
 8006a2a:	462a      	mov	r2, r5
 8006a2c:	4b0f      	ldr	r3, [pc, #60]	; (8006a6c <_svfiprintf_r+0x1f8>)
 8006a2e:	a904      	add	r1, sp, #16
 8006a30:	4638      	mov	r0, r7
 8006a32:	f3af 8000 	nop.w
 8006a36:	1c42      	adds	r2, r0, #1
 8006a38:	4606      	mov	r6, r0
 8006a3a:	d1d6      	bne.n	80069ea <_svfiprintf_r+0x176>
 8006a3c:	89ab      	ldrh	r3, [r5, #12]
 8006a3e:	065b      	lsls	r3, r3, #25
 8006a40:	f53f af2c 	bmi.w	800689c <_svfiprintf_r+0x28>
 8006a44:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006a46:	b01d      	add	sp, #116	; 0x74
 8006a48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a4c:	ab03      	add	r3, sp, #12
 8006a4e:	9300      	str	r3, [sp, #0]
 8006a50:	462a      	mov	r2, r5
 8006a52:	4b06      	ldr	r3, [pc, #24]	; (8006a6c <_svfiprintf_r+0x1f8>)
 8006a54:	a904      	add	r1, sp, #16
 8006a56:	4638      	mov	r0, r7
 8006a58:	f000 f87a 	bl	8006b50 <_printf_i>
 8006a5c:	e7eb      	b.n	8006a36 <_svfiprintf_r+0x1c2>
 8006a5e:	bf00      	nop
 8006a60:	080070e0 	.word	0x080070e0
 8006a64:	080070ea 	.word	0x080070ea
 8006a68:	00000000 	.word	0x00000000
 8006a6c:	080067bd 	.word	0x080067bd
 8006a70:	080070e6 	.word	0x080070e6

08006a74 <_printf_common>:
 8006a74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a78:	4616      	mov	r6, r2
 8006a7a:	4699      	mov	r9, r3
 8006a7c:	688a      	ldr	r2, [r1, #8]
 8006a7e:	690b      	ldr	r3, [r1, #16]
 8006a80:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006a84:	4293      	cmp	r3, r2
 8006a86:	bfb8      	it	lt
 8006a88:	4613      	movlt	r3, r2
 8006a8a:	6033      	str	r3, [r6, #0]
 8006a8c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006a90:	4607      	mov	r7, r0
 8006a92:	460c      	mov	r4, r1
 8006a94:	b10a      	cbz	r2, 8006a9a <_printf_common+0x26>
 8006a96:	3301      	adds	r3, #1
 8006a98:	6033      	str	r3, [r6, #0]
 8006a9a:	6823      	ldr	r3, [r4, #0]
 8006a9c:	0699      	lsls	r1, r3, #26
 8006a9e:	bf42      	ittt	mi
 8006aa0:	6833      	ldrmi	r3, [r6, #0]
 8006aa2:	3302      	addmi	r3, #2
 8006aa4:	6033      	strmi	r3, [r6, #0]
 8006aa6:	6825      	ldr	r5, [r4, #0]
 8006aa8:	f015 0506 	ands.w	r5, r5, #6
 8006aac:	d106      	bne.n	8006abc <_printf_common+0x48>
 8006aae:	f104 0a19 	add.w	sl, r4, #25
 8006ab2:	68e3      	ldr	r3, [r4, #12]
 8006ab4:	6832      	ldr	r2, [r6, #0]
 8006ab6:	1a9b      	subs	r3, r3, r2
 8006ab8:	42ab      	cmp	r3, r5
 8006aba:	dc26      	bgt.n	8006b0a <_printf_common+0x96>
 8006abc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006ac0:	1e13      	subs	r3, r2, #0
 8006ac2:	6822      	ldr	r2, [r4, #0]
 8006ac4:	bf18      	it	ne
 8006ac6:	2301      	movne	r3, #1
 8006ac8:	0692      	lsls	r2, r2, #26
 8006aca:	d42b      	bmi.n	8006b24 <_printf_common+0xb0>
 8006acc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006ad0:	4649      	mov	r1, r9
 8006ad2:	4638      	mov	r0, r7
 8006ad4:	47c0      	blx	r8
 8006ad6:	3001      	adds	r0, #1
 8006ad8:	d01e      	beq.n	8006b18 <_printf_common+0xa4>
 8006ada:	6823      	ldr	r3, [r4, #0]
 8006adc:	68e5      	ldr	r5, [r4, #12]
 8006ade:	6832      	ldr	r2, [r6, #0]
 8006ae0:	f003 0306 	and.w	r3, r3, #6
 8006ae4:	2b04      	cmp	r3, #4
 8006ae6:	bf08      	it	eq
 8006ae8:	1aad      	subeq	r5, r5, r2
 8006aea:	68a3      	ldr	r3, [r4, #8]
 8006aec:	6922      	ldr	r2, [r4, #16]
 8006aee:	bf0c      	ite	eq
 8006af0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006af4:	2500      	movne	r5, #0
 8006af6:	4293      	cmp	r3, r2
 8006af8:	bfc4      	itt	gt
 8006afa:	1a9b      	subgt	r3, r3, r2
 8006afc:	18ed      	addgt	r5, r5, r3
 8006afe:	2600      	movs	r6, #0
 8006b00:	341a      	adds	r4, #26
 8006b02:	42b5      	cmp	r5, r6
 8006b04:	d11a      	bne.n	8006b3c <_printf_common+0xc8>
 8006b06:	2000      	movs	r0, #0
 8006b08:	e008      	b.n	8006b1c <_printf_common+0xa8>
 8006b0a:	2301      	movs	r3, #1
 8006b0c:	4652      	mov	r2, sl
 8006b0e:	4649      	mov	r1, r9
 8006b10:	4638      	mov	r0, r7
 8006b12:	47c0      	blx	r8
 8006b14:	3001      	adds	r0, #1
 8006b16:	d103      	bne.n	8006b20 <_printf_common+0xac>
 8006b18:	f04f 30ff 	mov.w	r0, #4294967295
 8006b1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b20:	3501      	adds	r5, #1
 8006b22:	e7c6      	b.n	8006ab2 <_printf_common+0x3e>
 8006b24:	18e1      	adds	r1, r4, r3
 8006b26:	1c5a      	adds	r2, r3, #1
 8006b28:	2030      	movs	r0, #48	; 0x30
 8006b2a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006b2e:	4422      	add	r2, r4
 8006b30:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006b34:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006b38:	3302      	adds	r3, #2
 8006b3a:	e7c7      	b.n	8006acc <_printf_common+0x58>
 8006b3c:	2301      	movs	r3, #1
 8006b3e:	4622      	mov	r2, r4
 8006b40:	4649      	mov	r1, r9
 8006b42:	4638      	mov	r0, r7
 8006b44:	47c0      	blx	r8
 8006b46:	3001      	adds	r0, #1
 8006b48:	d0e6      	beq.n	8006b18 <_printf_common+0xa4>
 8006b4a:	3601      	adds	r6, #1
 8006b4c:	e7d9      	b.n	8006b02 <_printf_common+0x8e>
	...

08006b50 <_printf_i>:
 8006b50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006b54:	7e0f      	ldrb	r7, [r1, #24]
 8006b56:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006b58:	2f78      	cmp	r7, #120	; 0x78
 8006b5a:	4691      	mov	r9, r2
 8006b5c:	4680      	mov	r8, r0
 8006b5e:	460c      	mov	r4, r1
 8006b60:	469a      	mov	sl, r3
 8006b62:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006b66:	d807      	bhi.n	8006b78 <_printf_i+0x28>
 8006b68:	2f62      	cmp	r7, #98	; 0x62
 8006b6a:	d80a      	bhi.n	8006b82 <_printf_i+0x32>
 8006b6c:	2f00      	cmp	r7, #0
 8006b6e:	f000 80d8 	beq.w	8006d22 <_printf_i+0x1d2>
 8006b72:	2f58      	cmp	r7, #88	; 0x58
 8006b74:	f000 80a3 	beq.w	8006cbe <_printf_i+0x16e>
 8006b78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006b7c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006b80:	e03a      	b.n	8006bf8 <_printf_i+0xa8>
 8006b82:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006b86:	2b15      	cmp	r3, #21
 8006b88:	d8f6      	bhi.n	8006b78 <_printf_i+0x28>
 8006b8a:	a101      	add	r1, pc, #4	; (adr r1, 8006b90 <_printf_i+0x40>)
 8006b8c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006b90:	08006be9 	.word	0x08006be9
 8006b94:	08006bfd 	.word	0x08006bfd
 8006b98:	08006b79 	.word	0x08006b79
 8006b9c:	08006b79 	.word	0x08006b79
 8006ba0:	08006b79 	.word	0x08006b79
 8006ba4:	08006b79 	.word	0x08006b79
 8006ba8:	08006bfd 	.word	0x08006bfd
 8006bac:	08006b79 	.word	0x08006b79
 8006bb0:	08006b79 	.word	0x08006b79
 8006bb4:	08006b79 	.word	0x08006b79
 8006bb8:	08006b79 	.word	0x08006b79
 8006bbc:	08006d09 	.word	0x08006d09
 8006bc0:	08006c2d 	.word	0x08006c2d
 8006bc4:	08006ceb 	.word	0x08006ceb
 8006bc8:	08006b79 	.word	0x08006b79
 8006bcc:	08006b79 	.word	0x08006b79
 8006bd0:	08006d2b 	.word	0x08006d2b
 8006bd4:	08006b79 	.word	0x08006b79
 8006bd8:	08006c2d 	.word	0x08006c2d
 8006bdc:	08006b79 	.word	0x08006b79
 8006be0:	08006b79 	.word	0x08006b79
 8006be4:	08006cf3 	.word	0x08006cf3
 8006be8:	682b      	ldr	r3, [r5, #0]
 8006bea:	1d1a      	adds	r2, r3, #4
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	602a      	str	r2, [r5, #0]
 8006bf0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006bf4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006bf8:	2301      	movs	r3, #1
 8006bfa:	e0a3      	b.n	8006d44 <_printf_i+0x1f4>
 8006bfc:	6820      	ldr	r0, [r4, #0]
 8006bfe:	6829      	ldr	r1, [r5, #0]
 8006c00:	0606      	lsls	r6, r0, #24
 8006c02:	f101 0304 	add.w	r3, r1, #4
 8006c06:	d50a      	bpl.n	8006c1e <_printf_i+0xce>
 8006c08:	680e      	ldr	r6, [r1, #0]
 8006c0a:	602b      	str	r3, [r5, #0]
 8006c0c:	2e00      	cmp	r6, #0
 8006c0e:	da03      	bge.n	8006c18 <_printf_i+0xc8>
 8006c10:	232d      	movs	r3, #45	; 0x2d
 8006c12:	4276      	negs	r6, r6
 8006c14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c18:	485e      	ldr	r0, [pc, #376]	; (8006d94 <_printf_i+0x244>)
 8006c1a:	230a      	movs	r3, #10
 8006c1c:	e019      	b.n	8006c52 <_printf_i+0x102>
 8006c1e:	680e      	ldr	r6, [r1, #0]
 8006c20:	602b      	str	r3, [r5, #0]
 8006c22:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006c26:	bf18      	it	ne
 8006c28:	b236      	sxthne	r6, r6
 8006c2a:	e7ef      	b.n	8006c0c <_printf_i+0xbc>
 8006c2c:	682b      	ldr	r3, [r5, #0]
 8006c2e:	6820      	ldr	r0, [r4, #0]
 8006c30:	1d19      	adds	r1, r3, #4
 8006c32:	6029      	str	r1, [r5, #0]
 8006c34:	0601      	lsls	r1, r0, #24
 8006c36:	d501      	bpl.n	8006c3c <_printf_i+0xec>
 8006c38:	681e      	ldr	r6, [r3, #0]
 8006c3a:	e002      	b.n	8006c42 <_printf_i+0xf2>
 8006c3c:	0646      	lsls	r6, r0, #25
 8006c3e:	d5fb      	bpl.n	8006c38 <_printf_i+0xe8>
 8006c40:	881e      	ldrh	r6, [r3, #0]
 8006c42:	4854      	ldr	r0, [pc, #336]	; (8006d94 <_printf_i+0x244>)
 8006c44:	2f6f      	cmp	r7, #111	; 0x6f
 8006c46:	bf0c      	ite	eq
 8006c48:	2308      	moveq	r3, #8
 8006c4a:	230a      	movne	r3, #10
 8006c4c:	2100      	movs	r1, #0
 8006c4e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006c52:	6865      	ldr	r5, [r4, #4]
 8006c54:	60a5      	str	r5, [r4, #8]
 8006c56:	2d00      	cmp	r5, #0
 8006c58:	bfa2      	ittt	ge
 8006c5a:	6821      	ldrge	r1, [r4, #0]
 8006c5c:	f021 0104 	bicge.w	r1, r1, #4
 8006c60:	6021      	strge	r1, [r4, #0]
 8006c62:	b90e      	cbnz	r6, 8006c68 <_printf_i+0x118>
 8006c64:	2d00      	cmp	r5, #0
 8006c66:	d04d      	beq.n	8006d04 <_printf_i+0x1b4>
 8006c68:	4615      	mov	r5, r2
 8006c6a:	fbb6 f1f3 	udiv	r1, r6, r3
 8006c6e:	fb03 6711 	mls	r7, r3, r1, r6
 8006c72:	5dc7      	ldrb	r7, [r0, r7]
 8006c74:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006c78:	4637      	mov	r7, r6
 8006c7a:	42bb      	cmp	r3, r7
 8006c7c:	460e      	mov	r6, r1
 8006c7e:	d9f4      	bls.n	8006c6a <_printf_i+0x11a>
 8006c80:	2b08      	cmp	r3, #8
 8006c82:	d10b      	bne.n	8006c9c <_printf_i+0x14c>
 8006c84:	6823      	ldr	r3, [r4, #0]
 8006c86:	07de      	lsls	r6, r3, #31
 8006c88:	d508      	bpl.n	8006c9c <_printf_i+0x14c>
 8006c8a:	6923      	ldr	r3, [r4, #16]
 8006c8c:	6861      	ldr	r1, [r4, #4]
 8006c8e:	4299      	cmp	r1, r3
 8006c90:	bfde      	ittt	le
 8006c92:	2330      	movle	r3, #48	; 0x30
 8006c94:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006c98:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006c9c:	1b52      	subs	r2, r2, r5
 8006c9e:	6122      	str	r2, [r4, #16]
 8006ca0:	f8cd a000 	str.w	sl, [sp]
 8006ca4:	464b      	mov	r3, r9
 8006ca6:	aa03      	add	r2, sp, #12
 8006ca8:	4621      	mov	r1, r4
 8006caa:	4640      	mov	r0, r8
 8006cac:	f7ff fee2 	bl	8006a74 <_printf_common>
 8006cb0:	3001      	adds	r0, #1
 8006cb2:	d14c      	bne.n	8006d4e <_printf_i+0x1fe>
 8006cb4:	f04f 30ff 	mov.w	r0, #4294967295
 8006cb8:	b004      	add	sp, #16
 8006cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006cbe:	4835      	ldr	r0, [pc, #212]	; (8006d94 <_printf_i+0x244>)
 8006cc0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006cc4:	6829      	ldr	r1, [r5, #0]
 8006cc6:	6823      	ldr	r3, [r4, #0]
 8006cc8:	f851 6b04 	ldr.w	r6, [r1], #4
 8006ccc:	6029      	str	r1, [r5, #0]
 8006cce:	061d      	lsls	r5, r3, #24
 8006cd0:	d514      	bpl.n	8006cfc <_printf_i+0x1ac>
 8006cd2:	07df      	lsls	r7, r3, #31
 8006cd4:	bf44      	itt	mi
 8006cd6:	f043 0320 	orrmi.w	r3, r3, #32
 8006cda:	6023      	strmi	r3, [r4, #0]
 8006cdc:	b91e      	cbnz	r6, 8006ce6 <_printf_i+0x196>
 8006cde:	6823      	ldr	r3, [r4, #0]
 8006ce0:	f023 0320 	bic.w	r3, r3, #32
 8006ce4:	6023      	str	r3, [r4, #0]
 8006ce6:	2310      	movs	r3, #16
 8006ce8:	e7b0      	b.n	8006c4c <_printf_i+0xfc>
 8006cea:	6823      	ldr	r3, [r4, #0]
 8006cec:	f043 0320 	orr.w	r3, r3, #32
 8006cf0:	6023      	str	r3, [r4, #0]
 8006cf2:	2378      	movs	r3, #120	; 0x78
 8006cf4:	4828      	ldr	r0, [pc, #160]	; (8006d98 <_printf_i+0x248>)
 8006cf6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006cfa:	e7e3      	b.n	8006cc4 <_printf_i+0x174>
 8006cfc:	0659      	lsls	r1, r3, #25
 8006cfe:	bf48      	it	mi
 8006d00:	b2b6      	uxthmi	r6, r6
 8006d02:	e7e6      	b.n	8006cd2 <_printf_i+0x182>
 8006d04:	4615      	mov	r5, r2
 8006d06:	e7bb      	b.n	8006c80 <_printf_i+0x130>
 8006d08:	682b      	ldr	r3, [r5, #0]
 8006d0a:	6826      	ldr	r6, [r4, #0]
 8006d0c:	6961      	ldr	r1, [r4, #20]
 8006d0e:	1d18      	adds	r0, r3, #4
 8006d10:	6028      	str	r0, [r5, #0]
 8006d12:	0635      	lsls	r5, r6, #24
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	d501      	bpl.n	8006d1c <_printf_i+0x1cc>
 8006d18:	6019      	str	r1, [r3, #0]
 8006d1a:	e002      	b.n	8006d22 <_printf_i+0x1d2>
 8006d1c:	0670      	lsls	r0, r6, #25
 8006d1e:	d5fb      	bpl.n	8006d18 <_printf_i+0x1c8>
 8006d20:	8019      	strh	r1, [r3, #0]
 8006d22:	2300      	movs	r3, #0
 8006d24:	6123      	str	r3, [r4, #16]
 8006d26:	4615      	mov	r5, r2
 8006d28:	e7ba      	b.n	8006ca0 <_printf_i+0x150>
 8006d2a:	682b      	ldr	r3, [r5, #0]
 8006d2c:	1d1a      	adds	r2, r3, #4
 8006d2e:	602a      	str	r2, [r5, #0]
 8006d30:	681d      	ldr	r5, [r3, #0]
 8006d32:	6862      	ldr	r2, [r4, #4]
 8006d34:	2100      	movs	r1, #0
 8006d36:	4628      	mov	r0, r5
 8006d38:	f7f9 fa82 	bl	8000240 <memchr>
 8006d3c:	b108      	cbz	r0, 8006d42 <_printf_i+0x1f2>
 8006d3e:	1b40      	subs	r0, r0, r5
 8006d40:	6060      	str	r0, [r4, #4]
 8006d42:	6863      	ldr	r3, [r4, #4]
 8006d44:	6123      	str	r3, [r4, #16]
 8006d46:	2300      	movs	r3, #0
 8006d48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d4c:	e7a8      	b.n	8006ca0 <_printf_i+0x150>
 8006d4e:	6923      	ldr	r3, [r4, #16]
 8006d50:	462a      	mov	r2, r5
 8006d52:	4649      	mov	r1, r9
 8006d54:	4640      	mov	r0, r8
 8006d56:	47d0      	blx	sl
 8006d58:	3001      	adds	r0, #1
 8006d5a:	d0ab      	beq.n	8006cb4 <_printf_i+0x164>
 8006d5c:	6823      	ldr	r3, [r4, #0]
 8006d5e:	079b      	lsls	r3, r3, #30
 8006d60:	d413      	bmi.n	8006d8a <_printf_i+0x23a>
 8006d62:	68e0      	ldr	r0, [r4, #12]
 8006d64:	9b03      	ldr	r3, [sp, #12]
 8006d66:	4298      	cmp	r0, r3
 8006d68:	bfb8      	it	lt
 8006d6a:	4618      	movlt	r0, r3
 8006d6c:	e7a4      	b.n	8006cb8 <_printf_i+0x168>
 8006d6e:	2301      	movs	r3, #1
 8006d70:	4632      	mov	r2, r6
 8006d72:	4649      	mov	r1, r9
 8006d74:	4640      	mov	r0, r8
 8006d76:	47d0      	blx	sl
 8006d78:	3001      	adds	r0, #1
 8006d7a:	d09b      	beq.n	8006cb4 <_printf_i+0x164>
 8006d7c:	3501      	adds	r5, #1
 8006d7e:	68e3      	ldr	r3, [r4, #12]
 8006d80:	9903      	ldr	r1, [sp, #12]
 8006d82:	1a5b      	subs	r3, r3, r1
 8006d84:	42ab      	cmp	r3, r5
 8006d86:	dcf2      	bgt.n	8006d6e <_printf_i+0x21e>
 8006d88:	e7eb      	b.n	8006d62 <_printf_i+0x212>
 8006d8a:	2500      	movs	r5, #0
 8006d8c:	f104 0619 	add.w	r6, r4, #25
 8006d90:	e7f5      	b.n	8006d7e <_printf_i+0x22e>
 8006d92:	bf00      	nop
 8006d94:	080070f1 	.word	0x080070f1
 8006d98:	08007102 	.word	0x08007102

08006d9c <memcpy>:
 8006d9c:	440a      	add	r2, r1
 8006d9e:	4291      	cmp	r1, r2
 8006da0:	f100 33ff 	add.w	r3, r0, #4294967295
 8006da4:	d100      	bne.n	8006da8 <memcpy+0xc>
 8006da6:	4770      	bx	lr
 8006da8:	b510      	push	{r4, lr}
 8006daa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006dae:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006db2:	4291      	cmp	r1, r2
 8006db4:	d1f9      	bne.n	8006daa <memcpy+0xe>
 8006db6:	bd10      	pop	{r4, pc}

08006db8 <memmove>:
 8006db8:	4288      	cmp	r0, r1
 8006dba:	b510      	push	{r4, lr}
 8006dbc:	eb01 0402 	add.w	r4, r1, r2
 8006dc0:	d902      	bls.n	8006dc8 <memmove+0x10>
 8006dc2:	4284      	cmp	r4, r0
 8006dc4:	4623      	mov	r3, r4
 8006dc6:	d807      	bhi.n	8006dd8 <memmove+0x20>
 8006dc8:	1e43      	subs	r3, r0, #1
 8006dca:	42a1      	cmp	r1, r4
 8006dcc:	d008      	beq.n	8006de0 <memmove+0x28>
 8006dce:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006dd2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006dd6:	e7f8      	b.n	8006dca <memmove+0x12>
 8006dd8:	4402      	add	r2, r0
 8006dda:	4601      	mov	r1, r0
 8006ddc:	428a      	cmp	r2, r1
 8006dde:	d100      	bne.n	8006de2 <memmove+0x2a>
 8006de0:	bd10      	pop	{r4, pc}
 8006de2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006de6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006dea:	e7f7      	b.n	8006ddc <memmove+0x24>

08006dec <_free_r>:
 8006dec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006dee:	2900      	cmp	r1, #0
 8006df0:	d044      	beq.n	8006e7c <_free_r+0x90>
 8006df2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006df6:	9001      	str	r0, [sp, #4]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	f1a1 0404 	sub.w	r4, r1, #4
 8006dfe:	bfb8      	it	lt
 8006e00:	18e4      	addlt	r4, r4, r3
 8006e02:	f000 f913 	bl	800702c <__malloc_lock>
 8006e06:	4a1e      	ldr	r2, [pc, #120]	; (8006e80 <_free_r+0x94>)
 8006e08:	9801      	ldr	r0, [sp, #4]
 8006e0a:	6813      	ldr	r3, [r2, #0]
 8006e0c:	b933      	cbnz	r3, 8006e1c <_free_r+0x30>
 8006e0e:	6063      	str	r3, [r4, #4]
 8006e10:	6014      	str	r4, [r2, #0]
 8006e12:	b003      	add	sp, #12
 8006e14:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006e18:	f000 b90e 	b.w	8007038 <__malloc_unlock>
 8006e1c:	42a3      	cmp	r3, r4
 8006e1e:	d908      	bls.n	8006e32 <_free_r+0x46>
 8006e20:	6825      	ldr	r5, [r4, #0]
 8006e22:	1961      	adds	r1, r4, r5
 8006e24:	428b      	cmp	r3, r1
 8006e26:	bf01      	itttt	eq
 8006e28:	6819      	ldreq	r1, [r3, #0]
 8006e2a:	685b      	ldreq	r3, [r3, #4]
 8006e2c:	1949      	addeq	r1, r1, r5
 8006e2e:	6021      	streq	r1, [r4, #0]
 8006e30:	e7ed      	b.n	8006e0e <_free_r+0x22>
 8006e32:	461a      	mov	r2, r3
 8006e34:	685b      	ldr	r3, [r3, #4]
 8006e36:	b10b      	cbz	r3, 8006e3c <_free_r+0x50>
 8006e38:	42a3      	cmp	r3, r4
 8006e3a:	d9fa      	bls.n	8006e32 <_free_r+0x46>
 8006e3c:	6811      	ldr	r1, [r2, #0]
 8006e3e:	1855      	adds	r5, r2, r1
 8006e40:	42a5      	cmp	r5, r4
 8006e42:	d10b      	bne.n	8006e5c <_free_r+0x70>
 8006e44:	6824      	ldr	r4, [r4, #0]
 8006e46:	4421      	add	r1, r4
 8006e48:	1854      	adds	r4, r2, r1
 8006e4a:	42a3      	cmp	r3, r4
 8006e4c:	6011      	str	r1, [r2, #0]
 8006e4e:	d1e0      	bne.n	8006e12 <_free_r+0x26>
 8006e50:	681c      	ldr	r4, [r3, #0]
 8006e52:	685b      	ldr	r3, [r3, #4]
 8006e54:	6053      	str	r3, [r2, #4]
 8006e56:	4421      	add	r1, r4
 8006e58:	6011      	str	r1, [r2, #0]
 8006e5a:	e7da      	b.n	8006e12 <_free_r+0x26>
 8006e5c:	d902      	bls.n	8006e64 <_free_r+0x78>
 8006e5e:	230c      	movs	r3, #12
 8006e60:	6003      	str	r3, [r0, #0]
 8006e62:	e7d6      	b.n	8006e12 <_free_r+0x26>
 8006e64:	6825      	ldr	r5, [r4, #0]
 8006e66:	1961      	adds	r1, r4, r5
 8006e68:	428b      	cmp	r3, r1
 8006e6a:	bf04      	itt	eq
 8006e6c:	6819      	ldreq	r1, [r3, #0]
 8006e6e:	685b      	ldreq	r3, [r3, #4]
 8006e70:	6063      	str	r3, [r4, #4]
 8006e72:	bf04      	itt	eq
 8006e74:	1949      	addeq	r1, r1, r5
 8006e76:	6021      	streq	r1, [r4, #0]
 8006e78:	6054      	str	r4, [r2, #4]
 8006e7a:	e7ca      	b.n	8006e12 <_free_r+0x26>
 8006e7c:	b003      	add	sp, #12
 8006e7e:	bd30      	pop	{r4, r5, pc}
 8006e80:	20000580 	.word	0x20000580

08006e84 <sbrk_aligned>:
 8006e84:	b570      	push	{r4, r5, r6, lr}
 8006e86:	4e0e      	ldr	r6, [pc, #56]	; (8006ec0 <sbrk_aligned+0x3c>)
 8006e88:	460c      	mov	r4, r1
 8006e8a:	6831      	ldr	r1, [r6, #0]
 8006e8c:	4605      	mov	r5, r0
 8006e8e:	b911      	cbnz	r1, 8006e96 <sbrk_aligned+0x12>
 8006e90:	f000 f8bc 	bl	800700c <_sbrk_r>
 8006e94:	6030      	str	r0, [r6, #0]
 8006e96:	4621      	mov	r1, r4
 8006e98:	4628      	mov	r0, r5
 8006e9a:	f000 f8b7 	bl	800700c <_sbrk_r>
 8006e9e:	1c43      	adds	r3, r0, #1
 8006ea0:	d00a      	beq.n	8006eb8 <sbrk_aligned+0x34>
 8006ea2:	1cc4      	adds	r4, r0, #3
 8006ea4:	f024 0403 	bic.w	r4, r4, #3
 8006ea8:	42a0      	cmp	r0, r4
 8006eaa:	d007      	beq.n	8006ebc <sbrk_aligned+0x38>
 8006eac:	1a21      	subs	r1, r4, r0
 8006eae:	4628      	mov	r0, r5
 8006eb0:	f000 f8ac 	bl	800700c <_sbrk_r>
 8006eb4:	3001      	adds	r0, #1
 8006eb6:	d101      	bne.n	8006ebc <sbrk_aligned+0x38>
 8006eb8:	f04f 34ff 	mov.w	r4, #4294967295
 8006ebc:	4620      	mov	r0, r4
 8006ebe:	bd70      	pop	{r4, r5, r6, pc}
 8006ec0:	20000584 	.word	0x20000584

08006ec4 <_malloc_r>:
 8006ec4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ec8:	1ccd      	adds	r5, r1, #3
 8006eca:	f025 0503 	bic.w	r5, r5, #3
 8006ece:	3508      	adds	r5, #8
 8006ed0:	2d0c      	cmp	r5, #12
 8006ed2:	bf38      	it	cc
 8006ed4:	250c      	movcc	r5, #12
 8006ed6:	2d00      	cmp	r5, #0
 8006ed8:	4607      	mov	r7, r0
 8006eda:	db01      	blt.n	8006ee0 <_malloc_r+0x1c>
 8006edc:	42a9      	cmp	r1, r5
 8006ede:	d905      	bls.n	8006eec <_malloc_r+0x28>
 8006ee0:	230c      	movs	r3, #12
 8006ee2:	603b      	str	r3, [r7, #0]
 8006ee4:	2600      	movs	r6, #0
 8006ee6:	4630      	mov	r0, r6
 8006ee8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006eec:	4e2e      	ldr	r6, [pc, #184]	; (8006fa8 <_malloc_r+0xe4>)
 8006eee:	f000 f89d 	bl	800702c <__malloc_lock>
 8006ef2:	6833      	ldr	r3, [r6, #0]
 8006ef4:	461c      	mov	r4, r3
 8006ef6:	bb34      	cbnz	r4, 8006f46 <_malloc_r+0x82>
 8006ef8:	4629      	mov	r1, r5
 8006efa:	4638      	mov	r0, r7
 8006efc:	f7ff ffc2 	bl	8006e84 <sbrk_aligned>
 8006f00:	1c43      	adds	r3, r0, #1
 8006f02:	4604      	mov	r4, r0
 8006f04:	d14d      	bne.n	8006fa2 <_malloc_r+0xde>
 8006f06:	6834      	ldr	r4, [r6, #0]
 8006f08:	4626      	mov	r6, r4
 8006f0a:	2e00      	cmp	r6, #0
 8006f0c:	d140      	bne.n	8006f90 <_malloc_r+0xcc>
 8006f0e:	6823      	ldr	r3, [r4, #0]
 8006f10:	4631      	mov	r1, r6
 8006f12:	4638      	mov	r0, r7
 8006f14:	eb04 0803 	add.w	r8, r4, r3
 8006f18:	f000 f878 	bl	800700c <_sbrk_r>
 8006f1c:	4580      	cmp	r8, r0
 8006f1e:	d13a      	bne.n	8006f96 <_malloc_r+0xd2>
 8006f20:	6821      	ldr	r1, [r4, #0]
 8006f22:	3503      	adds	r5, #3
 8006f24:	1a6d      	subs	r5, r5, r1
 8006f26:	f025 0503 	bic.w	r5, r5, #3
 8006f2a:	3508      	adds	r5, #8
 8006f2c:	2d0c      	cmp	r5, #12
 8006f2e:	bf38      	it	cc
 8006f30:	250c      	movcc	r5, #12
 8006f32:	4629      	mov	r1, r5
 8006f34:	4638      	mov	r0, r7
 8006f36:	f7ff ffa5 	bl	8006e84 <sbrk_aligned>
 8006f3a:	3001      	adds	r0, #1
 8006f3c:	d02b      	beq.n	8006f96 <_malloc_r+0xd2>
 8006f3e:	6823      	ldr	r3, [r4, #0]
 8006f40:	442b      	add	r3, r5
 8006f42:	6023      	str	r3, [r4, #0]
 8006f44:	e00e      	b.n	8006f64 <_malloc_r+0xa0>
 8006f46:	6822      	ldr	r2, [r4, #0]
 8006f48:	1b52      	subs	r2, r2, r5
 8006f4a:	d41e      	bmi.n	8006f8a <_malloc_r+0xc6>
 8006f4c:	2a0b      	cmp	r2, #11
 8006f4e:	d916      	bls.n	8006f7e <_malloc_r+0xba>
 8006f50:	1961      	adds	r1, r4, r5
 8006f52:	42a3      	cmp	r3, r4
 8006f54:	6025      	str	r5, [r4, #0]
 8006f56:	bf18      	it	ne
 8006f58:	6059      	strne	r1, [r3, #4]
 8006f5a:	6863      	ldr	r3, [r4, #4]
 8006f5c:	bf08      	it	eq
 8006f5e:	6031      	streq	r1, [r6, #0]
 8006f60:	5162      	str	r2, [r4, r5]
 8006f62:	604b      	str	r3, [r1, #4]
 8006f64:	4638      	mov	r0, r7
 8006f66:	f104 060b 	add.w	r6, r4, #11
 8006f6a:	f000 f865 	bl	8007038 <__malloc_unlock>
 8006f6e:	f026 0607 	bic.w	r6, r6, #7
 8006f72:	1d23      	adds	r3, r4, #4
 8006f74:	1af2      	subs	r2, r6, r3
 8006f76:	d0b6      	beq.n	8006ee6 <_malloc_r+0x22>
 8006f78:	1b9b      	subs	r3, r3, r6
 8006f7a:	50a3      	str	r3, [r4, r2]
 8006f7c:	e7b3      	b.n	8006ee6 <_malloc_r+0x22>
 8006f7e:	6862      	ldr	r2, [r4, #4]
 8006f80:	42a3      	cmp	r3, r4
 8006f82:	bf0c      	ite	eq
 8006f84:	6032      	streq	r2, [r6, #0]
 8006f86:	605a      	strne	r2, [r3, #4]
 8006f88:	e7ec      	b.n	8006f64 <_malloc_r+0xa0>
 8006f8a:	4623      	mov	r3, r4
 8006f8c:	6864      	ldr	r4, [r4, #4]
 8006f8e:	e7b2      	b.n	8006ef6 <_malloc_r+0x32>
 8006f90:	4634      	mov	r4, r6
 8006f92:	6876      	ldr	r6, [r6, #4]
 8006f94:	e7b9      	b.n	8006f0a <_malloc_r+0x46>
 8006f96:	230c      	movs	r3, #12
 8006f98:	603b      	str	r3, [r7, #0]
 8006f9a:	4638      	mov	r0, r7
 8006f9c:	f000 f84c 	bl	8007038 <__malloc_unlock>
 8006fa0:	e7a1      	b.n	8006ee6 <_malloc_r+0x22>
 8006fa2:	6025      	str	r5, [r4, #0]
 8006fa4:	e7de      	b.n	8006f64 <_malloc_r+0xa0>
 8006fa6:	bf00      	nop
 8006fa8:	20000580 	.word	0x20000580

08006fac <_realloc_r>:
 8006fac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006fb0:	4680      	mov	r8, r0
 8006fb2:	4614      	mov	r4, r2
 8006fb4:	460e      	mov	r6, r1
 8006fb6:	b921      	cbnz	r1, 8006fc2 <_realloc_r+0x16>
 8006fb8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006fbc:	4611      	mov	r1, r2
 8006fbe:	f7ff bf81 	b.w	8006ec4 <_malloc_r>
 8006fc2:	b92a      	cbnz	r2, 8006fd0 <_realloc_r+0x24>
 8006fc4:	f7ff ff12 	bl	8006dec <_free_r>
 8006fc8:	4625      	mov	r5, r4
 8006fca:	4628      	mov	r0, r5
 8006fcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006fd0:	f000 f838 	bl	8007044 <_malloc_usable_size_r>
 8006fd4:	4284      	cmp	r4, r0
 8006fd6:	4607      	mov	r7, r0
 8006fd8:	d802      	bhi.n	8006fe0 <_realloc_r+0x34>
 8006fda:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006fde:	d812      	bhi.n	8007006 <_realloc_r+0x5a>
 8006fe0:	4621      	mov	r1, r4
 8006fe2:	4640      	mov	r0, r8
 8006fe4:	f7ff ff6e 	bl	8006ec4 <_malloc_r>
 8006fe8:	4605      	mov	r5, r0
 8006fea:	2800      	cmp	r0, #0
 8006fec:	d0ed      	beq.n	8006fca <_realloc_r+0x1e>
 8006fee:	42bc      	cmp	r4, r7
 8006ff0:	4622      	mov	r2, r4
 8006ff2:	4631      	mov	r1, r6
 8006ff4:	bf28      	it	cs
 8006ff6:	463a      	movcs	r2, r7
 8006ff8:	f7ff fed0 	bl	8006d9c <memcpy>
 8006ffc:	4631      	mov	r1, r6
 8006ffe:	4640      	mov	r0, r8
 8007000:	f7ff fef4 	bl	8006dec <_free_r>
 8007004:	e7e1      	b.n	8006fca <_realloc_r+0x1e>
 8007006:	4635      	mov	r5, r6
 8007008:	e7df      	b.n	8006fca <_realloc_r+0x1e>
	...

0800700c <_sbrk_r>:
 800700c:	b538      	push	{r3, r4, r5, lr}
 800700e:	4d06      	ldr	r5, [pc, #24]	; (8007028 <_sbrk_r+0x1c>)
 8007010:	2300      	movs	r3, #0
 8007012:	4604      	mov	r4, r0
 8007014:	4608      	mov	r0, r1
 8007016:	602b      	str	r3, [r5, #0]
 8007018:	f7fa fb1e 	bl	8001658 <_sbrk>
 800701c:	1c43      	adds	r3, r0, #1
 800701e:	d102      	bne.n	8007026 <_sbrk_r+0x1a>
 8007020:	682b      	ldr	r3, [r5, #0]
 8007022:	b103      	cbz	r3, 8007026 <_sbrk_r+0x1a>
 8007024:	6023      	str	r3, [r4, #0]
 8007026:	bd38      	pop	{r3, r4, r5, pc}
 8007028:	20000588 	.word	0x20000588

0800702c <__malloc_lock>:
 800702c:	4801      	ldr	r0, [pc, #4]	; (8007034 <__malloc_lock+0x8>)
 800702e:	f000 b811 	b.w	8007054 <__retarget_lock_acquire_recursive>
 8007032:	bf00      	nop
 8007034:	2000058c 	.word	0x2000058c

08007038 <__malloc_unlock>:
 8007038:	4801      	ldr	r0, [pc, #4]	; (8007040 <__malloc_unlock+0x8>)
 800703a:	f000 b80c 	b.w	8007056 <__retarget_lock_release_recursive>
 800703e:	bf00      	nop
 8007040:	2000058c 	.word	0x2000058c

08007044 <_malloc_usable_size_r>:
 8007044:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007048:	1f18      	subs	r0, r3, #4
 800704a:	2b00      	cmp	r3, #0
 800704c:	bfbc      	itt	lt
 800704e:	580b      	ldrlt	r3, [r1, r0]
 8007050:	18c0      	addlt	r0, r0, r3
 8007052:	4770      	bx	lr

08007054 <__retarget_lock_acquire_recursive>:
 8007054:	4770      	bx	lr

08007056 <__retarget_lock_release_recursive>:
 8007056:	4770      	bx	lr

08007058 <_init>:
 8007058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800705a:	bf00      	nop
 800705c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800705e:	bc08      	pop	{r3}
 8007060:	469e      	mov	lr, r3
 8007062:	4770      	bx	lr

08007064 <_fini>:
 8007064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007066:	bf00      	nop
 8007068:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800706a:	bc08      	pop	{r3}
 800706c:	469e      	mov	lr, r3
 800706e:	4770      	bx	lr
